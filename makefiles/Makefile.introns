################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.introns 785 2006-09-20 16:51:23Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=introns

################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
PARAM_TABLE_NAME_INTRONS?=$(PARAM_PSQL_SCHEMA).introns

################################################
## Cluster parameters
## queue to submit to
PARAM_PRIORITY?=-10

PARAM_QUEUE?=short_jobs.q

################################################
## Input data:
## location to the indexed genome file.
PARAM_INPUT_GENOME?=genome

## genome name
PARAM_GENOME?=$(PARAM_PSQL_SCHEMA)

## Separator
PARAM_SEPARATOR?=|

## Introns are to be shortened by this margin.
PARAM_SHORTEN_REGION?=10

################################################
# Section parameters: end
################################################

TYPE_PREDICTION_ID?=TEXT

FILES_REQUISITES=$(PARAM_INPUT_PEPTIDES) $(INPUT_GENOMES) $(PARAM_INPUT_EXONS) $(PARAM_INPUT_PEPTIDES2GENES)

prepare: create-log create-tables

all: exons.regions \
	introns.fasta introns.stats introns_mean.stats introns_sum.stats \
	joined_introns.fasta joined_introns.stats joined_introns.load

## get exonic regions. These will be used to remove introns due to overlap with exons.
exons.regions:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/extract_regions.py \
		--type=exons \
		--ids=all \
		--id-format=schema-id \
		--output-format=region \
		--forward-coordinates \
		--schema=$(PARAM_PSQL_SCHEMA) \
		--genome-file=$(PARAM_INPUT_GENOME) > $@
	$(EPILOG)

introns.fasta: exons.regions
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/extract_regions.py \
		--type=introns \
		--ids=all \
		--id-format=full \
		--shorten-region=$(PARAM_SHORTEN_REGION) \
		--schema=$(PARAM_PSQL_SCHEMA) \
		--taboo-regions=both \
		--filename-taboo-regions=exons.regions \
		--genome-file=$(PARAM_INPUT_GENOME) > $@
	$(EPILOG)

## Introns, only one entry per sequence id.
joined_introns.fasta: exons.regions
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/extract_regions.py \
		--type=introns \
		--join \
		--ids=all \
		--id-format=full \
		--shorten-region=$(PARAM_SHORTEN_REGION) \
		--schema=$(PARAM_PSQL_SCHEMA) \
		--taboo-regions=both \
		--filename-taboo-regions=exons.regions \
		--genome-file=$(PARAM_INPUT_GENOME) > $@
	$(EPILOG)


%.stats: %.fasta
	$(PRELOG)
	@grep -v "#" $^ |\
	$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)analyze_codonbias_shannon.py \
		--sections=length,na \
	> $@
	$(EPILOG)

introns_%.stats: introns.stats
	$(PRELOG)
	@perl -p -e "s/ \S+//" < $^ |\
	grep -v "^total" |\
	python $(DIR_SCRIPTS_TOOLS)table2table.py \
		--group=1 \
		--group-function=$* \
	> $@
	$(EPILOG)

create-tables: \
	$(PARAM_TABLE_NAME_INTRONS).create-table-introns
	$(PRELOG)
	$(EPILOG)

#########################################################################
introns.load: introns_mean.stats introns_sum.stats
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_INTRONS);" >/dev/null
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py id length < introns_sum.stats | awk '!/^#/ {printf("%s\t%i\n", $$1, $$2); }' > $@_tmp1
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py id pGC    < introns_mean.stats > $@_tmp2
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles \
		$@_tmp1 $@_tmp2 |\
	python $(DIR_SCRIPTS_TOOLS)table2table.py --method=remove-header |\
	grep -v "#" |\
	awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\t%s\n", a[2], $$2, $$3); }' |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_INTRONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_INTRONS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_INTRONS);' -t `"  >> $(LOG)
	@rm -f $@_tmp*
	$(EPILOG)

#########################################################################
## load joined introns
joined_introns.load: joined_introns.stats
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_INTRONS);" >/dev/null
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py id length pGC < joined_introns.stats |\
	python $(DIR_SCRIPTS_TOOLS)table2table.py --method=remove-header |\
	grep -v -e "#" -e "total" -e "\bna\b" |\
	awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\t%s\n", a[2], $$3, $$4); }' |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_INTRONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_INTRONS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_INTRONS);' -t `"  >> $(LOG)
	@rm -f $@_tmp*
	$(EPILOG)

#########################################################################
# Guide to fields:
# is_selected:  prediction_id is part of selected set
# is_dominant:  prediction_id is part of dominant set
# ncodons:	number of codons
# n4d:		number of fourfold degenerate sites
# n3d:		number of threefold degenerate sites
# n2d:		number of twofold degenerate sites
# n1d:		number of non-degenerate sites
# is_selected:	True, if prediction is part of the selected set.
# is_biased:	True, if prediction is part of the most biased set.
# cai:		CAI value of prediction based on adaptive CAI method
# cai_ext:	CAI value based on D. melanogaster preferences
# enc:		ENC value of prediction
# gc:		GC content of sequence
# gc3:		GC content in third position
%.create-table-introns:
	$(PRELOG)
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " >/dev/null;
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	prediction_id $(TYPE_PREDICTION_ID), \
	length INTEGER, \
	percent_gc FLOAT )" >/dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction_id ON $* (prediction_id);" >/dev/null
	$(EPILOG)

################################################
## include tools Makefile
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
