################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.gpipe 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction

#########################################################################
## Input data:

## filename of indexed fasta file with genomic information. The index
## has to be created with IndexedFasta.py
PARAM_INPUT_GENOME?=genome

## input filename with peptide data in fasta format.
PARAM_INPUT_PEPTIDES?=peptides.fasta

## input filename with exon data. This is a tab-separated file containing the
## following fields
## transcript name:	name of the transcript consistent with $(PARAM_INPUT_PEPTIDES)
## contig name:		name of the DNA segment the transcript is located on
## strand:		strand
## phase:		phase of that particular exon
## exon-id		numerical number of exon
## peptide_start	start of exon in transcript sequence
## peptide_end		end of exon in transcript sequence
## genome_start		start of exon on contig
## genome_end		end of exon on contig
##
## Coordinates are 0-based, open/closed contigs. The contig coordinates
## refer to the forward strand and are increasing.
PARAM_INPUT_EXONS?=reference.exons

## input filename with cdna data (not used except for optional step12 [ks computation])
## The identifiers should be consistent with $(PARAM_INPUT_PEPTIDES).
PARAM_INPUT_CDNAS?=cdnas.fasta

## input file name with mapping of representative transcripts to their
## members.
## The identifiers should be consistent with $(PARAM_INPUT_PEPTIDES).
PARAM_INPUT_MAP?=map_rep2mem

################################################
## Database connection parameters
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)
## predictions table
PARAM_TABLE_NAME_PREDICTIONS?=$(PARAM_PSQL_SCHEMA).predictions
## summary table
PARAM_TABLE_NAME_QUERIES?=$(PARAM_PSQL_SCHEMA).queries
## exons table
PARAM_TABLE_NAME_EXONS?=$(PARAM_PSQL_SCHEMA).exons
## summary of exon structures
PARAM_TABLE_NAME_EXONS_SUMMARY?=$(PARAM_PSQL_SCHEMA).exons_summary
## predicted genic regions
PARAM_TABLE_NAME_REGIONS?=$(PARAM_PSQL_SCHEMA).regions
## kaks values for predictions
PARAM_TABLE_NAME_KAKS?=$(PARAM_PSQL_SCHEMA).kaks
## quality indices for predictions
PARAM_TABLE_NAME_QUALITY?=$(PARAM_PSQL_SCHEMA).quality
## quality indices for predictions
PARAM_TABLE_NAME_GENES?=$(PARAM_PSQL_SCHEMA).genes
## table with gene information
PARAM_TABLE_NAME_GENEINFO?=$(PARAM_PSQL_SCHEMA).geneinfo
## contig sizes
PARAM_TABLE_NAME_CONTIGS?=$(PARAM_PSQL_SCHEMA).contigs
## view on all results for each prediction
PARAM_TABLE_NAME_OVERVIEW?=$(PARAM_PSQL_SCHEMA).overview
## Materialized overview tables
PARAM_TABLE_NAME_MOVERVIEW?=$(PARAM_PSQL_SCHEMA).moverview
## table with coding sequences (cds)
PARAM_TABLE_NAME_CDS?=$(PARAM_PSQL_SCHEMA).cds
## predictions table
PARAM_TABLE_NAME_TRANSCRIPTS?=$(PARAM_PSQL_SCHEMA).transcripts
## predictions table
PARAM_TABLE_NAME_REDUNDANT?=$(PARAM_PSQL_SCHEMA).redundant
## table with domain information
PARAM_TABLE_NAME_DOMAINS?=$(PARAM_PSQL_SCHEMA).domains
## table with domain summary information
PARAM_TABLE_NAME_DOMAINS_SUMMARY?=$(PARAM_PSQL_SCHEMA).domains_summary
## table with domain summary information
PARAM_TABLE_NAME_PREDICTION2GENOME?=$(PARAM_PSQL_SCHEMA).prediction2genome
## table with disruptions
PARAM_TABLE_NAME_DISRUPTIONS?=$(PARAM_PSQL_SCHEMA).disruptions
## table with intron information
PARAM_TABLE_NAME_INTRONS?=$(PARAM_PSQL_SCHEMA).introns

################################################
## Filtering options

## ignore input sequences above threshold.
## Very long sequences cause problems in exonerate.
## Also, the result sets become so big that
## there are problems in the processing stage.
PARAM_FILTER_MAX_SEQUENCE_LENGTH?=10000

################################################
## parameters for seg (masking of low complexity regions)
PARAM_SEG_OPTIONS?=12 2.2 2.5 -x

################################################
## substitute nN for xX in genome files
## This is usually not necessary
PARAM_CORRECT_GENOME_FILES?=

################################################
## parameters for exonerate
## number of jobs to submit to queue
PARAM_EXONERATE_NUMJOBS?=100
## number of nucleotides per genomic file.
PARAM_EXONERATE_GENOME_CHUNKSIZE?=2000000 
## number of peptides per file.
PARAM_EXONERATE_PEPTIDES_CHUNKSIZE?=4000
## overlapping residues of genomic files
PARAM_EXONERATE_EXTEND?=100000
## maximum overlap for not turning on conflict resolution
PARAM_EXONERATE_MAX_PERCENT_OVERLAP?=20
## minimum score of a successfull match in exonerate step
PARAM_EXONERATE_MIN_SCORE?=50
## minimum coverage of query of a successfull match
PARAM_EXONERATE_MIN_COVERAGE_QUERY?=10
## number of matches per query to consider (0 = all)
PARAM_EXONERATE_MAX_MATCHES?=0
## intron size for concatenating fragments.
PARAM_EXONERATE_MAX_INTRON?=50000
## exonerate options
PARAM_EXONERATE_OPTIONS?=-m p2g --forcegtag TRUE  --bestn 200 --maxintron $(PARAM_EXONERATE_MAX_INTRON) \
	--proteinwordlimit 3 --proteinhspdropoff 5 --proteinwordlen 5 \
	--forwardcoordinates FALSE --score $(PARAM_EXONERATE_MIN_SCORE)

## minimum score of a match for filtering in region creation.
PARAM_EXONERATE_GRAPH_MIN_SCORE?=80
## minimum score for overlapping homologous queries
PARAM_EXONERATE_GRAPH_OVERLAP_MIN_SCORE?=80
## minimum minimum coverage for overlapping homologous queries
PARAM_EXONERATE_GRAPH_OVERLAP_MIN_COVERAGE?=50
## minimum maximum coverage for overlapping homologous queries
PARAM_EXONERATE_GRAPH_OVERLAP_MAX_COVERAGE?=50
## minimum percent identity for overlapping homologous queries
PARAM_EXONERATE_GRAPH_OVERLAP_MIN_IDENTITY?=60

## Dangerous: because if too large, spurious proteins
## will be joined.
## exonerate matches are joined if they have the same query
## token and are within this distance (in nucleotides)
PARAM_EXONERATE_JOIN_REGIONS?=0

## maximum coverage for regions not be joined
PARAM_EXONERATE_JOIN_REGIONS_MAX_COVERAGE?=0

################################################
## parameters for tblastn
## number of peptides per file.
PARAM_STEP4_PEPTIDES_CHUNKSIZE?=1000
## jobs to submit to queue at the same time
PARAM_STEP4_NUMJOBS?=100
## minimum score for TBLASTN matches
PARAM_STEP4_MIN_SCORE?=80
## maximum overlap for not turning on conflict resolution
PARAM_STEP4_MAX_PERCENT_OVERLAP?=0.2
## minimum coverage of query of a successfull match
PARAM_STEP4_MIN_COVERAGE_QUERY?=10
## number of matches per query to consider (0 = all)
PARAM_STEP4_MAX_MATCHES?=0
## TBLASTN options
PARAM_STEP4_OPTIONS?=-F F -P 1 -W 3 -f 1000 -v 1 -b 1 -e 1e-20
## do tblastn step
PARAM_DO_TBLASTN?=

################################################
## parameters for prediction

## jobs to submit to queue at the same time
PARAM_PREDICTION_NUMJOBS?=100

## residues allowed to be missing from a complete prediction
PARAM_PREDICTION_QUERY_BORDER?=5

## maximum number of residues added to the neighbourhood of a putative genic region
PARAM_PREDICTION_MARGIN?=151000

## minimum number of residues added to the neighbourhood of a putative genic region
PARAM_PREDICTION_MIN_MARGIN?=1000

## minimum score for a prediction to be considered.
PARAM_PREDICTION_MIN_SCORE?=50

## prediction method to use.
PARAM_PREDICTION_METHOD?=twostep_ee

## process in predictions in chunks of chunksize.
PARAM_PREDICTION_CHUNKSIZE?=20

## maximum number of residues added to genic region in refinement step
PARAM_PREDICTION_REFINEMENT_BORDER?=50000

## options used for predictions
PARAM_PREDICTION_OPTIONS?= --method=$(PARAM_PREDICTION_METHOD) \
	--query-border=$(PARAM_PREDICTION_QUERY_BORDER) \
	--min-score=$(PARAM_PREDICTION_MIN_SCORE) \
	--border-refinement=$(PARAM_PREDICTION_REFINEMENT_BORDER) \
	--recursive --refinement --probe --mask-probe=seg,bias 

## maximum number of putative matches per region to be considered
PARAM_PREDICTION_MAX_REGION?=20

################################################
################################################
## parameters for prediction

## jobs to submit to queue at the same time
PARAM_STEP6_NUMJOBS?=100

## minimum score of a match for filtering in region creation.
PARAM_STEP6_GRAPH_MIN_SCORE?=80

## minimum score for overlapping homologous queries
PARAM_STEP6_GRAPH_OVERLAP_MIN_SCORE?=80

## minimum minimum coverage for overlapping homologous queries
PARAM_STEP6_GRAPH_OVERLAP_MIN_COVERAGE?=50

## minimum maximum coverage for overlapping homologous queries
PARAM_STEP6_GRAPH_OVERLAP_MAX_COVERAGE?=50

## minimum percent identity for overlapping homologous queries
PARAM_STEP6_GRAPH_OVERLAP_MIN_IDENTITY?=60

## regions adjacent to each other by at most # residues are joined
PARAM_STEP6_GRAPH_JOIN_REGIONS?=0

## maximum coverage to allow for joining of adjacent regions
PARAM_STEP6_GRAPH_JOIN_REGIONS_MAX_COVERAGE?=90

## residues allowed to be missing from a complete prediction
PARAM_STEP6_QUERY_BORDER?=5

## maximum number of residues added to the neighbourhood of a putative genic region
PARAM_STEP6_MARGIN?=151000

## minimum number of residues added to the neighbourhood of a putative genic region
PARAM_STEP6_MIN_MARGIN?=1000

## minimum score for a prediction to be considered
PARAM_STEP6_MIN_SCORE?=50

## prediction method to use
PARAM_STEP6_METHOD?=twostep_ee

## chunk size of a prediction file
PARAM_STEP6_CHUNKSIZE?=20

## residues added to genic region in refinement step
PARAM_STEP6_REFINEMENT_BORDER?=50000

## options used for predictions
PARAM_STEP6_OPTIONS?= --method=$(PARAM_STEP6_METHOD) --query-border=$(PARAM_STEP6_QUERY_BORDER) \
	--min-score=$(PARAM_STEP6_MIN_SCORE) --border-refinement=$(PARAM_STEP6_REFINEMENT_BORDER) \
	--recursive --refinement --probe --mask-probe=seg,bias \
	--format=graph 

## maximum number of matches per region
PARAM_STEP6_MAX_REGION?=5

## Additional filter with taboo regions for step6
## Start this option with a comma.
PARAM_STEP6_FILTER_REGIONS?=

################################################
## representative has to have at least this coverage for
## members to be tested.
PARAM_MEMBERS_MIN_COVERAGE?=50

## chunk size of a prediction file
PARAM_MEMBERS_CHUNKSIZE?=20

## margin to add to predictions with member sequences
PARAM_MEMBERS_MARGIN?=300

## options used to predict members
PARAM_MEMBERS_OPTIONS?= --method=$(PARAM_PREDICTION_METHOD) --query-border=$(PARAM_PREDICTION_QUERY_BORDER) \
	--min-score=$(PARAM_PREDICTION_MIN_SCORE) --border-refinement=$(PARAM_PREDICTION_REFINEMENT_BORDER) \
	--refinement

PARAM_DO_MEMBERS?=1

################################################
PARAM_PATCH_OPTIONS?= --method=$(PARAM_PREDICTION_METHOD) \
			--query-border=$(PARAM_PREDICTION_QUERY_BORDER) \
			--min-score=$(PARAM_PREDICTION_MIN_SCORE) \
			--border-refinement=$(PARAM_PREDICTION_REFINEMENT_BORDER) \
			--refinement \
			--exons=$(PARAM_INPUT_EXONS) \
			--genome-file=$(PARAM_ASSEMBLY_PATTERN) 

################################################
## Filtering options for removing bad predictions:
## minimum score
PARAM_FILTER_MIN_SCORE?=80
## minimum coverage of query
PARAM_FILTER_MIN_COVERAGE_QUERY?=10
## minimum coverage of query
PARAM_FILTER_MIN_PERCENT_IDENTITY?=0
## minimum coverage of query
PARAM_FILTER_MIN_LENGTH?=0

################################################
## Options for step8

## number of jobs to run in step8
PARAM_STEP8_NUMJOBS?=5

################################################

## Options for compiling pseudogenes from fragments:
PARAM_PSEUDOGENES_OPTIONS?=

## skip pseudogene calculation. Set, if you want it
PARAM_DO_PSEUDOGENES?=

################################################
## Options for assembling contigs by predictinos
PARAM_ASSEMBLY_OPTIONS?=--max-overlap=20 --verbose=2
PARAM_ASSEMBLY_PATTERN?=$(PARAM_INPUT_GENOME)
PARAM_ASSEMBLY_FILES?=

PARAM_DO_ASSEMBLY?=

################################################
## number of jobs to run in parallel for step12
PARAM_STEP12_NUMJOBS?=100

## number of kaks calculations per chunk (has to be an
## even number)
PARAM_STEP12_CHUNKSIZE?=1000

## for ds filter, the number of n best transcripts to keep.
PARAM_STEP12_NBEST?=10

## for ds filter, the maxmimal ds of transcripts to keep
PARAM_STEP12_FILTER_DS?=5

################################################
## KAKS
## number of jobs to submit to the queue in parallel
PARAM_KAKS_NUMJOBS=100
## chunk size of kaks calculation (note: multiple of two!!!)
PARAM_KAKS_CHUNKSIZE?=1000

PARAM_DO_KAKS?=

################################################
## Thresholds for quality control
## "good" exons have a percent identity of at least
## this percentage of the average percent identity over
## the complete sequence.
PARAM_QUALITY_GOOD_EXON_THRESHOLD?=75
## minimum coverage of fully predicted genes
PARAM_QUALITY_MIN_COVERAGE?=80
## classes to assume that are "good" genes
PARAM_QUALITY_SELECTED_CLASSES?='CG','PG','SG'

################################################
## Export parameters
PARAM_EXPORT_SEPARATOR?=|
PARAM_EXPORT_PREFIX_PREDICTION?=$(PARAM_PROJECT_NAME)$(PARAM_EXPORT_SEPARATOR)
PARAM_EXPORT_PREFIX_GENE?=$(PARAM_PROJECT_NAME)$(PARAM_EXPORT_SEPARATOR)
PARAM_EXPORT_FILTER?=, $(PARAM_TABLE_NAME_REDUNDANT) AS r WHERE o.class IN ($(PARAM_QUALITY_SELECTED_CLASSES)) AND r.rep_prediction_id = prediction_id and r.rep_prediction_id =r.mem_prediction_id

################################################
## Export parameters for the genome browser gbrowse
PARAM_EXPORT_GBROWSER_USERNAME?=andreas
PARAM_EXPORT_GBROWSER_PASSWORD?=HeinBloed
PARAM_EXPORT_GBROWSER_DATABASE?=gbrowser_devel_$(PARAM_PROJECT_NAME)

################################################
# Section parameters: end
################################################

## include submakefiles
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.prepare
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step1
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step2
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step3
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step4
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step5
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step6
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step7
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step8
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step9
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step10
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step11
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.step12
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.summary
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.tables
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.plot
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.export
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.gbrowser
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.domains

################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
## Requisites
INPUT_GENOMES=$(PARAM_INPUT_GENOME).fasta $(PARAM_INPUT_GENOME).idx

FILES_REQUISITES=$(PARAM_INPUT_PEPTIDES) $(INPUT_GENOMES) $(PARAM_INPUT_EXONS) $(PARAM_INPUT_MAP)

################################################
## Database connectivity

## Postgres
CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c
CONNECTION_BATCH=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -f
CONNECTION_OPTIONS=-t -A -F"	" 
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

## Mysql to Gbrowser
GBROWSER_CMD_MYSQL=mysql -u$(PARAM_EXPORT_GBROWSER_USERNAME) -p$(PARAM_EXPORT_GBROWSER_PASSWORD)

#########################################################################
## description of the classification system
QUALITY_NUM_CLASSES=15
QUALITY_CLASSES=CG SG PG RG UG CP SP PP RP UP SF CF PF UF BF
QUALITY_CLASSES_COMMA=CG,SG,PG,RG,UG,CP,SP,PP,RP,UP,SF,CF,PF,UF,BF
QUALITY_CLASSES_QUOTED='CG','SG','PG','RG','UG','CP','SP','PP','RP','UP','SF','CF','PF','UF','BF'

#########################################################################
## some helper commands
CMD_PREFIX_PEPTIDES=`echo $* | perl -pe "s/_vs_.*//;"`
CMD_PREFIX_PEPTIDES_STEM=`echo $* | perl -pe "s/_vs_.*//; s/.fasta//g;"`
CMD_PREFIX_GENOME=`echo $* | perl -pe "s/^.*_vs_//;"`
CMD_PREFIX_GENOME_STEM=`echo $* | perl -pe "s/^.*_vs_//; s/.fasta//g;"`
# get genomic offset from filename
CMD_OFFSET=`echo $* | perl -pe "s/^.*_vs_.*.fasta_//; s/_.*//`

##############################################################################
## Primary targets
##############################################################################

## prepare the prediction pipeline for a run. WARNING: this command
## will delete all existing data in the tables.
prepare: 
	@$(MAKE) create-log create-schema create-tables check-setup
	@touch $@
	$(CMD_LOG) "$@ completed."

ifdef PARAM_DO_KAKS
EXTRA_PRIMARY_TARGETS=step12
endif

## run the prediction pipeline
all: step1 step2 step3 step4 step5 step6 step7 step8 step9 step10 step11 $(EXTRA_PRIMARY_TARGETS)

##############################################################################
## check input
check-setup-hook: check-setup-pre-hook
	@grep ">" $(PARAM_INPUT_PEPTIDES) | perl -p -e "s/>//; s/ .+//" > $@.tmp1
	@grep -v "#" $(PARAM_INPUT_EXONS) | cut -f 1 | sort | uniq > $@.tmp2
	@perl $(DIR_SCRIPTS_TOOLS)set_rest.pl $@.tmp2 $@.tmp1 > $@.tmpp	
	@perl $(DIR_SCRIPTS_TOOLS)set_rest.pl $@.tmp1 $@.tmp2 > $@.tmpe
	@missed_peptides=`wc -l < $@.tmpp`; missed_exons=`wc -l < $@.tmpe`; \
	$(CMD_LOG2) "missed entries in $(PARAM_INPUT_PEPTIDES): $${missed_peptides}"; \
	if [[ missed_peptides > 0 ]]; then \
		cat $@.tmpp $(TOLOG); \
	fi; \
	$(CMD_LOG2) "missed entries in $(PARAM_INPUT_EXONS): $${missed_exons}"; \
	if [[ missed_exons > 0 ]]; then \
		cat $@.tmpe $(TOLOG); \
	fi
	@rm -f $@.tmp*
	$(CMD_MSG) "Share and enjoy!"

##############################################################################
## reload data
## load targets are deleted in order and intermediate files touched.
## Step10 and Step11 have to completely remade
RELOAD_TARGETS1=contig_sizes.load peptides.load \
	step8.load cds.load transcripts.load map_prediction2genome.load \
	exons.load overlaps.load step10.queries.load

RELOAD_TARGETS2=redundant.load step11.queries.load \
		genes.load step11.geneinfo.load

ifdef PARAM_DO_ASSEMBLY
RELOAD_TARGETS1+=assembly_sizes.load
endif

reload-hook1:
	@for target in $(RELOAD_TARGETS1); do \
		$(CMD_MSG2) "remaking $${target}"; \
		$(CMD_LOG2) "remaking $${target}"; \
		$(MAKE) -t $${target}; \
		rm -f $${target}; \
		$(MAKE) $${target}; \
	done
	$(MAKE) -t all

reload-hook2:
	@for target in $(RELOAD_TARGETS2); do \
		$(CMD_MSG2) "remaking $${target}"; \
		$(CMD_LOG2) "remaking $${target}"; \
		$(MAKE) -t $${target}; \
		rm -f $${target}; \
		$(MAKE) $${target}; \
	done
	$(MAKE) -t all

## reload data into tables from file data.
reload:
	$(PRELOG)
	$(MAKE) reload-hook1
	$(CMD_MSG2) "recomputing step10"
	@rm -f quality_init
	$(MAKE) step10
	$(MAKE) reload-hook2
	$(EPILOG)

##############################################################################
## follow a query through the prediction process
%.follow_query:
	echo "# checking target $*"
	for file in $(PARAM_INPUT_PEPTIDES) representatives.fasta $(PARAM_INPUT_MAP) \
		step3.predictions \
		step5.graph step5.predictions step5.matches \
		step6.graph step6.predictions step6.matches \
		step7.predictions step8.predictions; do \
	    result=`grep '$*' $${file}`; \
	    echo "---------------------------------- $${file} ----------------------------------------------------"; \
	    if [[ ! -z "$${result}" ]]; then \
		    echo "---> $* is in $${file}"; \
		    grep '$*' $${file}; \
	    else \
		    echo "---> $* is not in $${file}"; \
	    fi \
	done


##############################################################################
## compute number of gaps in the genome.
## The result will be in gaps.dir.
gaps:
	$(PRELOG)
	@rm -rf $@.dir
	@mkdir $@.dir
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		-m gaps \
		-d $@.dir \
		-p $(PARAM_PROJECT_NAME) \
		PARAM_INPUT_GENOME=$(PARAM_INPUT_GENOME) > $@.dir/setup.log
	@cd $@.dir; ln -s ../$(PARAM_INPUT_GENOME)*  .; 
	@make -C $@.dir gaps
	@touch $@
	$(EPILOG)


##############################################################################
## remove everything.
distclean: clean
	$(CMD_LOG) "$@ started."
	@rm -f peptides.{substitutions,masked,predictions,clustered}*
	@find . -name "peptide_*" -exec rm {} \;
	@rm -f exonerate_*
	@rm -f representatives_*
	@rm -f members_*
	@rm -f tblastn_*
	@rm -f contig_sizes*
	@rm -f exonerate.{matches,predictions,peptides_split,error,genomes_split,prepare}
	@rm -f representatives.{matches,predictions,peptides_split,error,genomes_split,prepare,exons,load,progress}
	@rm -f members.{matches,predictions,peptides_split,error,genomes_split,prepare,exons,load,progress}
	@rm -f tblastn.{matches,predictions,peptides_split,error,genomes_split,prepare,exons}
	@rm -f all.{predictions,load}
	@rm -f kaks.{matches,load}
	@rm -f exons exons_summary
	@rm -f {regions,collected}.predictions
	@rm -f step*
	@rm -f formatdb.log
	@rm -f genome_*.{nhr,nin,nsq}
	@rm -f regions.*
	@rm -f {exonerate,prediction,members}.bash
	@rm -f kaks.*
	@rm -f *.summary
	@rm -f quality*
	@rm -f *.load
	@rm -f cds.fasta 
	@rm -f redundant*
	@rm -f genes*
	@rm -f map_prediction2genome
	@rm -f members*
	@rm -f representatives*
	@rm -f transcripts*
	@rm -f cds*
	@rm -f map_rep2mem.list
	@rm -f peptides_masked.fasta
	@rm -f representatives.fasta
	$(CMD_LOG) "$@ completed."

##############################################################################
## remove intermediate data
clean: step3.clean step4.clean step5.clean step6.clean step7.clean step12.clean

##############################################################################
##############################################################################
##############################################################################
## get CPU usage information
## run this target once the entire pipeline has finished
##############################################################################
CPU_INFO=step3.predictions.gz step5.matches.gz step6.matches.gz step7.matches.gz
cpu_info:
	$(PRELOG)
	@$(MAKE) $@.dir
	@for file in $(CPU_INFO); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)cgat_logfiles2tsv.py \
			--mode=node \
			--glob=$${file} \
		> $@.dir/$${file} ; \
	done
	@touch $@ 
	$(EPILOG)	

.PRECIOUS: %.matches %.predictions

## delete files on error. Uncomment this option, if you want to keep
## files that have failed, for example, for debugging purposes.
# .DELETE_ON_ERROR:
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
