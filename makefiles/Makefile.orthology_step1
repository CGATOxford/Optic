################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_step1 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

################################################
## step0: run blast all vs all
STEP1_TARGETS=blast

stepx1: stepx1.prepare stepx1.run stepx1.finish 
	touch $@

stepx1.run: stepx1.prepare
	$(PRELOG)
	$(MAKE) -C stepx1.dir -k blast
	@touch $@
	$(EPILOG

.PHONY: stepx1-hook $(STEPX1_TARGETS)

step1.prepare: step1.queries.fasta step1.representatives.fasta
	$(PRELOG)
	@rm -rf stepx1.dir
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		-m blast \
		-d stepx1.dir \
		-p $(PARAM_PROJECT_NAME)_blast \
		PARAM_BLASTP_NUMJOBS=$(PARAM_STEPX1_NUMJOBS) \
		PARAM_BLASTP_CHUNKSIZE=$(PARAM_STEPX1_CHUNKSIZE) \
		PARAM_BLASTP_OPTIONS="$(PARAM_STEPX1_BLASTP_OPTIONS)" \
		PARAM_BLASTP_PARSING="$(PARAM_STEPX1_BLASTP_PARSING)" \
		PARAM_BLASTP_NUMFIELDS=$(PARAM_STEPX1_BLASTP_NUMFIELDS) \
	> $@
	@ln -s ../step1.representatives.fasta stepx1.dir/queries.fasta
	@ln -s ../step1.representatives.fasta stepx1.dir/sbjcts.fasta
	$(EPILOG)


stepx1.prepare: step1.queries.fasta 
	$(PRELOG)
	@rm -rf stepx1.dir
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		-m blast \
		-d stepx1.dir \
		-p $(PARAM_PROJECT_NAME)_blast \
		PARAM_BLASTP_NUMJOBS=$(PARAM_STEP1_NUMJOBS) \
		PARAM_BLASTP_CHUNKSIZE=$(PARAM_STEP1_CHUNKSIZE) \
		PARAM_BLASTP_OPTIONS="$(PARAM_STEP1_BLASTP_OPTIONS)" \
		PARAM_BLASTP_PARSING="$(PARAM_STEP1_BLASTP_PARSING)" \
		PARAM_BLASTP_NUMFIELDS=$(PARAM_STEP1_BLASTP_NUMFIELDS) \
	> $@
	@ln -s ../queries.fasta stepx1.dir/queries.fasta
	@ln -s ../queries.fasta stepx1.dir/sbjcts.fasta
	$(EPILOG)

step1.queries.fasta: data/transcripts.list data/peptides.fasta
	$(PRELOG)
	@perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl data/transcripts.list < data/peptides.fasta > $@
	$(PROLOG)

step1.map_token2id: step1.queries.fasta
	$(PRELOG)
	@rm -f $@.fasta
	@awk '/>/ { split(substr($$0,2), a, " "); printf( "%i\t%s\n", ++i, a[1]); printf(">%i\n", i) >> "$@.fasta"; next} \
	      {print >> "$@.fasta";} ' \
	< step1.queries.fasta > $@
	$(PROLOG)

## calculate representatives. At the same time retranslated ids to tokens and 
## build the mapping between old and new tokens into tabular format. 
step1.representatives.fasta: step1.map_token2id
	$(PRELOG)
	cd-hit -c $(PARAM_STEPX1_REDUNDANCY_LEVEL) -M 1000 -i step1.map_token2id.fasta -o $@ > $@.log 
	perl -p -e "s/at .*%//; s/ >//; s/ +/\t/; s/\.+//; s/\d+aa,//;" < step1.representatives.fasta.clstr |\
	awk '/^>/ { if (rep) { \
			for (m in members) { printf("%s\t%s\n", rep, m); delete members[m];} \
			printf("%s\t%s\n", rep, rep); } \
		    next; }\
             { \
		split($$0, a, "\t"); \
		if (a[3] == "*") { rep = a[2]; } else { members[a[2]] = 1; } \
	     } \
	    END { \
		for (m in members) { printf("%s\t%s\n", rep, m) }; \
		} \
	    ' > step1.map_rep2mem
	$(EPILOG)

stepx1.finish: 
	$(PRELOG)
	@echo "Contents of blast.links $(TOLOG)" 
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < stepx1.dir/blast.links $(TOLOG)
	@touch $@
	$(EPILOG)

stepx1.clean:
	rm -rf stepx1*

################################################
blast_asymmetric.links: blast.links
	grep -v "#" blast.links |\
	awk '{ if ($$1 < $$2) { \
			printf("%s\t%s\t%5.2f\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%6.2f\n",\
			$$1,$$2,$$3,$$4,$$5,"",$$7,$$8,"",$$10,$$11,$$13,$$12,$$14); \
		} else {\
			printf("%s\t%s\t%5.2f\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%6.2f\n",\
			$$2,$$1,$$3,$$7,$$8,"",$$4,$$5,"",$$10,$$11,$$13,$$12,$$14);} }' |\
	sort -T $(DIR_TMP) -k1,1 -k2,2 -k3,3n |\
	awk 'BEGIN {l1=0;l2=0;} {if ($$1 !=l1 || $$2 != l2) {print; l1=$$1;l2=$$2;}}' > $@

## all links between same organism
blast_sameorg.links: blast.links
	grep -v "#" blast_asymmetric.links |\
	awk '{ if ( substr($$1, 1, index( $$1, "_")) == substr( $$2, 1, index($$2, "_")) ) \
	{ print;} }' > $@

## remove links between same organism
blast_nonredundant.links: blast_asymmetric.links
	grep -v "#" blast_asymmetric.links |\
	awk '$$1 != $$2 { \
		if ( substr($$1, 1, index( $$1, "_")) != substr( $$2, 1, index($$2, "_")) ) \
		{ print;} }' > $@

blast_asymmetric_exons.links: blast_asymmetric.links
	python $(DIR_SCRIPTS_PREDICTIONS)optic/links2exons.py exon_boundaries < blast_asymmetric.links > $@

blast_%.pairs: blast_%.links
	awk '{p = (100.0 - $$11) / 100.0; \
		if (p > 0.85) { d = 5.2030; } \
		else { d = -log( 1.0 - p - 0.2 * p * p); } \
		cova = ($$5-$$4+1)/$$12; \
		covb = ($$8-$$7+1)/$$13; \
		if (cova > covb) { maxcov = cova; mincov = covb; } else \
		{ maxcov = covb; mincov = cova; } \
		printf( "%s\t%s\t%5.2f\t%5.2f\t%5.2f\n", $$1, $$2, d, mincov, maxcov);}' \
	< blast_$*.links > $@

%_filtered.links: %.links
	awk '{	cova = ($$5-$$4+1)/$$12; covb = ($$8-$$7+1)/$$13; \
		if (cova > covb) { maxcov = cova; mincov = covb; } \
		else { maxcov = covb; mincov = cova; } \
		if ( (maxcov >= $(PARAM_BLASTP_MIN_MAX_COVERAGE)) && \
		     (mincov >= $(PARAM_BLASTP_MIN_MIN_COVERAGE)) ) \
			{ print; } \
		}' \
	< $*.links > $@


sub_blast_asymmetric.pairs:
	perl -p -e "s/^dmel/pdmel_vs_dmel/; s/\tdmel/\tpdmel_vs_dmel/" < blast_asymmetric.pairs > $@


blast_besthits.links: blast.links
	python $(DIR_SCRIPTS_TOOLS)graph_blast2besthits.py \
	--genome-file="$(PARAM_INPUT_GENOME)" \
	--threshold-factor=0.9 < blast.links > $@

blast_pid_besthits.links: blast.links
	python $(DIR_SCRIPTS_TOOLS)graph_blast2besthits.py \
	--method=pid \
	--genome-file="$(PARAM_INPUT_GENOME)" \
	--threshold-factor=0.9 < blast.links > $@

blast_evalue_pid_besthits.links: blast.links
	python $(DIR_SCRIPTS_TOOLS)graph_blast2besthits.py \
	--method=evalue \
	--pide-factor=10 \
	--genome-file="$(PARAM_INPUT_GENOME)" \
	--score-factor=0.9 < blast.links > $@

blast_bitscores.links: blast_asymmetric.links
	$(CMD_LOG) "started $@"
	python $(DIR_SCRIPTS_TOOLS)graph_blast2pairs.py --method=bitscore --lambda=0.267 --k=0.0410 \
	< blast_asymmetric.links > $@
	$(CMD_LOG) "finished $@"

blast_selfscores: blast_asymmetric.links
	$(CMD_LOG) "started $@"
	awk '!/^#/ && $$1 == $$2 { print; }' < blast_asymmetric.links | cut -f 1,14 > $@
	$(CMD_LOG) "finished $@"

blast_normalized.links: blast_asymmetric.links
	$(CMD_LOG) "started $@"
	python $(DIR_SCRIPTS_TOOLS)graph_blast2pairs.py --method=normalize-max-distance --self-scores=blast_selfscores \
	< blast_asymmetric.links > $@
	$(CMD_LOG) "finished $@"

## end of stepx1
################################################

# ################################################
# ## start of step 2
# ## remove paralogous links
# step2: stepx1 step2.prepare step2.run step2.finish
# 	touch $@

# step2.prepare: blast_nonredundant.links
# 	$(MAKE) step2.dir
# 	grep -v "#" blast_nonredundant.links | split -l $(PARAM_STEP2_CHUNKSIZE) - step2.dir/chunk_
# 	for file in step2.dir/chunk*; do \
# 		mv $$file $$file.links; \
# 	done
# 	touch $@

# step2.run: step2.prepare
# 	$(PARAM_CMD_COPY)exon_boundaries $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step2.dir -k -j $(PARAM_STEP2_NUMJOBS) step2-hook
# 	rm -f $(DIR_TMP_SHARED_LOCAL)exon_boundaries
# 	touch $@

# step2-hook: $(STEP2_TARGETS)

# step2.finish: step2.run blast_nonparalogs.links
# 	touch $@

# step2.clean: 
# 	rm -rf step2.dir

# ################################################
# ## rules for step2
# blast_nonparalogs.links: step2.run
# 	find ./step2.dir -name "*.filtered_links" -exec grep -v "#" {} \; > $@

# %.filtered_links: %.links
# 	$(CMD_REMOTE_SUBMIT) \
# 	python $(DIR_SCRIPTS_GENEPREDICTION)optic/filter_paralogous_links.py \
# 	--cds=$(DIR_TMP_SHARED_REMOTE)exon_boundaries \
# 	--verbose=3 \
# 	< $*.links > $@

# ## end of step 2
# ################################################

# ################################################
# ## start of step 3
# ## build multiple alignments
# step3: step3.prepare
# 	touch $@

# ## split filtered links into components
# step3.prepare: blast_nonparalogs.components
# 	$(MAKE) step3.dir
# 	perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl \
# 	-pstep3.dir/cluster_ -s.links blast_nonparalogs.components.map \
# 	< blast_nonparalogs.links > $@
# 	perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -pstep3.dir/cluster_ -s.fasta -m blast_nonparalogs.components.map \
# 	< peptides.fasta >> $@

# step3.run: step3.prepare
# 	touch $@

# step3-hook: $(STEP3_TARGETS)

# step3.finish: step3.run
# 	touch $@

# step3.clean:
# 	rm -rf step3.dir

# ################################################
# ## rules for step3

# %.components: %.links
# 	ga_components -m $@.map -s $@.sizes $*.links > $@

# %.tokens: %.links
# 	perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < $*.links > $@

# %.colours: %.tokens
# 	awk '{ split( $$1, a, "_"); printf("%s\t%s\n", $$1, a[1]); }' < $*.tokens |\
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=../colours --columns-token=2 > $@

# %.gdl: %.links %.colours
# 	awk '{printf("%s\t%s\t%i\n", $$1, $$2, $$11); }' < $*.links |\
# 	python $(DIR_SCRIPTS_TOOLS)graph_links2gdl.py --colours=$*.colours --weights  > $@

# ## end of step 3
# ################################################

# orgs_per_cluster: blast_nonparalogs.components
# 	python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --filename-tokens=transcripts.list --regex-token="^(\S+)" \
# 	< blast_nonparalogs.components.map |\
# 	grep -v "#" |\
# 	sort -k 2,2n |\
# 	python $(DIR_SCRIPTS_GENEPREDICTION)optic/count_orgs.py \
# 	--patterns=patterns --format=map > $@

# ################################################
# ## start of step4: calculating kaks
# step4: step4.prepare step4.run step4.finish
# 	touch $@

# step4.prepare: peptides.fasta
# 	$(MAKE) step4.dir
# 	perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
# 	-p step4.dir/peptides_ \
# 	-s .fasta \
# 	$(PARAM_STEP4_CHUNKSIZE) \
# 	< peptides.fasta > $@

# step4.run: step4.prepare
# 	$(PARAM_CMD_COPY)cds.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step4.dir -k -j $(PARAM_STEP4_NUMJOBS) step4-hook
# 	rm -f $(DIR_TMP_SHARED_LOCAL)cds.fasta
# 	touch $@

# step4-hook: $(STEP4_TARGETS)

# step4.finish: step4.run peptides2cds
# 	touch $@

# step4.clean:
# 	rm -rf step4.dir

# ################################################
# ## rules for step4
# %.map: %.fasta
# 	$(CMD_REMOTE_SUBMIT) python $(DIR_SCRIPTS_GENEPREDICTION)peptides2cds.py \
# 	--cds=$(DIR_TMP_SHARED_REMOTE)cds.fasta < $*.fasta > $@


# peptides2cds: step4.run
# 	find step4.dir/ -name "*.map" -exec cat {} \; > $@

# ## start of step4: mapping cds to peptides

# ################################################
# ## start of step5: calculating kaks
# step5: step4 step5.prepare step5.run step5.finish
# 	touch $@

# ## calculate kaks between pairs
# ## remove links between same organism? No?
# ## 
# step5.prepare: blast_nonparalogs.links
# 	$(MAKE) step5.dir
# 	split -a 4 -l $(PARAM_STEP5_CHUNKSIZE) blast_nonparalogs.links step5.dir/chunk_ 
# 	for file in step5.dir/chunk*; do \
# 		mv $$file $$file.links; \
# 	done
# 	touch $@

# step5.run: step5.prepare peptides2cds cds.fasta
# 	$(PARAM_CMD_COPY)cds.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(PARAM_CMD_COPY)peptides2cds $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step5.dir -k -j $(PARAM_STEP5_NUMJOBS) step5-hook
# 	touch $@
# 	rm -f $(DIR_TMP_SHARED_LOCAL)cds.fasta
# 	rm -f $(DIR_TMP_SHARED_LOCAL)peptides2cds

# step5-hook: $(STEP5_TARGETS)

# step5.finish: step5.run blast_nonparalogs.kaks
# 	touch $@

# step5.clean:
# 	rm -rf step5.dir

# %.fasta: %.links
# 	$(CMD_REMOTE_SUBMIT) \
# 	python $(DIR_SCRIPTS_GENEPREDICTION)links2fasta.py \
# 	--sequences=$(DIR_TMP_SHARED_REMOTE)cds.fasta \
# 	--format=fasta \
# 	--map=$(DIR_TMP_SHARED_REMOTE)peptides2cds \
# 	--expand \
# 	--codons \
# 	--nogaps \
# 	< $*.links |\
# 	grep -v "#" > $@

# %.kaks: %.fasta
# 	$(PARAM_CMD_COPY)$*.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(CMD_REMOTE_SUBMIT) \
# 	seq_pairs_kaks \
# 	--cdna_sequences $(DIR_TMP_SHARED_REMOTE)$*.fasta \
# 	--aligned \
# 	--temp_directory $(DIR_TMP_SHARED_REMOTE)$*_tmp \
# 	< /dev/null > $@
# 	rm -f $(DIR_TMP_SHARED_LOCAL)$*.fasta

# blast_nonparalogs.kaks:
# 	find step5.dir/ -name "*.kaks" -exec cat {} \; > $@

# %_filtered.kaks: %_filtered.links %.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl $*_filtered.links < $*.kaks |\
# 	cut -f 1-25 > $@

# ################################################
# ## start of step5: calculating kaks
# step5b: step4 step5b.prepare step5b.run step5b.finish
# 	touch $@

# ## calculate kaks between pairs
# ## remove links between same organism? No?
# ## 
# step5b.prepare: blast_nonparalogs.links
# 	$(MAKE) step5b.dir
# 	head -n 1000000 paralogs_random.links |\
# 	split -a 4 -l $(PARAM_STEP5_CHUNKSIZE) - step5b.dir/chunk_ 
# 	for file in step5b.dir/chunk*; do \
# 		mv $$file $$file.links; \
# 	done
# 	touch $@

# step5b.run: step5b.prepare peptides2cds cds.fasta
# 	$(PARAM_CMD_COPY)cds.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(PARAM_CMD_COPY)peptides2cds $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step5b.dir -k -j $(PARAM_STEP5_NUMJOBS) step5b-hook
# 	touch $@
# 	rm -f $(DIR_TMP_SHARED_LOCAL)cds.fasta
# 	rm -f $(DIR_TMP_SHARED_LOCAL)peptides2cds

# step5b-hook: $(STEP5_TARGETS)

# step5b.finish: step5b.run paralogs.kaks
# 	touch $@

# step5b.clean:
# 	rm -rf step5b.dir

# paralogs.kaks:
# 	find step5b.dir/ -name "*.kaks" -exec cat {} \; > $@

# ################################################
# ## start of step5: calculating kaks
# step5d: step4 step5d.prepare step5d.run step5d.finish
# 	touch $@

# ## calculate kaks between pairs
# ## remove links between same organism? No?
# ## 
# step5d.prepare: blast_nonparalogs.links
# 	$(MAKE) step5d.dir
# 	cat paralogs_random_rest.links |\
# 	split -a 4 -l $(PARAM_STEP5_CHUNKSIZE) - step5d.dir/chunk_ 
# 	for file in step5d.dir/chunk*; do \
# 		mv $$file $$file.links; \
# 	done
# 	touch $@

# step5d.run: step5d.prepare peptides2cds cds.fasta
# 	$(PARAM_CMD_COPY)cds.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(PARAM_CMD_COPY)peptides2cds $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step5d.dir -k -j $(PARAM_STEP5_NUMJOBS) step5d-hook
# 	touch $@
# 	rm -f $(DIR_TMP_SHARED_LOCAL)cds.fasta
# 	rm -f $(DIR_TMP_SHARED_LOCAL)peptides2cds

# step5d-hook: $(STEP5_TARGETS)

# step5d.finish: step5d.run paralogs2.kaks
# 	touch $@

# step5d.clean:
# 	rm -rf step5d.dir

# paralogs2.kaks:
# 	find step5d.dir/ -name "*.kaks" -exec cat {} \; > $@


# ################################################
# ## start of step5: calculating kaks
# step5c: step4 step5c.prepare step5c.run step5c.finish
# 	touch $@

# ## calculate kaks between pairs
# ## remove links between same organism? No?
# ## 
# step5c.prepare: blast_sameorg.links
# 	$(MAKE) step5c.dir
# 	cat blast_sameorg.links |\
# 	split -a 4 -l $(PARAM_STEP5_CHUNKSIZE) - step5c.dir/chunk_ 
# 	for file in step5c.dir/chunk*; do \
# 		mv $$file $$file.links; \
# 	done
# 	touch $@

# step5c.run: step5c.prepare peptides2cds cds.fasta
# 	$(PARAM_CMD_COPY)cds.fasta $(DIR_TMP_SHARED_LOCAL)
# 	$(PARAM_CMD_COPY)peptides2cds $(DIR_TMP_SHARED_LOCAL)
# 	$(MAKE) -C step5c.dir -k -j $(PARAM_STEP5_NUMJOBS) step5c-hook
# 	touch $@
# 	rm -f $(DIR_TMP_SHARED_LOCAL)cds.fasta
# 	rm -f $(DIR_TMP_SHARED_LOCAL)peptides2cds

# step5c-hook: $(STEP5_TARGETS)

# step5c.finish: step5c.run sameorg.kaks
# 	touch $@

# step5c.clean:
# 	rm -rf step5c.dir

# sameorg.kaks:
# 	find step5c.dir/ -name "*.kaks" -exec cat {} \; > $@

# #####################################################################
# ## Calculate secondary kaks sets
# # kaks between paralogs and nonparalogs
# blast_nonredundant.kaks: blast_nonredundant.links blast_asymmetric.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -d blast_nonredundant.links < blast_asymmetric.kaks > $@

# # kaks between nonparalogs (including links between same organism)
# nonparalogs_asymmetric.kaks: nonparalogs.links blast_asymmetric.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -d nonparalogs.links < blast_asymmetric.kaks |\
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_redundant.pl -d |\
# 	cut -f 1-23 > $@

# # kaks between nonparalogs (excluding links between the same organism)
# nonparalogs_nonredundant.kaks: nonparalogs.links blast_nonredundant.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -d nonparalogs.links < blast_nonredundant.kaks |\
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_redundant.pl -d |\
# 	cut -f 1-23 > $@

# paralogs.links: nonparalogs.links blast_nonredundant.links
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -r -d nonparalogs.links < blast_nonredundant.links |\
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_redundant.pl -d |\
# 	cut -f 1-13 > $@

# # kaks between paralogs (including links between the same organism)
# paralogs_asymmetric.kaks: nonparalogs.links blast_asymmetric.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -r -d nonparalogs.links < blast_asymmetric.kaks |\
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_redundant.pl -d |\
# 	cut -f 1-23 > $@

# # kaks between paralogs (excluding links between the same organism)
# paralogs_nonredundant.kaks: nonparalogs.links blast_nonredundant.kaks
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl -r -d nonparalogs.links < blast_nonredundant.kaks |\
# 	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_redundant.pl -d |\
# 	cut -f 1-23 > $@

# ## end of step5
# ################################################

# ################################################
# ## start of step5: calculating kaks
# step6: step6.prepare step6.run step6.finish
# 	touch $@

# step6.prepare: step6_paralogs.prepare step6_nonparalogs.prepare

# ## select kaks between pairs of organisms
# ## missing organim is unknown. A missing organism arise
# step6_%.prepare: %.kaks 
# 	$(MAKE) step6_$*.dir
# 	cat $*.kaks | cut -f 1,2,4 |\
# 	perl -p -e "s/[_:]\S+//; s/[_:]\S+//;" |\
# 	awk '{if (length($$1) == 5 && length($$2) == 5) { print; } }' |\
# 	awk '{if ($$1 < $$2) {printf("%s_vs_%s\t%s\n", $$1, $$2, $$3); } else {printf("%s_vs_%s\t%s\n", $$2, $$1, $$3);}}' |\
# 	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --pattern-output=step6_$*.dir/ks_%s.data > $@

# step6.run: step6.prepare
# 	$(MAKE) -C step6_paralogs.dir -k  step6-hook
# 	$(MAKE) -C step6_nonparalogs.dir -k  step6-hook
# 	touch $@

# step6-hook: $(STEP6_TARGETS1) $(STEP6_TARGETS2) $(STEP6_TARGETS_PNG1) $(STEP6_TARGETS_PNG2)

# step6.finish: step6.run $(STEP6_RESULTS) $(STEP6_IMAGES)
# 	touch $@

# step6.clean:
# 	rm -rf step6.dir

# %.hist: %.data
# 	cut -f 2 $*.data | python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=10.0 > $@

# %.chist: %.hist
# 	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py < $*.hist | cut -f 1,5 > $@

# # combine histograms from subdirectory

# %_all.hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto \
# 	$*.dir/*.hist \
# 	> $@

# %_diff.hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto \
# 	`ls -1 $*.dir/*.hist | awk ' BEGIN { FS="[_.]"} $$3 != $$5 {print}'` \
# 	> $@

# %_same.hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto \
# 	`ls -1 $*.dir/*.hist | awk ' BEGIN { FS="[_.]"} $$3 == $$5 {print}'` \
# 	> $@

# %_all.normalized_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --normalize \
# 	$*.dir/*.hist \
# 	> $@

# %_diff.normalized_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --normalize \
# 	`ls -1 $*.dir/*.hist | awk ' BEGIN { FS="[_.]"} $$3 != $$5 {print}'` \
# 	> $@

# %_same.nornmalized_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --normalize \
# 	`ls -1 $*.dir/*.hist | awk ' BEGIN { FS="[_.]"} $$3 == $$5 {print}'` \
# 	> $@

# %_all.cumulative_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --missing=1 \
# 	$*.dir/*.chist \
# 	> $@

# %_diff.cumulative_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --missing=1 \
# 	`ls -1 $*.dir/*.chist | awk ' BEGIN { FS="[_.]"} $$3 != $$5 {print}'` \
# 	> $@

# %_same.cumulative_hist:
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	--headers=auto --missing=1 \
# 	`ls -1 $*.dir/*.chist | awk ' BEGIN { FS="[_.]"} $$3 == $$5 {print}'` \
# 	> $@

# %.png: %.hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.hist

# %_cumulative.png: %.cumulative_hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.cumulative_hist

# %_normalized.png: %.normalized_hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.normalized_hist

# %.show: %.hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py  < $*.hist

# %_cumulative.show: %.cumulative_hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py  < $*.cumulative_hist

# %_normalized.show: %.normalized_hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py  < $*.normalized_hist

# ## end of step6
# ################################################

# # histograms of links between organisms

# %.png: %.hist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.hist

# %_c.png: %.chist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.chist

# %_n.png: %.chist
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --hardcopy=$@ < $*.nhist


# analysis1:
# 	cut -f 4 blast_nonparalogs_nonredundant.kaks |\
# 	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > blast_nonparalogs_nonredudant.hist
# 	cut -f 4 paralogs_asymmetric.kaks |\
# 	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > paralogs_asymmetric.hist
# 	cut -f 4 paralogs_nonredundant.kaks |\
# 	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > paralogs_nonredundant.hist
# 	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py < blast_nonparalogs_nonredundant.hist | cut -f 1,5 > blast_nonparalogs_nonredundant.chist
# 	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py < paralogs_asymmetric.hist | cut -f 1,5 > paralogs_asymmetric.chist
# 	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py < paralogs_nonredundant.hist | cut -f 1,5 > paralogs_nonredundant.chist
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	paralogs_asymmetric.chist blast_nonparalogs_asymmetric.chist paralogs_nonredundant.chist |\
# 	python $(DIR_SCRIPTS_TOOLS)plot_data.py \
# 	--legend=ks,paralogs,blast_nonparalogs,paralogs_nonredundant --hardcopy=paralogs_cumul.png
# 	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
# 	paralogs_asymmetric.hist blast_nonparalogs_asymmetric.hist paralogs_nonredundant.hist |\
# 	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
# 	--legend=ks,paralogs,blast_nonparalogs,paralogs_nonredundant --logscale=y --hardcopy=paralogs.png

# subst_%.links: %.links
# 	perl -p -e "s/:[^:]+:..\t/\t/g" < $*.links |\
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns-token=1 --apply=ids_map_pred2new |\
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns-token=2 --apply=ids_map_pred2new |\
# 	perl -p -e "s/^dmel/pdmel_vs_dmel/; s/\tdmel/\tpdmel_vs_dmel/" > $@

# subst_%.kaks: %.kaks
# 	perl -p -e "s/:[^:]+:..\t/\t/g" < $*.kaks |\
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns-token=1 --apply=ids_map_pred2new |\
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns-token=2 --apply=ids_map_prednew |\
# 	perl -p -e "s/^dmel/pdmel_vs_dmel/; s/\tdmel/\tpdmel_vs_dmel/" > $@

