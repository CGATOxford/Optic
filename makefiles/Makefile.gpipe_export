################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.gpipe_export 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#################################################################################
## File export of gpipe data
#################################################################################

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=gpipe_export

################################################
## Release 
PARAM_RELEASE?=unknown

################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
## Table information
## table with raw multiple alignment information (nucleotide level)
PARAM_TABLE_NAME_MALIS_RAW?=malis_raw
## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_AA?=malis_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_NA?=malis_na
## table with multiple alignment information: which prediction in which mali
PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER?=map_prediction2cluster
## table with cluster attributes
PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES?=cluster_attributes
## predictions table
PARAM_TABLE_NAME_PREDICTIONS?=predictions
## summary table
PARAM_TABLE_NAME_QUERIES?=queries
## exons table
PARAM_TABLE_NAME_EXONS?=exons
## summary of exon structures
PARAM_TABLE_NAME_EXONS_SUMMARY?=exons_summary
## predicted genic regions
PARAM_TABLE_NAME_REGIONS?=regions
## kaks values for predictions
PARAM_TABLE_NAME_KAKS?=kaks
## quality indices for predictions
PARAM_TABLE_NAME_QUALITY?=quality
## genes
PARAM_TABLE_NAME_GENES?=genes
## gene info
PARAM_TABLE_NAME_GENEINFO?=geneinfo
## contig sizes
PARAM_TABLE_NAME_CONTIGS?=contigs
## view on all results for each prediction
PARAM_TABLE_NAME_OVERVIEW?=overview
## Materialized overview tables
PARAM_TABLE_NAME_MOVERVIEW?=moverview
## table with coding sequences (cds)
PARAM_TABLE_NAME_CDS?=cds
## predictions table
PARAM_TABLE_NAME_TRANSCRIPTS?=transcripts
## predictions table
PARAM_TABLE_NAME_REDUNDANT?=redundant
## table with domain information
PARAM_TABLE_NAME_DOMAINS?=domains
## table with domain summary information
PARAM_TABLE_NAME_DOMAINS_SUMMARY?=domains_summary
## table with domain summary information
PARAM_TABLE_NAME_PREDICTION2GENOME?=prediction2genome

## table with orthologs
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PROJECT_NAME).orthologlinks_second

## table with repeat information. These get filtered out
## in export_clustering
PARAM_TABLE_NAME_REPEATS?=flies_repeats

################################################
PARAM_SETS?=raw filtered clean

################################################
## directories and database schemas
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

PARAM_SRC_SCHEMAS?=

## directory on where to find the genomic sequences.
## Prefix to a directory, where each species has its own directory.
PARAM_SRC_DIR_PREDICTIONS?=../../

################################################
## Separators between identifiers:
## genome|prediction|gene|quality
PARAM_SEPARATOR?=|

## contig:strand:start:end
PARAM_SEPARATOR_LOCATION?=:

################################################
## Target directories

## AAA
PARAM_AAA_TARGET_DIR?=/var/www/html/download/flies/$(PARAM_RELEASE)/aaa/

## GFF
PARAM_GFF_TARGET_DIR?=/var/www/html/download/flies/$(PARAM_RELEASE)/gff/

## GTF
PARAM_GTF_TARGET_DIR?=/var/www/html/download/flies/$(PARAM_RELEASE)/gtf/

## genes to export for the gene set
PARAM_GFF_QUALITY='CG','PG','SG'

## Orthologies
PARAM_ORTHOLOGY_TARGET_DIR?=/var/www/html/download/flies/$(PARAM_RELEASE)/orthology/

## Predicted sequences
PARAM_SEQUENCES_TARGET_DIR?=/var/www/html/download/flies/$(PARAM_RELEASE)/sequences/

################################################
## Export parameters for the genome browser gbrowse
PARAM_EXPORT_GBROWSER_USERNAME?=andreas

PARAM_EXPORT_GBROWSER_PASSWORD?=HeinBloed

PARAM_EXPORT_GBROWSER_DATABASE?=gbrowser_devel_

PARAM_EXPORT_GBROWSER_HOST?=db

## whether or not to add genome prefix to contig names
PARAM_EXPORT_GBROWSER_ADD_PREFIX?=

## permissions for gbrowser
PARAM_EXPORT_GBROWSER_PERMISSIONS?=nobody@fgu203.anat.ox.ac.uk

################################################
# Section parameters: end
################################################

## Mysql to Gbrowser
GBROWSER_CMD_MYSQL=mysql -u$(PARAM_EXPORT_GBROWSER_USERNAME) -p$(PARAM_EXPORT_GBROWSER_PASSWORD) -h $(PARAM_EXPORT_GBROWSER_HOST)

## file mode for installation
INSTALL_MODE=u=rw,o=r

EXPORT_SEPARATOR=_

FILES_REQUISITES=

## connection to psql
CMD_PSQL_CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c
CMD_PSQL_CONNECTION_BATCH=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -f

## tab separated dump
CMD_PSQL_OPTIONS=-t -A -F"	" 

################################################
GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`

#############################################################################
## Primary targets
all: export_aaa export_gff export_orthology export_sequences

commit: export_aaa.commit export_gff.commit export_orthology.commit export_sequences.commit

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for AAA export
export_aaa: export_aaa.prepare export_aaa.run

export_aaa.prepare:
	$(PRELOG)
	$(MAKE) export_aaa.dir 
	$(EPILOG)

export_aaa.run:
	$(PRELOG)
	@if [ -s aaa.table ]; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_aaa.py \
			--filename-batch=aaa.table \
			--set=filtered \
			--tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
			--filename-pattern-map="export_aaa.dir/%s_%s.map"  \
			--filename-pattern-output="export_aaa.dir/%s.gff" > $@; \
	else \
		$(CMD_MSG2) "ERROR: filename aaa.table not found!"; \
	fi
	$(EPILOG)

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_aaa.commit:
	$(PRELOG)
	@install -d -D $(PARAM_AAA_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_aaa.dir/*.gff $(PARAM_AAA_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_AAA_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE) $@.tmp $(PARAM_AAA_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for GFF export
export_gff: export_gff.prepare export_gff.run

export_gff.prepare:
	$(PRELOG)
	$(MAKE) export_gff.dir 
	$(EPILOG)

export_gff.run:
	$(PRELOG)
	$(MAKE) -C export_gff.dir $@-hook
	$(EPILOG)

#####################################################################################
## commit a run

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_gff.commit:
	$(PRELOG)
	@install -d -D $(PARAM_GFF_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_gff.dir/export_gff*.gff3 $(PARAM_GFF_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_GFF_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE)  $@.tmp $(PARAM_GFF_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

#####################################################################################
## clean up
export_gff.clean:
	$(PRELOG)
	rm -rf export_gff.dir
	$(EPILOG)

#####################################################################################
EXPORT_GFF_PREDICTION_ID='ox_$*' || '$(EXPORT_SEPARATOR)' || p.prediction_id || q.class
EXPORT_GFF_GENE_ID='ox_$*' || '$(EXPORT_SEPARATOR)' || g.gene_id 
EXPORT_GFF_REFERENCE=Contig
EXPORT_GFF_TRACK_FROM=	$*.$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$*.$(PARAM_TABLE_NAME_EXONS) AS e , \
				$*.$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$*.$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$*.$(PARAM_TABLE_NAME_GENES) AS g, \
				$*.$(PARAM_TABLE_NAME_REDUNDANT) AS m

EXPORT_GFF_TRACK_FILTERED_WHERE=e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				g.gene_id != '0' AND \
				c.sbjct_token = p.sbjct_token AND \
				m.rep_prediction_id = p.prediction_id AND \
				m.rep_prediction_id = m.mem_prediction_id AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

EXPORT_GFF_TRACK_CLEAN_WHERE=	e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				g.gene_id != '0' AND \
				c.sbjct_token = p.sbjct_token AND \
				q.class IN ($(PARAM_GFF_QUALITY)) AND \
				m.rep_prediction_id = p.prediction_id AND \
				m.rep_prediction_id = m.mem_prediction_id AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

EXPORT_GFF_TRACK_FULL_FROM=	$*.$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$*.$(PARAM_TABLE_NAME_EXONS) AS e , \
				$*.$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$*.$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$*.$(PARAM_TABLE_NAME_GENES) AS g

EXPORT_GFF_TRACK_FULL_WHERE=	e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				c.sbjct_token = p.sbjct_token AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

EXPORT_GFF_CONTIG_TRACK=	c.sbjct_token, \
				'gpipe', \
				'$(EXPORT_GFF_REFERENCE)', \
				1, \
				c.size, \
				'.', \
				'.', \
				'.', \
				'$(EXPORT_GFF_REFERENCE) ' || c.sbjct_token  

EXPORT_GFF_GENE_TRACK=	p.sbjct_token, \
			   	'gpipe', \
			   	'gene', \
			   	MIN(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	MAX(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END), \
				'.', \
				p.sbjct_strand, \
				'.', \
				'Id=' || $(EXPORT_GFF_GENE_ID)

EXPORT_GFF_MRNA_TRACK=	p.sbjct_token, \
			   	'gpipe', \
			   	'mRNA', \
			   	MIN(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	MAX(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END), \
				p.pidentity, \
				p.sbjct_strand, \
				'.', \
				'Id=' || $(EXPORT_GFF_GENE_ID) || '.' || p.prediction_id || ' ; ' || \
				'Parent=' || $(EXPORT_GFF_GENE_ID) || ' ; ' || \
				'Status ' || q.class || ' ; ' || \
				'Prediction ' || $(EXPORT_GFF_PREDICTION_ID) || ' ; ' 

EXPORT_GFF_CDS_TRACK=	p.sbjct_token, \
			   	'gpipe', \
			   	'CDS', \
			   	(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END, \
				MAX(e.pidentity), \
				p.sbjct_strand, \
				e.exon_frame, \
				'ID=' || $(EXPORT_GFF_GENE_ID) || '.' || p.prediction_id || '.' || e.exon_id || ' ; ' || \
				'Parent=' || $(EXPORT_GFF_GENE_ID) || '.' || p.prediction_id || ' ; ' || \
				'isOk ' || CASE WHEN e.is_ok THEN '1' ELSE '0' END

EXPORT_GFF_CDS_GROUP=GROUP BY p.sbjct_token, p.sbjct_strand, \
			e.exon_frame, p.prediction_id, e.exon_id, g.gene_id, \
			e.genome_exon_from, e.genome_exon_to, c.start, c.size, \
			e.is_ok, e.prediction_id

export_gff.run-hook: 
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(MAKE) export_gff_$${x}_clean.gff3 export_gff_$${x}_filtered.gff3 export_gff_$${x}_full.gff3; \
	done
	$(EPILOG)

## gff annotation gff3 file
export_gff_%_full.gff3: 
	$(PRELOG)
	$(CMD_LOG) "$@: dumping sequence data"
	@printf "## gff-version 3\n" > $@
	@printf "# Gene predictions in $*\n" >> $@
	@printf "# Andreas Heger and Chris Ponting, MRC FGU Oxford" >> $@
	@printf "# Release $(PARAM_RELEASE)\n" >> $@
	@printf "# dumped at `date`\n" >> $@
	$(CMD_LOG) "$@: dumping gene information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_GENE_TRACK) \
	FROM $(EXPORT_GFF_TRACK_FULL_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FULL_WHERE) \
	GROUP BY g.gene_id, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping mRNA information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_MRNA_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FULL_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FULL_WHERE) \
	GROUP BY p.prediction_id, g.gene_id, p.pidentity, q.class, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping CDS information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_CDS_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FULL_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FULL_WHERE) \
	$(EXPORT_GFF_CDS_GROUP) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(EPILOG)

## gff annotation gff3 file
export_gff_%_filtered.gff3: 
	$(PRELOG)
	$(CMD_LOG) "$@: dumping sequence data"
	@printf "## gff-version 3\n" > $@
	@printf "## Gene predictions in $*\n" >> $@
	@printf "## Andreas Heger and Chris Ponting, MRC FGU Oxford" >> $@
	@printf "## Release $(PARAM_RELEASE)\n" >> $@
	@printf "## dumped at `date`\n" >> $@
	$(CMD_LOG) "$@: dumping gene information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_GENE_TRACK) \
	FROM $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FILTERED_WHERE) \
	GROUP BY g.gene_id, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping mRNA information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_MRNA_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FILTERED_WHERE) \
	GROUP BY p.prediction_id, g.gene_id, p.pidentity, q.class, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping CDS information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_CDS_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_FILTERED_WHERE) \
	$(EXPORT_GFF_CDS_GROUP) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(EPILOG)

## gff annotation gff3 file
export_gff_%_clean.gff3: 
	$(PRELOG)
	$(CMD_LOG) "$@: dumping sequence data"
	@printf "## gff-version 3\n" > $@
	@printf "## Gene predictions in $*\n" >> $@
	@printf "## Andreas Heger and Chris Ponting, MRC FGU Oxford" >> $@
	@printf "## Release $(PARAM_RELEASE)\n" >> $@
	@printf "## dumped at `date`\n" >> $@
	$(CMD_LOG) "$@: dumping gene information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_GENE_TRACK) \
	FROM $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_CLEAN_WHERE) \
	GROUP BY g.gene_id, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping mRNA information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_MRNA_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_CLEAN_WHERE) \
	GROUP BY p.prediction_id, g.gene_id, p.pidentity, q.class, p.sbjct_strand, p.sbjct_token" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(CMD_LOG) "$@: dumping CDS information"
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_GFF_CDS_TRACK) \
	FROM  $(EXPORT_GFF_TRACK_FROM) \
	WHERE $(EXPORT_GFF_TRACK_CLEAN_WHERE) \
	$(EXPORT_GFF_CDS_GROUP) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(PSQL_CONNECTION_OPTIONS) >> $@
	$(EPILOG)


#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for orthology export
## Export orthology gffs
export_orthology: export_orthology.prepare export_orthology.run

export_orthology.prepare:
	$(PRELOG)
	$(MAKE) export_orthology.dir 
	$(EPILOG)

export_orthology.run:
	$(PRELOG)
	$(MAKE) -C export_orthology.dir $@-hook
	$(EPILOG)

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_orthology.commit:
	$(PRELOG)
	@install -d -D $(PARAM_ORTHOLOGY_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_orthology.dir/export_orthology*.gff3 $(PARAM_ORTHOLOGY_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_ORTHOLOGY_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE)  $@.tmp $(PARAM_ORTHOLOGY_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

EXPORT_ORTHOLOGY_ORTHOLOGLINKS_TRACK=	\
				f.sbjct_token, \
			   	'gpipe', \
			   	'orthology_$${target}' , \
			   	CASE WHEN f.sbjct_strand = '+' THEN f.sbjct_genome_from+c.start \
	     				WHEN f.sbjct_strand = '-' THEN c.size-f.sbjct_genome_to+c.start END, \
			   	CASE WHEN f.sbjct_strand = '+' THEN f.sbjct_genome_to+c.start \
	     				WHEN f.sbjct_strand = '-' THEN c.size-f.sbjct_genome_from+c.start END, \
				l.weight, \
				f.sbjct_strand, \
				'.',

EXPORT_ORTHOLOGY_ORTHOLOGLINKS_FROM=	\
			    FROM $(PARAM_TABLE_NAME_ORTHOLOGLINKS) AS l, \
			    $*.predictions AS f, \
			    $$t.predictions AS t, \
			    $*.contigs AS c 

EXPORT_ORTHOLOGY_ORTHOLOGLINKS_WHERE=	\
			c.sbjct_token = f.sbjct_token AND \
			l.gene_id1 != '0' AND l.gene_id2 != '0' 

EXPORT_ORTHOLOGY_ID1='ox_' || l.schema1 || '$(EXPORT_SEPARATOR)' || l.gene_id1 || '.' || l.prediction_id1
EXPORT_ORTHOLOGY_ID2='ox_' || l.schema2 || '$(EXPORT_SEPARATOR)' || l.gene_id2 || '.' || l.prediction_id2

export_orthology_%.gff3:
	$(PRELOG)
	@printf "## gff-version 3\n" > $@
	@printf "## Orthologs for $*\n" >> $@
	@printf "## Andreas Heger and Chris Ponting, MRC FGU Oxford" >> $@
	@printf "## Release $(PARAM_RELEASE)\n" >> $@
	@printf "## dumped at `date`\n" >> $@
	@for t in $(PARAM_SRC_SCHEMAS); do \
		if [[ "$*" != "$$t" ]]; then \
		    $(CMD_LOG2) "processing pair from=$* to=$$t."; \
		    target=$${t}; \
		    $(CMD_PSQL_CONNECTION) \
		    "SELECT $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_TRACK) \
		    'Name=' || $(EXPORT_ORTHOLOGY_ID1) || ' ; ' || \
		    'Ortholog=' || $(EXPORT_ORTHOLOGY_ID2) || ' ; ' || \
		    'Degeneracy=' || 	l.gene_degeneracy \
			    || '-' || \
				l.transcript_degeneracy \
			    || ' ; ' \
		    $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_FROM) \
		    WHERE $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_WHERE) AND\
			f.prediction_id = l.prediction_id1 AND \
			t.prediction_id = l.prediction_id2 AND \
			l.schema1 = '$*' AND l.schema2 = '$$t' \
		    GROUP BY l.schema1, l.gene_id1, l.prediction_id1, \
			l.schema2, l.gene_id2, l.prediction_id2, \
			c.start, c.size, \
			l.gene_degeneracy, l.transcript_degeneracy, \
			f.sbjct_strand, f.sbjct_token, \
			f.sbjct_genome_from, f.sbjct_genome_to, l.weight" \
		    $(CMD_PSQL_OPTIONS) >> $@; \
		    $(CMD_PSQL_CONNECTION) \
		    "SELECT $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_TRACK) \
		    'Name=' || $(EXPORT_ORTHOLOGY_ID2) || ' ; ' || \
		    'Ortholog=' || $(EXPORT_ORTHOLOGY_ID1) || ' ; ' || \
		    'Degeneracy=' || \
				CASE WHEN l.gene_degeneracy = '1m' THEN 'm1' \
				     WHEN l.gene_degeneracy = 'm1' THEN '1m' \
				     ELSE l.gene_degeneracy END \
			    || '-' || \
				CASE WHEN l.transcript_degeneracy = '1m' THEN 'm1' \
				     WHEN l.transcript_degeneracy = 'm1' THEN '1m' \
				     ELSE l.transcript_degeneracy END \
			|| ' ; ' \
		    $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_FROM) \
		    WHERE $(EXPORT_ORTHOLOGY_ORTHOLOGLINKS_WHERE) AND\
			f.prediction_id = l.prediction_id2 AND \
			t.prediction_id = l.prediction_id1 AND \
			l.schema2 = '$*' AND l.schema1 = '$$t' \
		    GROUP BY l.schema1, l.gene_id1, l.prediction_id1, \
			l.schema2, l.gene_id2, l.prediction_id2, \
			c.start, c.size, \
			l.gene_degeneracy, l.transcript_degeneracy, \
			f.sbjct_strand, f.sbjct_token, \
			f.sbjct_genome_from, f.sbjct_genome_to, l.weight" \
		    $(CMD_PSQL_OPTIONS) >> $@; \
		fi; \
	done
	$(EPILOG)

export_orthology.run-hook: 
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(MAKE) export_orthology_$${x}.gff3; \
	done
	$(EPILOG)

export_orthology.clean:
	$(PRELOG)
	rm -rf export_orthology.dir
	$(EPILOG)

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for sequence export
export_sequences: export_sequences.prepare export_sequences.run

export_sequences.prepare:
	$(PRELOG)
	$(MAKE) export_sequences.dir 
	$(EPILOG)

export_sequences.run:
	$(PRELOG)
	$(MAKE) -C export_sequences.dir $@-hook
	$(EPILOG)


#####################################################################################
## commit a run
INSTALL_MODE=u=rw,g=r,o=r

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_sequences.commit:
	$(PRELOG)
	@install -d -D $(PARAM_SEQUENCES_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_sequences.dir/export_sequences*.gz $(PARAM_SEQUENCES_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_SEQUENCES_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE)  $@.tmp $(PARAM_SEQUENCES_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

#####################################################################################
## clean up
export_sequences.clean:
	$(PRELOG)
	rm -rf export_sequences.dir
	$(EPILOG)

#####################################################################################
EXPORT_SEQUENCES_GENE_ID='ox_$*' || '$(EXPORT_SEPARATOR)' || g.gene_id 
EXPORT_SEQUENCES_FROM=	$*.$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$*.$(PARAM_TABLE_NAME_GENES) AS g, \
				$*.$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$*.$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$*.$(PARAM_TABLE_NAME_CDS) AS j, \
				$*.$(PARAM_TABLE_NAME_REDUNDANT) AS m

EXPORT_SEQUENCES_WHERE= \
				c.sbjct_token = p.sbjct_token AND \
				j.prediction_id = p.prediction_id AND \
				q.prediction_id = p.prediction_id AND \
				g.prediction_id = p.prediction_id AND \
				g.gene_id != '0' AND \
				m.rep_prediction_id = p.prediction_id AND \
				m.rep_prediction_id = m.mem_prediction_id 

EXPORT_SEQUENCES_SELECT= \
				'>' || \
				$(EXPORT_SEQUENCES_GENE_ID) || '.' || p.prediction_id || \
				' template=' || p.query_token || \
				' locus=' || p.sbjct_token || ':' || \
			   	(CASE WHEN p.sbjct_strand = '+' THEN p.sbjct_genome_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-p.sbjct_genome_to+c.start END) + 1 || \
				'-' || \
			   	(CASE WHEN p.sbjct_strand = '+' THEN p.sbjct_genome_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-p.sbjct_genome_from+c.start END) || \
				' quality=' || q.class || \
				'\n' 



export_sequences.run-hook: 
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(MAKE) export_sequences_$${x}_{cds,peptides}.fasta.gz; \
	done
	$(EPILOG)

## gff annotation gff3 file
export_sequences_%_peptides.fasta.gz: 
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT DISTINCT $(EXPORT_SEQUENCES_SELECT) || \
	p.sequence \
	FROM $(EXPORT_SEQUENCES_FROM) \
	WHERE $(EXPORT_SEQUENCES_WHERE) \
	" \
	$(PSQL_CONNECTION_OPTIONS) |\
	perl -p -e "s/[?]/X/g" \
	gzip >> $@
	$(EPILOG)

## export cds, sort order is important
export_sequences_%_cds.fasta.gz: 
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_SEQUENCES_SELECT) || \
	j.sequence \
	FROM $(EXPORT_SEQUENCES_FROM) \
	WHERE $(EXPORT_SEQUENCES_WHERE) \
	ORDER BY p.prediction_id, j.exon_from" \
	$(PSQL_CONNECTION_OPTIONS) |\
	awk '/^>/ { if ($$0 != a) {print; a = $$0; } next; } { print; }' |\
	gzip >> $@
	$(EPILOG)

clean: export_gff.clean export_orthology.clean export_sequences.clean 

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for sequence export
export_clustering: export_clustering.prepare export_clustering.run

export_clustering.prepare:
	$(PRELOG)
	$(MAKE) export_clustering.dir 
	$(EPILOG)

export_clustering.run:
	$(PRELOG)
	$(MAKE) -C export_clustering.dir $@-hook
	$(EPILOG)

export_clustering.run-hook: 
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(MAKE) export_clustering_$${x}_{cds,peptides}.fasta; \
		$(MAKE) export_clustering_$${x}.exons; \
		$(MAKE) export_clustering_$${x}_{representatives,nr_predictions}; \
	done
	$(EPILOG)

####################################################################################
## Id to use for exported predictions
EXPORT_CLUSTERING_ID='$*' || '$(PARAM_SEPARATOR)' || \
	o.prediction_id || '$(PARAM_SEPARATOR)' || \
	o.gene_id || '$(PARAM_SEPARATOR)' || \
	o.class

####################################################################################
## filter by repeats table, if a table name is given.
ifeq ( $(PARAM_TABLE_NAME_REPEATS), "" )
EXPORT_CLUSTERING_EXTRA_JOIN=LEFT JOIN $(PARAM_TABLE_NAME_REPEATS) AS n USING (query_token)
EXPORT_CLUSTERING_EXTRA_WHERE=AND n.query_token IS NULL
endif

EXPORT_CLUSTERING_LOCATION=     o.sbjct_token || '$(PARAM_SEPARATOR_LOCATION)' || \
				o.sbjct_strand || '$(PARAM_SEPARATOR_LOCATION)' || \
				o.export_sbjct_genome_from || '$(PARAM_SEPARATOR_LOCATION)' || \
				o.export_sbjct_genome_to 

EXPORT_CLUSTERING_FROM=$*.$(PARAM_TABLE_NAME_OVERVIEW) AS o $(EXPORT_CLUSTERING_EXTRA_JOIN_OPTIONS), $*.$(PARAM_TABLE_NAME_REDUNDANT) AS r, $*.$(PARAM_TABLE_NAME_CONTIGS) AS c
EXPORT_CLUSTERING_WHERE=r.rep_prediction_id = o.prediction_id AND \
			r.rep_prediction_id = r.mem_prediction_id AND \
			o.gene_id != '0' AND \
			o.sbjct_token = c.sbjct_token \
			$(EXPORT_CLUSTERING_EXTRA_WHERE)


export_clustering_%_representatives:
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID) \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$*.$(PARAM_TABLE_NAME_GENEINFO) AS i \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	i.best_prediction_id = o.prediction_id \
	ORDER BY o.prediction_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

## export exons. Genomic coordinates are zero-based forward coordinates
export_clustering_%.exons:
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID), \
	o.sbjct_token, o.sbjct_strand, \
	e.exon_frame, e.cds_id, e.exon_from, e.exon_to, \
	CASE WHEN o.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     WHEN o.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END, \
	CASE WHEN o.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     WHEN o.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$*.$(PARAM_TABLE_NAME_CDS) AS e \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	e.prediction_id = o.prediction_id \
	ORDER BY e.prediction_id, e.exon_from" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

export_clustering_%_cds.fasta:
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT '>' || $(EXPORT_CLUSTERING_ID) || ' ' || $(EXPORT_CLUSTERING_LOCATION) || E'\n' || cds.sequence \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$*.$(PARAM_TABLE_NAME_CDS) AS cds \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	cds.prediction_id = o.prediction_id \
	ORDER BY cds.prediction_id, cds.exon_from" \
	$(PSQL_CONNECTION_OPTIONS) |\
	awk '/^>/ { if ($$0 != a) {print; a = $$0; } next; } { print; }' > $@
	$(EPILOG)

## export peptides for clustering
export_clustering_%_peptides.fasta:
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT '>' || $(EXPORT_CLUSTERING_ID) || ' ' || $(EXPORT_CLUSTERING_LOCATION) || E'\n' || o.sequence \
	FROM $(EXPORT_CLUSTERING_FROM) \
	WHERE $(EXPORT_CLUSTERING_WHERE) \
	ORDER BY o.prediction_id " \
	$(PSQL_CONNECTION_OPTIONS) |\
	perl -p -e "s/[?]/X/g" \
	> $@
	$(EPILOG)

## a list of non-redundant predictions 
export_clustering_%_nr_predictions:
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID) \
	FROM $(EXPORT_CLUSTERING_FROM) \
	WHERE $(EXPORT_CLUSTERING_WHERE) \
	ORDER BY o.prediction_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for gbrowser export
#############################################################################
export_gbrowser: export_gbrowser.prepare export_gbrowser.run

export_gbrowser.prepare:
	$(PRELOG)
	$(MAKE) export_gbrowser.dir 
	$(EPILOG)

## patch for flies: add species to contig name
ifneq ($(PARAM_EXPORT_GBROWSER_ADD_PREFIX),)
CMD_PREFIX=`echo $${schema} | perl -p -e "s/vs_.*//"`
CMD_SUBSTITUTE1=|perl -p -e "if(/^>/ && !/$${prefix}/) { s/>/>$${prefix}/; }"
CMD_SUBSTITUTE2=|perl -p -e "if(!/^$${prefix}/) { s/^/$${prefix}/; s/Contig /Contig $${prefix}/; }" 
CMD_SUBSTITUTE3=|perl -p -e "if(!/^$${prefix}/) { s/^/$${prefix}/; }" 
else
CMD_PREFIX=
CMD_SUBSTITUTE1=
CMD_SUBSTITUTE2=
endif

## Patch for fly project: add prefix to contigs
export_gbrowser.run:
	$(PRELOG)
	@for schema in $(PARAM_SRC_SCHEMAS); do \
		prefix=$(CMD_PREFIX); \
		if [ ! -s export_gbrowser.dir/gbrowser_$${schema}_sequence.fasta ]; then \
			python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
				--format=fasta \
				--verbose=0 \
				$(PARAM_SRC_DIR_PREDICTIONS)$${schema}/genome*.fasta \
			> export_gbrowser.dir/gbrowser_$${schema}_sequence.fasta; \
		fi; \
		if [ ! -s export_gbrowser.dir/gbrowser_$${schema}_contigs.gff ]; then \
			python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
			        --connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_USER) \
				--schema=$${schema} \
				--species-id=$${schema} \
				--method-id=gpipe \
				--format=GBrowser \
				--tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
				--tracks=contigs |\
			grep -v "#" $(CMD_SUBSTITUTE2) \
			> export_gbrowser.dir/gbrowser_$${schema}_contigs.gff; \
		fi; \
		for set in $(PARAM_SETS); do \
			if [ ! -s export_gbrowser.dir/gbrowser_$${schema}_$${set}_predictions.gff ]; then \
			    	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
			       		--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_USER) \
				    	--schema=$${schema} \
				    	--species-id=$${schema} \
				    	--method-id=gpipe_$${set} \
				    	--format=GBrowser \
				    	--set=$${set} \
				    	--tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
				    	--tracks=genes,mrnas,cds |\
				grep -v "#" $(CMD_SUBSTITUTE3) \
				> export_gbrowser.dir/gbrowser_$${schema}_$${set}_predictions.gff; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_gbrowser.commit:
	$(PRELOG)
	@install -d -D $(PARAM_GBROWSER_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_gbrowser.dir/*.gff $(PARAM_GBROWSER_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_GBROWSER_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE) $@.tmp $(PARAM_GBROWSER_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

##########################################################################
## execute this on fgu203
export_gbrowser.load: export_gbrowser.run
	$(PRELOG)
	@for schema in $(PARAM_SRC_SCHEMAS); do \
		$(GBROWSER_CMD_MYSQL) -e \
		"DROP DATABASE IF EXISTS $(PARAM_EXPORT_GBROWSER_DATABASE)$${schema}"; \
		$(GBROWSER_CMD_MYSQL) -e \
		"CREATE DATABASE $(PARAM_EXPORT_GBROWSER_DATABASE)$${schema}"; \
		$(GBROWSER_CMD_MYSQL) -e \
		"GRANT SELECT ON $(PARAM_EXPORT_GBROWSER_DATABASE)$${schema}.* TO $(PARAM_EXPORT_GBROWSER_PERMISSIONS)"; \
		bp_fast_load_gff.pl \
		--user $(PARAM_EXPORT_GBROWSER_USERNAME) \
		--pass $(PARAM_EXPORT_GBROWSER_PASSWORD) \
		-c \
		-d $(PARAM_EXPORT_GBROWSER_DATABASE)$${schema} \
		export_gbrowser.dir/gbrowser_$${schema}_sequence.fasta \
		export_gbrowser.dir/gbrowser_$${schema}_contigs.gff \
		export_gbrowser.dir/gbrowser_$${schema}_*_predictions.gff \
		2>> $@; \
	done 
	@touch $@
	$(EPILOG)

#############################################################################
#############################################################################
#############################################################################
#############################################################################
#############################################################################
## export statements for gtf export
export_gtf: export_gtf.prepare export_gtf.run

export_gtf.prepare:
	$(PRELOG)
	$(MAKE) export_gtf.dir 
	$(EPILOG)

export_gtf.run:
	$(PRELOG)
	@for schema in $(PARAM_SRC_SCHEMAS); do \
		if [ ! -s export_gtf.dir/gtf_$${schema}_sequence.fasta ]; then \
			python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
				--format=fasta \
				--verbose=0 \
				$(PARAM_SRC_DIR_PREDICTIONS)$${schema}/genome*.fasta \
			> export_gtf.dir/gtf_$${schema}_sequence.fasta; \
		fi; \
		if [ ! -s export_gtf.dir/gtf_$${schema}_contigs.gff ]; then \
			python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
				--connection=$(PSQL_PYTHON_OPTIONS) \
				--schema=$${schema} \
				--species-id=ox_$${schema} \
				--method-id=gpipe \
				--format=GTF \
				--tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
				--tracks=contigs \
			| grep -v "#" \
			> export_gtf.dir/gtf_$${schema}_contigs.gff; \
		fi; \
		for set in $(PARAM_SETS); do \
			if [ ! -s export_gtf.dir/gtf_$${schema}_$${set}_predictions.gff ]; then \
			    	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/export_predictions.py \
				    --connection=$(PSQL_PYTHON_OPTIONS) \
				    --schema=$${schema} \
				    --species-id=ox_$${schema} \
				    --method-id=gpipe_$${set} \
				    --format=GTF \
				    --set=$${set} \
				    --tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
				    --tracks=genes,mrnas,cds \
				| grep -v "#" \
				> export_gtf.dir/gtf_$${schema}_$${set}_predictions.gff; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

## note: readme has to be lower case, so that it is displayed in the http directory listing.
export_gtf.commit:
	$(PRELOG)
	@install -d -D $(PARAM_GTF_TARGET_DIR)
	@install --mode=$(INSTALL_MODE) export_gtf.dir/*.gff $(PARAM_GTF_TARGET_DIR)
	@cat $(DIR_SCRIPTS_GENEPREDICTION)EXPORT_GTF_README.txt > $@.tmp
	@printf "This is release $(PARAM_RELEASE) from `date`\n" >> $@.tmp
	@install --mode=$(INSTALL_MODE) $@.tmp $(PARAM_GTF_TARGET_DIR)readme
	@rm -f $@.tmp
	$(EPILOG)

#################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
