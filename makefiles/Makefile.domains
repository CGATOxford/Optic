################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.domains 15 2005-08-09 15:24:35Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#################################################################################
## predict domains in predicted genes
##
## Prediction is done by lookup because we know the domains for the queries. The only
## thing left to be checked is for overlap between domain and prediction.
##
## Domain matches to members are mapped to representatives? Don't do this here,
## assume that the domain file is complete.
## 
#################################################################################

domains: domains.matches domains.load domains.summary
	touch $@

domains.matches: domains.input all.predictions
	awk '!/#/ { printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%i\n", \
	$$1, $$2, $$6, $$10, $$11, $$12, $$7, $$8, $$9, 1); }' < all.predictions |\
	python $(DIR_SCRIPTS_TOOLS)graph_map_links.py --map-sbjct=domains.input --multiple > $@

domains.load: domains.matches
	$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_DOMAINS);"
	grep -v "#" domains.matches |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_DOMAINS) FROM STDIN WITH NULL AS 'na'" >> $@ 
	echo "loaded into $(PARAM_TABLE_NAME_DOMAINS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_DOMAINS);' -t `"  >> $(LOG)
	echo "# Domain information" >> $(LOG)
	echo "predictions with domains: `$(CONNECTION) 'SELECT COUNT(DISTINCT prediction_id) FROM $(PARAM_TABLE_NAME_DOMAINS);' -t `" >> $(LOG)
	echo "domains: `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_DOMAINS);' -t `" >> $(LOG)
	touch $@

domains.summary: domains.load domains.input redundant.load
	$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_DOMAINS_SUMMARY);"
	grep -v "#" domains.input | cut -f 2 | sort | uniq |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_DOMAINS_SUMMARY) (domain_id) FROM STDIN WITH NULL AS 'na'" >> $@
	$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_DOMAINS_SUMMARY) SET \
		npredictions = ( SELECT COUNT(DISTINCT d.prediction_id) \
		FROM $(PARAM_TABLE_NAME_DOMAINS) AS d \
		WHERE d.domain_id = $(PARAM_TABLE_NAME_DOMAINS_SUMMARY).domain_id)" >> $@
	$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_DOMAINS_SUMMARY) SET \
		ndomains = ( SELECT COUNT(*) \
		FROM $(PARAM_TABLE_NAME_DOMAINS) AS d \
		WHERE d.domain_id = $(PARAM_TABLE_NAME_DOMAINS_SUMMARY).domain_id)" >> $@
	$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_DOMAINS_SUMMARY) SET \
		nr_npredictions = ( SELECT COUNT(DISTINCT d.prediction_id) \
		FROM $(PARAM_TABLE_NAME_DOMAINS) AS d, \
		$(PARAM_TABLE_NAME_REDUNDANT) AS m \
		WHERE d.prediction_id = m.rep_prediction_id AND \
		m.rep_prediction_id = m.mem_prediction_id AND \
		d.domain_id = $(PARAM_TABLE_NAME_DOMAINS_SUMMARY).domain_id )" >> $@
	$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_DOMAINS_SUMMARY) SET \
		nr_ndomains = ( SELECT COUNT(*) \
		FROM $(PARAM_TABLE_NAME_DOMAINS) AS d, \
		$(PARAM_TABLE_NAME_REDUNDANT) AS m \
		WHERE d.prediction_id = m.rep_prediction_id AND \
		m.rep_prediction_id = m.mem_prediction_id AND \
		d.domain_id = $(PARAM_TABLE_NAME_DOMAINS_SUMMARY).domain_id )" >> $@
	echo "loaded into $(PARAM_TABLE_NAME_SUMMARY): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_DOMAINS_SUMMARY);' -t `"  >> $(LOG)
	echo "# Domain summary information" >> $(LOG)
	echo "domains: `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_DOMAINS_SUMMARY);' -t `" >> $(LOG)
	touch $@
