################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.analyze_codonbias_rates 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
##
## Analyse correlation of codon bias with rates
##
## Input: set of 1:1 orthologs for each pair of species
##
## 1. pearson/spearman correlation coefficents for codon bias with distances
##
## 2. Suppression analysis
##	Genes with low codon bias and short distances
##
#################################################################################

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=analyze_codonbias_duplications
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

## Directory to upload summary pages.
PARAM_DIR_UPLOAD?=/home/andreas/uploads/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks

## table with pairwise distances
PARAM_TABLE_NAME_DISTANCES_GENES?=$(PARAM_PSQL_SCHEMA).distances_genes

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=dmel_vs_dmel3

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=dmel_vs_dmel3 dsim_vs_dmel5 dsec_vs_dmel2 dyak_vs_dmel6 dere_vs_dmel5 dana_vs_dmel5 dpse_vs_dmel7 dper_vs_dmel2 dvir_vs_dmel5 dmoj_vs_dmel5 dgri_vs_dmel4

## These should be sorted in the same way.
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## separator in identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(shell echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/_vs_dmel//g")

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

################################################
## table field to use for bias
PARAM_BIAS?=cai

## table field to use for distance
PARAM_DISTANCE?=ks

## filter for distances larger than x
## (small distances often due to data problems).
PARAM_MIN_DISTANCE?=0.05

################################################
## number of samples for GO zscore calculation.
PARAM_ANALYSIS_GO_SAMPLES?=1000
PARAM_ANALYSIS_GO_SLIMS?=/net/cpp-data/backup/andreas/projects/flies/data_1v3/goslim_generic.obo
PARAM_ANALYSIS_GO_THRESHOLD=0.05
PARAM_ANALYSIS_GO_CATEGORIES=biol_process cell_location mol_function

################################################
# Section parameters: end
################################################

## Required file list
FILES_REQUISITES?=

GENOMES_COMMA=`echo '$(PARAM_SRC_SCHEMAS)' | perl -p -e 's/ +/,/g'`
NAMES_COMMA=`echo '$(PARAM_SRC_NAMES)' | perl -p -e 's/ +/,/g'`

################################################################################################
## Command to substitute schema names with export names
CMD_SUBSTITUTE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all

all: pearson.pairs spearman.pairs

###########################################################################
## Build a list of genes together with their codonbias and their distances to
## their ortholog.
## Only 1:1 orthologs, the mean CAI and minimum distance is taken between predictions within genes.
##
prepare: check-setup create-log map
	$(PRELOG)
	$(EPILOG)

map:
	$(PRELOG)
	@-mkdir $@.dir
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			if [ "$${genome1}" != "$${genome2}" ] ; then \
			    printf "schema1\tgene_id1\tdistance\tbias\n" > $@.dir/map_$${genome1}-$${genome2}; \
			    $(PSQL_CONNECTION) "SELECT \
						    l.schema1, l.gene_id1, \
						    MIN(d.$(PARAM_DISTANCE)), \
						    AVG(c1.$(PARAM_BIAS)) \
						    FROM $${genome1}.codonbias AS c1, \
							 $(PARAM_TABLE_NAME_ORTHOLOGLINKS) AS l \
						    INNER JOIN \
							 $(PARAM_TABLE_NAME_DISTANCES_GENES) AS d \
						    ON \
							    l.schema1 = d.schema1 AND \
							    l.gene_id1 = d.gene_id1 AND \
							    l.schema2 = d.schema2 AND \
							    l.gene_id2 = d.gene_id2 \
						    WHERE l.schema1 = '$${genome1}' AND \
							  l.schema2 = '$${genome2}' AND \
							  l.prediction_id1 = c1.prediction_id AND \
							  l.gd1 = '1' AND l.gd2 = '1' AND \
							  d.$(PARAM_DISTANCE) > $(PARAM_MIN_DISTANCE) \
						    GROUP BY l.schema1, l.gene_id1, l.schema2, l.gene_id2" \
					    $(PSQL_CONNECTION_OPTIONS) >> $@.dir/map_$${genome1}-$${genome2}; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

###########################################################################
%.pairs: map
	$(PRELOG)
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			if [ "$${genome1}" != "$${genome2}" ] ; then \
			    printf "%s\t%s\n" $${genome1} $${genome2} > $@_tmp1; \
			    grep -v "distance" map.dir/map_$${genome1}-$${genome2} |\
			    cut -f 3,4  >> $@_tmp1; \
			    python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
				    --file=$@_tmp1 \
				    --stats=$* | grep -v "#" >> $@; \
			fi; \
		done; \
	done
	@rm -f $@_tmp1
	$(EPILOG)

##########################################################################
correlation_images: 
	$(PRELOG)
	@rm -f $@
	@-mkdir $@.dir
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			if [ "$${genome1}" != "$${genome2}" ] ; then \
			    python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
				    --file=<(cut -f 3,4 map.dir/map_$${genome1}-$${genome2}) \
				    --hardcopy=$@.dir/$${genome1}-$${genome2}.png \
				    --plot=scatter > /dev/null ; \
			fi; \
		done; \
	done
	@rm -f $@_tmp1
	$(EPILOG)

##########################################################################
## mapping of long names to short names.
translation:
	$(PRELOG)
	@rm -f @
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	names=( $(PARAM_SRC_NAMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		printf "%s\t%s\n" $${genomes[$$x]} $${names[$$x]} >> $@; \
	done
	$(EPILOG)

##########################################################################
pearson.matrix: MATRIX_OPTIONS=
spearman.matrix: MATRIX_OPTIONS=

%.matrix: %.pairs
	$(PRELOG)
	@cut -f 1,2,3 $*.pairs |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	$(MATRIX_OPTIONS) \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) > $@
	$(EPILOG)

##########################################################################
%.png: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	--headers --labels="Genomes","Genomes" \
	--hardcopy=$@ \
	< $*.matrix > /dev/null
	$(EPILOG)

##########################################################################
## Build tree based on pairs
%.tree: %.pairs
	$(PRELOG)
	@awk '{ printf("%s\t%s\t%f\n", $$1, $$2, 1.0 - $$3);} '< $*.pairs |\
	tree_kitsch -i p > $@
	$(EPILOG)

##########################################################################
%.svg: %.tree
	$(PRELOG)	
	@python $(DIR_SCRIPTS_TOOLS)tree2plot.py < $*.tree |\
	grep -v "^#" > $@
	$(EPILOG)

############################################################################
############################################################################
############################################################################
## Suppression analysis
##
## Obtain genes with low codon bias and low ks
##
############################################################################
############################################################################
## Get ranks for all data
############################################################################
ranks: map
	$(PRELOG)
	@-mkdir $@.dir
	@for x in map.dir/map_*; do \
		python $(DIR_SCRIPTS_TOOLS)table2table.py --format="%6.4f"  --columns=3,4  --method=rank \
		< $${x} > $@.dir`echo $${x} | perl -p -e "s/map.dir//"`.ranks; \
	done
	$(EPILOG)

############################################################################
## Calculate distance from origin
## 1. normalize the range
## 2. calculate the distance
############################################################################
distances:
	$(PRELOG)
	@-mkdir $@.dir
	@for x in map.dir/map_*; do \
		python $(DIR_SCRIPTS_TOOLS)table2table.py --format="%6.4f"  --columns=3,4  --method=normalize-by-max \
		< $${x} |\
		awk '!/^#/ && !/^schema1/ { printf("%s\t%f\n", $$2, $$3 * $$3 + $$4 * $$4); }' |\
		sort -k2,2n \
		> $@.dir/`echo $${x} | perl -p -e "s/map.dir\/map_//"`.dists; \
	done
	@touch $@
	$(EPILOG)

############################################################################
## Do GO analysis.
## Take top x percent. The total is background.
############################################################################
QUERIES_GO_SUPPRESSION=$(wildcard distances.dir/*.dists)
TARGETS_GO_SUPPRESSION=$(QUERIES_GO_SUPPRESSION:%.dists=%.go)

go: $(TARGETS_GO_SUPPRESSION)

distances.dir/%.go: distances.dir/%.dists
	$(PRELOG)
	@n=$$((`wc -l < distances.dir/$*.dists` * 5 / 100)); \
	python $(DIR_SCRIPTS_GENEPREDICTION)GO.py \
		--genes=<(head -n $${n} distances.dir/$*.dists)\
		--background=distances.dir/$*.dists \
		--user=andreas \
		--password=HeinBloed \
		--database=ensembl_mart_31 \
		--threshold=$(PARAM_ANALYSIS_GO_THRESHOLD) \
		--fdr \
		--sample=$(PARAM_ANALYSIS_GO_SAMPLES) \
		--slims=$(PARAM_ANALYSIS_GO_SLIMS)  \
		--filename-output-pattern="distances.dir/$*_%(go)s_%(section)s" \
	> $@
	$(EPILOG)

################################################################################################
## one pdf file with all postscript files
################################################################################################
all.pdf: 
	gs -dEPSCrop -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=$@ -dBATCH */*.eps

##########################################################################
clean:
	$(PRELOG)
	rm -f *.pairs *.matrix map
	rm -rf *.dir
	$(EPILOG)

##########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
