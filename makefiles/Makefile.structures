################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.structures 864 2007-01-15 13:44:13Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#################################################################################
## Mapping of predictions to structures
##
## given: a set of predictions and a list of structural identifiers
##
## This module 
##      retrieves structure sequences from the www.
##	Aligns the structure sequences with the predictions using BLAST
##
##
#################################################################################
SHELL=/bin/bash --login

LOG=log

TYPE_PREDICTION_ID?=INTEGER
TYPE_GENE_ID?=INTEGER

TO_NULL?=>& /dev/null

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=flies_structures

################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/devel/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=long_jobs.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

PARAM_INPUT_MAP_PDB?=pdb_chain_uniprot.lst
PARAM_INPUT_PEPTIDES=peptides.fasta
PARAM_INPUT_PEPTIDES2GENES=peptides2genes

PARAM_BLASTP_OPTIONS?=-e 1e-20 -v 5000 -b 5000 -F F 
PARAM_BLASTP_NUMJOBS?=100

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with mapping of sequences to transcripts
PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE?=$(PARAM_PSQL_SCHEMA).map_transcripts2sequence

## table with mapping of sequences to PDB residues
PARAM_TABLE_NAME_MAP_SEQUENCE2PDB?=$(PARAM_PSQL_SCHEMA).map_sequence2pdb

################################################
# Section parameters: end
################################################

################################################
## primary targets
prepare: create-schema create-tables

all: structures.ids structures.fasta \
	map_queries2structures


################################################
structures.ids: $(PARAM_INPUT_MAP_PDB)
	$(PRELOG)
	@awk 'BEGIN { FS=" "; } /^[0-9]/ { printf("%s\n", $$7); }' < $(PARAM_INPUT_MAP_PDB) |\
	sort | uniq > $@
	$(EPILOG)

structures.fasta: structures.ids
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)get_sequences_from_www.py --field=sequence < structures.ids > $@.tmp
	@awk '!/^#/ && !/^WARNING/ && !/^$$/ {printf(">%s\n%s\n", $$1, $$2); }' < $@.tmp > $@
	@grep "#" $@.tmp > $@.log
	@rm -f $@.tmp
	$(EPILOG)

map_queries2structures.dir:
	$(PRELOG)
	@rm -rf $@.dir
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		--method=blast \
		--project=$(PARAM_PROJECT_NAME)structures \
		-d $(CURDIR)/$@ \
		PARAM_QUEUE=$(PARAM_QUEUE)
	@printf "PARAM_BLASTP_OPTIONS=%s\n" "$(PARAM_BLASTP_OPTIONS)" >> $@/Makefile
	@printf "PARAM_BLASTP_NUMJOBS=%s\n" "$(PARAM_BLASTP_NUMJOBS)" >> $@/Makefile
	@ln -s ../structures.fasta $@/sbjcts.fasta
	@ln -s ../$(PARAM_INPUT_PEPTIDES) $@/queries.fasta
	$(EPILOG)

map_queries2structures: map_queries2structures.dir 
	$(PRELOG)
	@$(MAKE) -C $@.dir blast PARAM_BLASTP_NUMJOBS=$(PARAM_BLASTP_NUMJOBS)
	@ln -f -s map_queries2structures.dir/blast.links map_queries2structures
	$(EPILOG)

map_queries2structures.stats: map_queries2structures
	$(PRELOG)
	$(CMD_LOG) "summary of structure mapping"
	@printf "Transcripts searched            : %6i\n" `grep -c ">" $(PARAM_INPUT_PEPTIDES)` $(TOLOG)
	@printf "Structures in database          : %6i\n" `wc -l < structures.ids` $(TOLOG)
	@printf "Structures with transcripts     : %6i\n" `cut -f 2 map_queries2structures | sort | uniq | wc -l` $(TOLOG)
	@printf "Transcripts with structures     : %6i\n" `cut -f 1 map_queries2structures | sort | uniq | wc -l` $(TOLOG)
	@printf "Representatives with structures : %6i\n" `cut -f 1 map_queries2structures |\
							   sort | uniq |\
							   python $(DIR_SCRIPTS_TOOLS)filter_tokens.py -c 1 \
								-f <(grep -v "#" peptides2genes | cut -f 1) |\
							   grep -v "#" |\
							   wc -l` $(TOLOG)
	$(EPILOG)

.PHONY: map_queries2structures

map_queries2structures.load: map_queries2structures
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE);" 
	@grep -v "#" map_queries2structure |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)
#########################################################################
## load data into tables

#########################################################################
create-tables: $(PARAM_TABLE_NAME_MAP_TRANSCRIPTS2SEQUENCE).create_table_map_transcripts2sequence \
	$(PARAM_TABLE_NAME_MAP_SEQUENCE2PDB).create_table_map_sequence2pdb

create-schema: 
	-@$(PSQL_CONNECTION) "CREATE SCHEMA $(PARAM_PSQL_SCHEMA)" $(TO_NULL)

#########################################################################
%.create_table_map_transcripts2sequence:
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	query_token TEXT, \
	sbjct_token TEXT, \
	evalue FLOAT, \
	query_from INTEGER, \
	query_to INTEGER, \
	query_ali TEXT, \
	sbjct_from INTEGER, \
	sbjct_to INTEGER, \
	sbjct_ali TEXT, \
	score INTEGER, \
	pide INTEGER, \
	query_length INTEGER, \
	sbjct_length INTEGER) " $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_query_token ON $* (query_token);" $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_sbjct_token ON $* (sbjct_token);" $(TO_NULL)

#########################################################################
## Data is a replication from the pdb2swissprot mapping file from the EBI
## query_token is swissprot-id
## sbjct_token is pdb-id + chain
## sbjct_from and sbjct_to are from the SEQRES columns
%.create_table_map_sequence2pdb:
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	query_token CHAR(5), \
	sbjct_token CHAR(5), \
	query_from INTEGER, \
	query_to INTEGER, \
	query_ali TEXT, \
	sbjct_from INTEGER, \
	sbjct_to INTEGER, \
	sbjct_ali TEXT, \
	pdb_seq_from CHAR(5), \
	pdb_seq_to CHAR(5))" $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_query_token ON $* (query_token);" $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_sbjct_token ON $* (sbjct_token);" $(TO_NULL)

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common




