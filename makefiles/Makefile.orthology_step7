################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_step7 698 2006-07-19 15:53:22Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################


step7: step6.finish step7.prepare step7.run

step7.prepare: 
	$(MAKE) step7.dir

step7.run:
	$(MAKE) -C step7.dir -k -j $(PARAM_STEP4_NUMJOBS) step7-hook

step7-hook: selected full_orthologs.components.map \
	full_orthologs.kaks full_orthologs.ks_table \
	full_orthologs.d4 full_orthologs.d4_table \

.PHONY: step7-hook 



## extract clusters that are perfect. Take into account
## 1. bootstrap information  from stats.bootstrap/selected
## 2. transcript information from stats.benchmali/selected_nonredundant 
selected:
	perl $(DIR_SCRIPTS_TOOLS)set_intersection.pl \
	<( grep -v "#"  ../stats.benchmali/selected_nonredundant | cut -f 1 | perl -p -e "s/_\d+$$//" ) \
	<( grep -v "#"  ../stats.bootstrap/selected | cut -f 1) > $@.clusters
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--column=1 \
	--apply=<( grep -v "#"  ../stats.benchmali/selected_nonredundant | cut -f 1 | perl -p -e 'chop();$$_.="\t$$_\n"; s/_\d+$$//') \
	--invert \
	< $@.clusters > $@

## extract identifiers of those multiple alignments,
## that have been selected as full 1:1 ortholog sets.
## take only one transcript per genome
full_orthologs.components.map: selected
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl -s \
		<(grep -v "#" selected | cut -f 1) \
		< ../stats.benchmali/components |\
	perl -p -e '@data=split(/\t/); \
		    if ($$data[0] ne $$last_cluster) {$$last_cluster=$$data[0]; $$found=0;} \
		    @k=split(/\$(PARAM_SEPARATOR)/,$$data[1]); \
		    if ($$k[0] =~ /$(PARAM_INPUT_GENOME_MASTER)/) { \
			if ($$found) { $$_ = ""; } \
			$$found=+1; \
		    }; \
		' \
	> $@

## ks-values between selected pairs
full_orthologs.kaks: full_orthologs.components.map
	find ../step3.dir -name "cluster_[0-9]*_[0-9]*.kaks" -exec grep -v "#" {} \; |\
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl \
			<(grep -v "#" full_orthologs.components.map | cut -f 2) > $@

full_orthologs.ks_table: full_orthologs.kaks
	awk '{ split($$2, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t%s\t%f\n", $$1, k[1], $$4); \
	       split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t%s\t%f\n", $$2, k[1], $$4); }' < full_orthologs.kaks |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py --asymmetric --default="na" > $@

full_orthologs.ks_hists: full_orthologs.ks_table
	for genome in $(PARAM_GENOMES); do \
		grep -e "^$${genome}" -e "^	" < full_orthologs.ks_table |\
		cut -f 2- |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py --column=all --titles --scale=10.0 > $@.$${genome} ;\
	done

full_orthologs.ks_stats: full_orthologs.ks_table
	for genome in $(PARAM_GENOMES); do \
		grep -e "^$${genome}" -e "^	" < full_orthologs.ks_table |\
		cut -f 2- |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=all --titles > $@.$${genome} ;\
	done
	@touch $@

full_orthologs.ks_matrix: full_orthologs.kaks
	for genome1 in $(PARAM_GENOMES); do \
		for genome2 in $(PARAM_GENOMES); do \
			echo "processing $$genome1 $$genome2"; \
			awk -v g1=$$genome1 -v g2=$$genome2 \
				'{ if ( ( index($$1, g1) && index($$2, g2) ) \
					|| ( index($$1, g2) && index($$2, g1) ) ) \
					{ printf("%s\n", $$4); } }' < full_orthologs.kaks |\
			python $(DIR_SCRIPTS_TOOLS)data2stats.py > $@.tmp.$${genome1}_:_$${genome2}; \
		done \
	done
	rm -f $@
	for x in min max median mean stddev count; do \
		echo "=== $$x ===" >> $@; \
		grep "$$x" $@.tmp.* | perl -p -e "s/$@.tmp.//; s/_:_/\t/; s/:$$x//" |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py >> $@;\
	done
	rm -f $@.tmp.*

full_orthologs.ka_matrix: full_orthologs.kaks
	for genome1 in $(PARAM_GENOMES); do \
		for genome2 in $(PARAM_GENOMES); do \
			echo "processing $$genome1 $$genome2"; \
			awk -v g1=$$genome1 -v g2=$$genome2 \
				'{ if ( ( index($$1, g1) && index($$2, g2) ) \
					|| ( index($$1, g2) && index($$2, g1) ) ) \
					{ printf("%s\n", $$3); } }' < full_orthologs.kaks |\
			python $(DIR_SCRIPTS_TOOLS)data2stats.py > $@.tmp.$${genome1}_:_$${genome2}; \
		done \
	done
	rm -f $@
	for x in min max median mean stddev count; do \
		echo "=== $$x ===" >> $@; \
		grep "$$x" $@.tmp.* | perl -p -e "s/$@.tmp.//; s/_:_/\t/; s/:$$x//" |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py >> $@;\
	done
	rm -f $@.tmp.*

## distances between selected pairs
all.d4: 
	find ../step3.dir -name "cluster_[0-9]*_[0-9]*.na_mali" -exec \
		python $(DIR_SCRIPTS_GENEPREDICTION)mali_rates.py --distance=T92 --sites=d4 --min-sites=10 --file={} \; \
	> $@

full_orthologs.d4:
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl \
			<(grep -v "#" full_orthologs.components.map | cut -f 2) < all.d4 > $@

full_orthologs.d4_table: full_orthologs.d4
	awk '$$5 >= 20 { split($$2, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t%s\t%f\n", $$1, k[1], $$3); \
	       split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t%s\t%f\n", $$2, k[1], $$3); }' < full_orthologs.d4 |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py --asymmetric --default="na" > $@

