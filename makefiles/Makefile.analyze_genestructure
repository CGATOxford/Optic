################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.analyze_genestructure 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
##
## Analyze gene structure. 
## Do not give the master genome as the src list. 
## Sort species by increasing distance to master species.
##
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=analyze_codonbias_duplications
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

## Directory to upload summary pages.
PARAM_DIR_UPLOAD?=/home/andreas/uploads/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks_first

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=dmel_vs_dmel4

## pattern to identify master genome
PARAM_PATTERN_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_PATTERN_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=

## These should be sorted in the same way.
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## separator in identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(shell echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/_vs_dmel//g")

################################################
# Section parameters: end
################################################

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

GENOMES_COMMA=`echo '$(PARAM_SRC_SCHEMAS)' | perl -p -e 's/ +/,/g'`
NAMES_COMMA=`echo '$(PARAM_SRC_NAMES)' | perl -p -e 's/ +/,/g'`


############################################################################
prepare: create-log 

############################################################################
############################################################################
############################################################################
############################################################################
## Obtain pairwise data for two sets of genome (pairwise_data.dir/genome1-genome2), 
## where prediction1/gene1 in genome1 is CG and prediction2/gene2 in genome2 is PG
############################################################################
pairwise_data: pairwise_data.dir
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    target_file=pairwise_data.dir/$${genome1}-$${genome2}; \
			    if [ ! -s $${target_file} ]; then \
				printf "master_gene_id\tmaster_prediction_id1\t" >> $${target_file}; \
				printf "gene_id1\tprediction_id1\tquality1\t" >> $${target_file}; \
				printf "gene_id2\tprediction_id2\tquality2\t" >> $${target_file}; \
				printf "prediction_id\t" >> $${target_file}; \
				printf "number\t" >> $${target_file}; \
				printf "dubious_exons\t" >> $${target_file}; \
				printf "boundaries_sum\t" >> $${target_file}; \
				printf "boundaries_max\t" >> $${target_file}; \
				printf "identical_exons\t" >> $${target_file}; \
				printf "inserted_exons\t" >> $${target_file}; \
				printf "deleted_exons\t" >> $${target_file}; \
				printf "inserted_introns\t" >> $${target_file}; \
				printf "deleted_introns\t" >> $${target_file}; \
				printf "truncated_Nterminus\t" >> $${target_file}; \
				printf "truncated_Cterminus\t" >> $${target_file}; \
				printf "deleted_Nexons\t" >> $${target_file}; \
				printf "deleted_Cexons\t" >> $${target_file}; \
				printf "inserted_Nexons\t" >> $${target_file}; \
				printf "inserted_Cexons\n" >> $${target_file}; \
				$(PSQL_CONNECTION) "\
				SELECT distinct \
				l1.gene_id1, l1.prediction_id1, \
				l1.gene_id2, q1.prediction_id, q1.class, \
				l2.gene_id2, q2.prediction_id, q2.class, \
				e2.* \
				FROM \
				$(PARAM_TABLE_NAME_ORTHOLOGLINKS) as l1, \
				$(PARAM_TABLE_NAME_ORTHOLOGLINKS) as l2, \
				$${genome1}.quality AS q1, \
				$${genome2}.quality AS q2, \
				$${genome1}.predictions AS p1, \
				$${genome2}.predictions AS p2, \
				$${genome2}.exons_summary AS e2 \
				WHERE \
				l1.prediction_id1 = l2.prediction_id1 AND \
				l1.schema1 = '$(PARAM_GENOME_MASTER)' AND \
				l2.schema1 = '$(PARAM_GENOME_MASTER)' AND \
				l1.gene_id1 = l2.gene_id1 AND \
				l1.schema2 = '$${genome1}' AND \
				l2.schema2 = '$${genome2}' AND \
				l1.prediction_id2 = q1.prediction_id AND \
				l2.prediction_id2 = q2.prediction_id AND \
				l1.prediction_id2 = p1.prediction_id AND \
				l2.prediction_id2 = p2.prediction_id AND \
				p1.query_token = l1.prediction_id1 AND \
				p2.query_token = l1.prediction_id1 AND \
				e2.prediction_id = p2.prediction_id AND \
				q1.class = 'CG' AND \
				q2.class = 'PG'" $(PSQL_CONNECTION_OPTIONS) \
				>> $${target_file}; \
			    fi; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Matrix of number of master genes/transcripts, which have changed their 
## status from CG to PG
##########################################################################
master_genes.matrix:       ANALYSIS_COLUMN=1
master_transcripts.matrix: ANALYSIS_COLUMN=2

master_%.matrix: pairwise_data
	$(PRELOG)
	@rm -f $@_tmp
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    printf "%s\t%s\t%i\n" $${genome1} $${genome2} \
			    `cut -f $(ANALYSIS_COLUMN) pairwise_data.dir/$${genome1}-$${genome2} | sort | uniq | wc -l`  \
			    >> $@_tmp; \
			fi; \
		done; \
	done
	@python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) \
		--asymmetric \
	< $@_tmp |\
	$(CMD_TRANSLATE) > $@
	@rm -f $@_tmp
	$(EPILOG)

##########################################################################
## Count reasons for changes
## for each pair of genomes, count the number genes that fall in this category
CATEGORIES_CHANGES=master_gene_id \
	dubious_exons inserted_exons deleted_exons \
	inserted_introns deleted_introns \
	truncated_Nterminus truncated_Cterminus \
	deleted_Nexons deleted_Cexons \
	inserted_Nexons inserted_Cexons

counts:
	$(PRELOG)
	@printf "genome1\tgenome2" > $@
	@for c in $(CATEGORIES_CHANGES); do \
		printf "\t%s" $${c} >> $@; \
	done; 
	@printf "\n" >> $@;
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    printf "%s\t%s" $${genome1} $${genome2} >> $@; \
			    for c in $(CATEGORIES_CHANGES); do \
				printf "\t%i" \
				`python $(DIR_SCRIPTS_TOOLS)csv_cut.py master_gene_id $${c} < pairwise_data.dir/$${genome1}-$${genome2} |\
				 awk '!/^#/ && !/^master_gene_id/ && $$2 > 0 {printf("%s\n", $$1); }' | sort | uniq | wc -l`  \
				>> $@; \
			    done; \
			    printf "\n" >> $@; \
			fi; \
		done; \
	done
	$(EPILOG)

relative_counts:
	$(PRELOG)
	@awk '/^genome1/{ print; next }; \
	     { printf ("%s\t%s\t%i", $$1, $$2, $$3); \
		for (x = 4; x <= NF; ++x) { printf ("\t%5.2f", 100 * $$x / $$3); } printf("\n");}' \
	< counts > $@
	$(EPILOG)

images.dir/relative_counts:
	$(PRELOG)
	@for c in $(CATEGORIES_CHANGES); do \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py genome1 genome2 $${c} < relative_counts |\
		grep -v "genome" |\
		$(CMD_TRANSLATE) |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(NAMES_COMMA) \
		--col-names=$(NAMES_COMMA) \
		--asymmetric \
		> images.dir/$${c}.matrix; \
		python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
		--labels="genome,genome" \
		--hardcopy=images.dir/$${c}.png \
		< images.dir/$${c}.matrix >/dev/null; \
	done; 
	@touch $@
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Sum of genes/transcripts that in the reverse direction have become
## a PG.
##########################################################################
reverse_counts_genes.list:       ANALYSIS_COLUMN=1
reverse_counts_transcripts.list: ANALYSIS_COLUMN=2

reverse_counts_%.list: pairwise_data
	$(PRELOG)
	@printf "genome\tcounts\n" > $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		rm -f $@_tmp; \
		genome1=$${genomes[$$x]}; \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			cut -f $(ANALYSIS_COLUMN) pairwise_data.dir/$${genome2}-$${genome1} |\
			grep -v "master_gene_id">> $@_tmp; \
		done; \
		printf "%s\t%i\n" $${genome1} `sort $@_tmp | uniq | wc -l` >> $@; \
	done
	@rm -f $@_tmp
	$(EPILOG)

############################################################################
############################################################################
############################################################################
############################################################################
## Get gaps per gene
############################################################################
gaps_data: gaps_data.dir
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]}; \
		target_file=gaps_data.dir/$${genome}; \
		if [ ! -s gaps_data.dir/$${genome} ]; then \
		    printf "query_token\tprediction_id\tgene_id\tquality\tngaps\tlgaps\n" > $${target_file}; \
		    $(PSQL_CONNECTION) "\
		    SELECT o.query_token, o.prediction_id, o.gene_id, o.class, \
		    COUNT(*), \
		    SUM( g.sbjct_genome_to - g.sbjct_genome_from) \
		    FROM $${genome}.overview as o, $${genome}.gaps AS g \
		    WHERE o.sbjct_token = g.sbjct_token AND \
		    ( (g.sbjct_genome_from between o.export_sbjct_genome_from and o.export_sbjct_genome_to) \
		    OR (g.sbjct_genome_to between o.export_sbjct_genome_from and o.export_sbjct_genome_to) ) \
		    GROUP BY o.query_token, o.prediction_id, o.gene_id, o.class;" \
		    $(PSQL_CONNECTION_OPTIONS) \
		    >> $${target_file}; \
		fi; \
	done
	@touch $@
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Count number of PG transcripts/genes that are CG in the other genome and
## that overlap with gaps
##
## The counting is done by genes.
##########################################################################
due_to_gaps.matrix: pairwise_data
	$(PRELOG)
	@rm -f $@_tmp*
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py "gene_id1" < gaps_data.dir/$${genome1} |\
		grep "^[0-9]" | sort | uniq > $@_tmp1; \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome2=$${genomes[$$y]}; \
			    python $(DIR_SCRIPTS_TOOLS)csv_cut.py "gene_id1" < pairwise_data.dir/$${genome2}-$${genome1} |\
			    grep "^[0-9]" | sort | uniq > $@_tmp2; \
			    printf "%s\t%s\t%i\n" $${genome2} $${genome1} \
				`perl $(DIR_SCRIPTS_TOOLS)set_intersection.pl $@_tmp1 $@_tmp2 | wc -l` >> $@_tmp; \
			fi; \
		done; \
	done
	@python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) \
		--asymmetric \
	< $@_tmp |\
	$(CMD_TRANSLATE) > $@
	@rm -f $@_tmp*
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Get list of PG transcripts/genes that are CG in any other genome further
## away from D. melanogaster 
##########################################################################
reverse_data: reverse_data.dir pairwise_data
	$(PRELOG)
	@rm -f $@_tmp*
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		rm -f $@_tmp; \
		genome1=$${genomes[$$x]}; \
		target_file=$@.dir/$${genome1}; \
		rm -f $${target_file}; \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			python $(DIR_SCRIPTS_TOOLS)csv_cut.py "master_gene_id" "gene_id2" "prediction_id2" \
			< pairwise_data.dir/$${genome2}-$${genome1} |\
			grep -v "#" | grep -v "master_gene_id" |\
			sort | uniq >> $@_tmp; \
		done; \
		printf "master_gene_id\tgene_id\tprediction_id\n" > $${target_file}; \
		sort $@_tmp | uniq >> $${target_file}; \
	done
	@rm -f $@_tmp*
	@touch $@
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Count number of PG transcripts/genes that are CG in the other genome and
## that overlap with gaps. Cumulate reverse set. Joins via prediction_id
##
## First set of numbers is count in predictions.
## Second set of numbers is count in query_tokens.
## Third set of numbers is count in genes.
##########################################################################
reverse.stats:
	$(PRELOG)
	@rm -f $@_tmp*
	@printf "# Number of PG transcripts/genes that are PG in the genome and CG and in any other genome.\n" > $@
	@printf "# The counts are in predictions, query_tokens and genes, respectively.\n" >> $@
	@printf "genome\toverlap\treverse\tpercent\toverlap\treverse\tpercent\toverlap\treverse\tpercent\n" >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		genome1=$${genomes[$$x]}; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py "prediction_id" "query_token" "gene_id" < gaps_data.dir/$${genome1} |\
		grep -v "#" | grep -v "gene_id" |\
		sort | uniq > $@_tmp1; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py "prediction_id" "master_gene_id" "gene_id" < reverse_data.dir/$${genome1} |\
		grep -v "#" | grep -v "gene_id" |\
		sort | uniq > $@_tmp2; \
		printf "%s" $${genome1} >> $@; \
		for column in 1 2 3; do \
		    ngaps=`cut -f $${column} < $@_tmp1 | sort | uniq | wc -l`; \
		    nreverse=`cut -f $${column} < $@_tmp2 | sort | uniq | wc -l`; \
		    noverlap=`perl $(DIR_SCRIPTS_TOOLS)set_intersection.pl \
		    <(cut -f $${column} < $@_tmp1 | sort | uniq) \
		    <(cut -f $${column} < $@_tmp2 | sort | uniq) | wc -l`; \
		    printf "\t%i\t%i\t%i" $${noverlap} $${nreverse} $$(( $${noverlap} * 100 / $${nreverse})) >> $@; \
		done; \
		printf "\n" >> $@;\
	done
	$(EPILOG)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
## Count number of PG transcripts/genes that are CG in the other genome and
## that overlap with gaps. Joins via prediction_id, but give output for every
## pair of genomes.
##
## First set of numbers is count in predictions.
## Second set of numbers is count in query_tokens.
## Third set of numbers is count in genes.
##########################################################################
reverse_single.stats:
	$(PRELOG)
	@rm -f $@_tmp*
	@printf "# Number of PG transcripts/genes that are PG in the genome and CG and in any other genome.\n" > $@
	@printf "# The counts are in predictions, query_tokens and genes, respectively.\n" >> $@
	@printf "genome\twith_gaps\treverse\tpercent\twith_gaps\treverse\tpercent\twith_gaps\treverse\tpercent\n" >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		genome1=$${genomes[$$x]}; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py --unique \
			"prediction_id" "query_token" "gene_id" \
			< gaps_data.dir/$${genome1} > $@_tmp1; \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			python $(DIR_SCRIPTS_TOOLS)csv_cut.py --unique \
				"prediction_id2" "master_gene_id" "gene_id2" \
				< pairwise_data.dir/$${genome2}-$${genome1} > $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)csv_intersection.pl $@_tmp1 $@_tmp2 > $@_tmp3; \
			printf "%s\t%s" $${genome1} $${genome2} >> $@; \
			for column in 1 2 3; do \
				ngaps=`cut -f $${column} < $@_tmp1 | sort | uniq | wc -l`; \
				nreverse=`cut -f $${column} < $@_tmp2 | sort | uniq | wc -l`; \
				noverlap=`cut -f $${column} < $@_tmp3 | sort | uniq | wc -l`; \
				printf "\t%i\t%i\t%i" $${noverlap} $${nreverse} $$(( $${noverlap} * 100 / $${nreverse})) >> $@; \
			done; \
			printf "\n" >> $@; \
		done; \
	done
	$(EPILOG)


############################################################################
############################################################################
############################################################################
############################################################################
## Get predictions in each genome that are predicted with the ortholog from 
## master. Only best predictions per gene are taken.
############################################################################
master_data_%: master_data_%.dir
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
	    genome=$${genomes[$$x]}; \
	    target_file=$@.dir/$${genome}; \
	    if [ ! -s $${target_file} ]; then \
		printf "rep_token\tquery_token\t" >> $${target_file}; \
		printf "gene_id\tprediction_id\tquality\t" >> $${target_file}; \
		printf "dummy\t" >> $${target_file}; \
		printf "number\t" >> $${target_file}; \
		printf "dubious_exons\t" >> $${target_file}; \
		printf "boundaries_sum\t" >> $${target_file}; \
		printf "boundaries_max\t" >> $${target_file}; \
		printf "identical_exons\t" >> $${target_file}; \
		printf "inserted_exons\t" >> $${target_file}; \
		printf "deleted_exons\t" >> $${target_file}; \
		printf "inserted_introns\t" >> $${target_file}; \
		printf "deleted_introns\t" >> $${target_file}; \
		printf "truncated_Nterminus\t" >> $${target_file}; \
		printf "truncated_Cterminus\t" >> $${target_file}; \
		printf "deleted_Nexons\t" >> $${target_file}; \
		printf "deleted_Cexons\t" >> $${target_file}; \
		printf "inserted_Nexons\t" >> $${target_file}; \
		printf "inserted_Cexons\n" >> $${target_file}; \
		$(PSQL_CONNECTION) "\
		SELECT distinct \
		l1.gene_id1, l1.prediction_id1, \
		l1.gene_id2, q2.prediction_id, q2.class, \
		e2.* \
		FROM \
		$(PARAM_TABLE_NAME_ORTHOLOGLINKS) as l1, \
		$${genome}.quality AS q2, \
		$${genome}.predictions AS p2, \
		$${genome}.exons_summary AS e2, \
		$${genome}.geneinfo AS g2 \
		WHERE \
		l1.schema1 = '$(PARAM_GENOME_MASTER)' AND \
		l1.schema2 = '$${genome}' AND \
		l1.prediction_id2 = q2.prediction_id AND \
		l1.prediction_id2 = p2.prediction_id AND \
		l1.prediction_id1 = p2.query_token AND \
		e2.prediction_id = p2.prediction_id AND \
		g2.gene_id = l1.gene_id2 AND \
		g2.best_prediction_id = p2.prediction_id AND \
		g2.best_class = '$*' " $(PSQL_CONNECTION_OPTIONS) \
		>> $${target_file}; \
	   fi; \
	done
	@rm -rf $@_tmp*
	@touch $@
	$(EPILOG)

############################################################################
############################################################################
############################################################################
############################################################################
## Count overlap with gap list
############################################################################
overlap_with_gaps_%.list: 
	$(PRELOG)
	@printf "# Number of $* transcripts/genes that overlap with gaps.\n" > $@
	@printf "# The counts are in predictions, query_tokens and genes, respectively.\n" >> $@
	@printf "genome\tnoverlap\tntotal\tpercent\tnoverlap\tntotal\tpercent\tnoverlap\tntotal\tpercent\n" >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]}; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py --unique "prediction_id" "query_token" "gene_id" \
		< gaps_data.dir/$${genome} > $@_tmp1; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py --unique "prediction_id" "query_token" "gene_id" \
		< master_data_$*.dir/$${genome} > $@_tmp2; \
		python $(DIR_SCRIPTS_TOOLS)csv_set.py --method="intersection" \
			--join-fields1="prediction_id" --join-fields2="prediction_id" \
			$@_tmp1 $@_tmp2 |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py "prediction_id" "query_token" "gene_id" > $@_tmp3; \
		printf "%s" $${genome} >> $@; \
		for column in prediction_id query_token gene_id; do \
		    ngaps=`python $(DIR_SCRIPTS_TOOLS)csv_cut.py -v 0 --unique $${column} < $@_tmp1 | wc -l`; \
		    ntotal=`python $(DIR_SCRIPTS_TOOLS)csv_cut.py -v 0 --unique $${column} < $@_tmp2 | wc -l`; \
		    noverlap=`python $(DIR_SCRIPTS_TOOLS)csv_cut.py -v 0 --unique $${column} < $@_tmp3 | wc -l`; \
		    printf "\t%i\t%i\t%i" $${noverlap} $${ntotal} $$(( $${noverlap} * 100 / $${ntotal})) >> $@; \
		done; \
		printf "\n" >> $@; \
	done
	@rm -f $@_tmp*
	$(EPILOG)


##########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
