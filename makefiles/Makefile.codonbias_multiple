################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codonbias_multiple 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Multiple pairwise orthology prediction

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction

################################################
## Directory where to put summary files to upload
PARAM_DIR_UPLOAD?=/home/andreas/uploads/

################################################
## Directory with predictions
PARAM_DIR_PREDICTIONS?=../../export/export_clustering.dir/

#########################################################################
## pattern for genome and peptide files. If there is a single file, set to filename
PARAM_INPUT_GENOME?=genome_%s.fasta
PARAM_INPUT_PEPTIDES?=peptides.fasta
PARAM_INPUT_GENOME?=$(wildcard genome*.fasta)
PARAM_INPUT_EXONS?=exon_boundaries_reference

################################################
## Database connection parameters
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
## genome parameters
## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=

## These should be sorted in the same way.
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## separator in identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(shell echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/_vs_dmel//g")

################################################
## Predictions to use for codon bias calculation.
PARAM_QUALITIES?=CG,PG,SG

################################################
## reference species for CAI external calculation
PARAM_CAI_REFERENCE?=dmelanogaster

################################################
## number of repetitions for randomized trials
## should correspond to the same values in Makefile.codonbias
PARAM_RANDOM_ITERATIONS?=5

################################################
## various things I need to put somewhere.
PARAM_MAX_KS=2.0
PARAM_MAX_D4=1.0

## Codons to remove from frequency analysis.
## These are the three stop codons and methionine and tryptophane.
PARAM_ANALYSIS_REMOVE_CODONS?=TGA,TAA,TAG,ATG,TGG

################################################
## Filter ortholog sets: if (averaged) length of orthologs
## is less than/greater than the (averaged) length of master: reject
PARAM_ANALYSIS_FILTER_LENGTH_MIN_RATIO=0.90
PARAM_ANALYSIS_FILTER_LENGTH_MAX_RATIO=1.10

################################################
# Section parameters: end
################################################

GENOMES_COMMA=`echo '$(PARAM_SRC_SCHEMAS)' | perl -p -e 's/ +/,/g'`
NAMES_COMMA=`echo '$(PARAM_SRC_NAMES)' | perl -p -e 's/ +/,/g'`

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

## connection to psql
CMD_PSQL_CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c

## tab separated dump
CMD_PSQL_DUMP_OPTIONS=-t -A -F"	" 

########################################################################
## various includes

########################################################################
## target to do in subdirectories
MASTER_TARGET?=all

## do nothing if called without a target.
nop:

########################################################################
## setup directories for blast runs and pairwise orthology assignments
## each directory gets copies of
## 1. peptides.fasta 
## 2. cds.fasta as 
## 3. a list of predictions are selected set
##	only representatives and only genes
##
## If you need to add further entries, add them to the end of PARAM_SRC_SCHEMAS and PARAM_SRC_DIRS.

prepare: create-schema create-tables reference.weights
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]}; \
		target_dir=bias_$${genomes[$$x]}; \
		if [ ! -e $${target_dir} ]; then \
		    echo "setting up $${target_dir}" $(TOLOG); \
		    mkdir $${target_dir}; \
		    python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		    -f \
		    -m codonbias \
		    -p bias_$${genomes[$$x]} \
		    -d $(CURDIR)/$${target_dir} \
		    PARAM_PSQL_SCHEMA=$${genomes[$$x]} \
		    > $${target_dir}/setup.log; \
		    ln -s ../$(PARAM_DIR_PREDICTIONS)export_clustering_$${genome}_peptides.fasta $${target_dir}/peptides.fasta; \
		    ln -s ../$(PARAM_DIR_PREDICTIONS)export_clustering_$${genome}_cds.fasta $${target_dir}/cds.fasta; \
		    awk -v qq="$(PARAM_QUALITIES)" \
			'BEGIN { split( qq, q, ","); for (x in q) { qualities[q[x]] = 1; } } \
			{ split( $$0, a, "$(PARAM_SEPARATOR)"); \
				if (a[4] in qualities && \
					a[2] == a[3] ) { print; }}' \
		    < $(PARAM_DIR_PREDICTIONS)export_clustering_$${genome}_representatives > $${target_dir}/filter; \
		    $(MAKE) -C $${target_dir} prepare; \
		else \
			echo "$${target_dir} already exists: skipped" $(TOLOG); \
		fi; \
	done;
	@-mkdir analysis.dir
	$(EPILOG)

SUBDIRS=$(wildcard bias_*)

$(SUBDIRS):
	$(MAKE) -C $@ $(MASTER_TARGET)

all: $(SUBDIRS)
	$(EPILOG)

finish: 

clean:
	$(MAKE) all MASTER_TARGET=clean

.PHONY: subdirs $(SUBDIRS)

#########################################################################
## dump reference weights
reference.weights:
	python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--reference=$(PARAM_CAI_REFERENCE) | grep -v "#" > $@

#########################################################################
create-links:
	@for x in $(PARAM_SRC_SCHEMAS); do \
		if test -d ../$${x}; then \
			$(CMD_MSG2) "setting up links to $${x}." ; \
			ln -fs ../$${x} $${x}; \
		else \
			$(CMD_MSG2) "src for $${x} not found." ; \
		fi; \
	done

#########################################################################
create-schema:
	$(PRELOG)
	$(EPILOG)

#########################################################################
create-tables: 
	$(PRELOG)
	$(EPILOG)


################################################################################################
################################################################################################
################################################################################################
################################################################################################
## Create wiki summary page
################################################################################################
summary.wiki:
	$(PRELOG)
	@rm -f $@
	python $(DIR_SCRIPTS_TOOLS)preppy.py \
	$(DIR_SCRIPTS_GENEPREDICTION)codonbias_wiki.prep \
	genomes=$(GENOMES_COMMA) \
	> $@
	@mv -f summary.wiki $(PARAM_DIR_UPLOAD)
	@rm -f $(PARAM_DIR_UPLOAD)$@.zip
	@cd analysis.dir; zip $(PARAM_DIR_UPLOAD)$@.zip *.png *.ps_* *.svg 2>/dev/null
	$(EPILOG)

##########################################################################
## Analysis options
##########################################################################
analysis: 	translation \
		analysis.dir/codon_usages_selected.table \
		analysis.dir/codon_usages_biased.table \
		analysis.dir/weights.table analysis.dir/weights.tree \
		analysis.dir/dominant_set.list \
		analysis.dir/unequal_weights.table analysis.dir/unequal_weights.tree \
		analysis.dir/unequal_weights_pearson.table \
		analysis.dir/unequal_weights_pearson.matrix \
		cai-hook \
		analysis.dir/images

#########################################################################
ANALYSIS_TARGETS_SRC1=$(wildcard analysis.dir/*.table)
ANALYSIS_TARGETS_SRC2=$(wildcard analysis.dir/*.hist)
ANALYSIS_TARGETS_SRC3=$(wildcard analysis.dir/*.matrix)
ANALYSIS_TARGETS_IMAGES=$(ANALYSIS_TARGETS_SRC1:%.table=%.png) \
			$(ANALYSIS_TARGETS_SRC2:%.hist=%.png) \
			$(ANALYSIS_TARGETS_SRC3:%.matrix=%.png) \
			analysis.dir/weights.svg analysis.dir/unequal_weights.svg \
			analysis.dir/unequal_weights_pearson.png


analysis.dir/images: $(ANALYSIS_TARGETS_IMAGES)
	$(PRELOG)
	@touch $@
	$(EPILOG)

%.png: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	--headers --labels="Genomes","Genomes" \
	--hardcopy=$@ \
	< $*.matrix >/dev/null
	$(EPILOG)

%.png: %.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	--headers --labels="Genomes","Codons" \
	--hardcopy=$@ \
	< $*.table >/dev/null
	$(EPILOG)

%_boxplot.png: %.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
		--plot=boxplot \
		--file=<(cut -f 2- $*.table) \
		--hardcopy=$@ \
		--options="ylim=c(0,1)" \
	>/dev/null
	$(EPILOG)

%.png: %.hist
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--hardcopy=$@ \
	< $*.hist >/dev/null
	$(EPILOG)

%.matrix: %.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--row-names=$(NAMES_COMMA) \
	--col-names=$(NAMES_COMMA) \
	< $*.table > $@
	$(EPILOG)

%_cumul.png: %.cumul_hist
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--hardcopy=$@ \
	< $*.cumul_hist >/dev/null
	$(EPILOG)

analysis.dir/%.svg: analysis.dir/%.tree
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2plot.py < analysis.dir/$*.tree | grep -v "^#" > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## building a map for export names
#########################################################################
CMD_SUBSTITUTE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all

#########################################################################
#########################################################################
#########################################################################
# codon usages across all species for all/selected/biased genes
#########################################################################
analysis.dir/codon_usages_%.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		perl -p -e "s/WEIGHT/$${genome}/" < bias_$${genome}/$*.frequencies > $@_tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@_tmp_* |\
	$(CMD_SUBSTITUTE) |\
	awk 'BEGIN { split("$(PARAM_ANALYSIS_REMOVE_CODONS)", a, ","); \
		for (x in a) { g[a[x]] = 1; } } \
	{ if (g[$$1]) { next; } print; }' > $@
	@rm -f $@_tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# codon usages across all species for all/selected/biased genes
#########################################################################
analysis.dir/weights_%.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--weights-matrix2table \
		< bias_$${genome}/$*.weights |\
		perl -p -e "s/WEIGHT/$${genome}/" \
		> $@_tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@_tmp_* |\
	$(CMD_SUBSTITUTE) |\
	awk 'BEGIN { split("$(PARAM_ANALYSIS_REMOVE_CODONS)", a, ","); \
		for (x in a) { g[a[x]] = 1; } } \
	{ if (g[$$1]) { next; } print; }' > $@
	@rm -f $@_tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# codon usages across all species for all/selected/biased genes
#########################################################################
analysis.dir/frequencies_%.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		cat < bias_$${genome}/$*.frequencies |\
		perl -p -e "s/WEIGHT/$${genome}/" \
		> $@_tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@_tmp_* |\
	$(CMD_SUBSTITUTE) |\
	awk 'BEGIN { split("$(PARAM_ANALYSIS_REMOVE_CODONS)", a, ","); \
		for (x in a) { g[a[x]] = 1; } } \
	{ if (g[$$1]) { next; } print; }' > $@
	@rm -f $@_tmp_*
	$(EPILOG)

## kl based distances
analysis.dir/frequencies_%.kl: analysis.dir/frequencies_%.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)table2table.py \
		--format="%6.4f" \
		--columns=all-but-first \
		--method=kullback-leibler \
	< $^ > $@
	$(EPILOG)


#########################################################################
#########################################################################
#########################################################################
# codon usages across all species for all/selected/biased genes
#########################################################################
analysis.dir/absolute_frequencies_%.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		cat < bias_$${genome}/$*.absolute_frequencies |\
		perl -p -e "s/WEIGHT/$${genome}/" \
		> $@_tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@_tmp_* |\
	$(CMD_SUBSTITUTE) |\
	awk 'BEGIN { split("$(PARAM_ANALYSIS_REMOVE_CODONS)", a, ","); \
		for (x in a) { g[a[x]] = 1; } } \
	{ if (g[$$1]) { next; } print; }' > $@
	@rm -f $@_tmp_*
	$(EPILOG)

## kl based distances
analysis.dir/absolute_frequencies_%.kl: analysis.dir/absolute_frequencies_%.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)table2table.py \
		--format="%6.4f" \
		--columns=all-but-first \
		--method=kullback-leibler \
	< $^ > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## final weights across seven species
## without codons, that are preferred in all species
#########################################################################
analysis.dir/changed_weights_%.table: analysis.dir/weights_%.table
	$(PRELOG)
	@awk '/^#/ || $$2 ~ /^[^0-9]/ { print; next; } \
	     { sum=0; for (x = 2; x <= NF; ++x) \
			{ sum+=$$x; }; \
		if (sum > 0 && sum < NF - 1) { print; };}' \
	< $^ > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## get preferred codons based on weights table
## Note: the non-degenerate codons have been removed, so the max is 18
#########################################################################
analysis.dir/preferred_%.matrix: analysis.dir/weights_%.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
			--column=all \
			--file=analysis.dir/weights_$*.table \
			--stats=count \
			--threshold=0.999999 \
	> $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
# Distribution of biases: CAI
#########################################################################
analysis.dir/cai_full.hist:     ANALYSIS_FILE_GENES=all.acai_genes
analysis.dir/cai_full.hist:     ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_full.hist:     ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_selected.hist: ANALYSIS_FILE_GENES=selected.acai_genes
analysis.dir/cai_selected.hist: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_selected.hist: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_external.hist: ANALYSIS_FILE_GENES=all.acai_genes
analysis.dir/cai_external.hist: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_external.hist: ANALYSIS_FILE_GENES=external.acai_genes

analysis.dir/cai_biased.hist:   ANALYSIS_FILE_GENES=biased.acai_genes
analysis.dir/cai_biased.hist:   ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_biased.hist:   ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1
##
analysis.dir/cai_full.raw_hist: ANALYSIS_FILE_GENES=all.acai_genes
analysis.dir/cai_full.raw_hist: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_full.raw_hist: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_selected.raw_hist: ANALYSIS_FILE_GENES=selected.acai_genes
analysis.dir/cai_selected.raw_hist: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_selected.raw_hist: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_external.raw_hist: ANALYSIS_FILE_GENES=external.acai_genes
analysis.dir/cai_external.raw_hist: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_external.raw_hist: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 

analysis.dir/cai_biased.raw_hist: ANALYSIS_FILE_GENES=biased.acai_genes
analysis.dir/cai_biased.raw_hist: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_biased.raw_hist: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 
##
analysis.dir/cai_full.cumul_hist: ANALYSIS_FILE_GENES=all.acai_genes
analysis.dir/cai_full.cumul_hist: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_full.cumul_hist: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_selected.cumul_hist: ANALYSIS_FILE_GENES=selected.acai_genes
analysis.dir/cai_selected.cumul_hist: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_selected.cumul_hist: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_external.cumul_hist: ANALYSIS_FILE_GENES=external.acai_genes
analysis.dir/cai_external.cumul_hist: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_external.cumul_hist: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 

analysis.dir/cai_biased.cumul_hist: ANALYSIS_FILE_GENES=biased.acai_genes
analysis.dir/cai_biased.cumul_hist: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_biased.cumul_hist: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 
##
analysis.dir/cai_full.stats:     ANALYSIS_FILE_GENES=all.acai_genes
analysis.dir/cai_full.stats:     ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_full.stats:     ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_selected.stats: ANALYSIS_FILE_GENES=selected.acai_genes
analysis.dir/cai_selected.stats: ANALYSIS_FIELD=CAICLASS
analysis.dir/cai_selected.stats: ANALYSIS_CMD_FILTER=cat

analysis.dir/cai_external.stats: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_external.stats: ANALYSIS_FILE_GENES=external.acai_genes
analysis.dir/cai_external.stats: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 

analysis.dir/cai_biased.stats: ANALYSIS_FIELD=CAIEXT
analysis.dir/cai_biased.stats: ANALYSIS_FILE_GENES=biased.acai_genes
analysis.dir/cai_biased.stats: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --column=1 

ANALYSIS_SUBSETS=full selected external biased
TARGETS_ANALYSIS_CAI=$(ANALYSIS_SUBSETS:%=analysis.dir/cai_%.hist)  \
			$(ANALYSIS_SUBSETS:%=analysis.dir/cai_%.stats)  \
			$(ANALYSIS_SUBSETS:%=analysis.dir/cai_%.raw_hist)  \
			$(ANALYSIS_SUBSETS:%=analysis.dir/cai_%.cumul_hist)  \
			$(ANALYSIS_SUBSETS:%=analysis.dir/cai_%_kl.matrix) 

cai-hook: $(TARGETS_ANALYSIS_CAI)

####################################################################
## the normalized histogram
analysis.dir/cai_%.hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select="$(ANALYSIS_FIELD) AS $${genome1}" \
			--input-file-genes=bias_$${genome1}/$(ANALYSIS_FILE_GENES) |\
		$(ANALYSIS_CMD_FILTER) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--column=2 \
			--min-value=0.0 \
			--bin-size=0.02 \
		> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--normalize \
		--format-value="%6.4f" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

####################################################################
## the unnormalized histogram
analysis.dir/cai_%.raw_hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select="$(ANALYSIS_FIELD) AS $${genome1}" \
			--input-file-genes=bias_$${genome1}/$(ANALYSIS_FILE_GENES) |\
		$(ANALYSIS_CMD_FILTER) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--column=2 \
			--min-value=0.0 \
			--bin-size=0.02 \
		> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--format-value="%i" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

####################################################################
## the unnormalized histogram / cumulative
analysis.dir/cai_%.cumul_hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select="$(ANALYSIS_FIELD) AS $${genome1}" \
			--input-file-genes=bias_$${genome1}/$(ANALYSIS_FILE_GENES) |\
		$(ANALYSIS_CMD_FILTER) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--column=2 \
			--normalize \
			--min-value=0.0 \
			--bin-size=0.02 \
			--cumulative \
		> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--format-value="%6.4f" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

####################################################################
## Kull-back leibler matrix
analysis.dir/cai_%_kl.matrix: analysis.dir/cai_%.raw_hist
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)compare_histograms.py \
		--method=kl \
		--pseudocounts=1 \
		--number-format="%6.5f" \
		< analysis.dir/cai_$*.raw_hist |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--asymmetric \
		--row-names=$(NAMES_COMMA) \
		--col-names=$(NAMES_COMMA) > $@
	$(EPILOG)

####################################################################
analysis.dir/cai_%.stats:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		printf "category\t%s\n" $${genome1} > $@.tmp_$${genome1}; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select="$(ANALYSIS_FIELD) AS $${genome1}" \
			--input-file-genes=bias_$${genome1}/$(ANALYSIS_FILE_GENES) |\
		$(ANALYSIS_CMD_FILTER) |\
		grep -v "#" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--format="%6.4f" |\
		grep -v "category" >> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"category" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## get total intronic GC
#########################################################################
analysis.dir/selected.total:
	$(PRELOG)
	@printf "schema\t" > $@; 
	@grep "id" bias_$(PARAM_GENOME_MASTER)/selected.shannon | cut -f 2- >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "%s\t" $${genome} >> $@; \
		grep "total" bias_$${genome}/selected.shannon | cut -f 2- >> $@; \
	done;
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
# Distribution of values for the selected set
########################################################################
analysis.dir/selected_relml%.hist: PARAM_ANALYSIS_BIN_SIZE=0.05

analysis.dir/selected_%.hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		cat bias_$${genome}/selected.shannon |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py $* |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=$(PARAM_ANALYSIS_BIN_SIZE) |\
		perl -p -e "s/$*/$${genome}/" > $@.tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--normalize \
		--format-value="%6.4f" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

analysis.dir/selected_%.stats:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "category\t%s\n" $${genome} > $@.tmp_$${genome}; \
		cat bias_$${genome}/selected.shannon |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py $* |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--format="%6.4f" |\
		grep -v "category" >> $@.tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"category" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	$(EPILOG)

analysis.dir/selected.counts:
	$(PRELOG)
	@printf "species\tcounts\n" > $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "%s\t%s\n" $${genome} `wc -l < bias_$${genome}/filter` >> $@; \
	done
	$(EPILOG)
#########################################################################
#########################################################################
#########################################################################
#########################################################################
# Distribution of ENC values
#########################################################################
analysis.dir/enc_full.hist:      ANALYSIS_CMD_FILTER=cat
analysis.dir/enc_selected.hist:  ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --columns=1 | awk 'BEGIN { printf("GENE\tENC\n"); } { print }'
analysis.dir/enc_selected.stats: ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/filter --columns=1 

analysis.dir/enc_%.hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		cat bias_$${genome1}/all.enc |\
		$(ANALYSIS_CMD_FILTER)  |\
		grep -v "#" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=1.0 |\
		perl -p -e "s/ENC/$${genome1}/" > $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--normalize \
		--format-value="%6.4f" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

analysis.dir/enc_%.stats:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		printf "category\t%s\n" $${genome1} > $@.tmp_$${genome1}; \
		cat bias_$${genome1}/all.enc |\
		$(ANALYSIS_CMD_FILTER)  |\
		grep -v "#" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py |\
		grep -v "category" >> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"category" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
# Get distribution of sequence parameters
#########################################################################

ml-hook: analysis.dir/ml_full.hist

analysis.dir/shannon_entropy_%.hist:  ANALYSIS_COLUMN=entropy
analysis.dir/shannon_entropy_%.hist:  ANALYSIS_HIST_OPTIONS=--min-value=0.0 --bin-size=1.0

analysis.dir/shannon_uni_relml_%.hist:  ANALYSIS_COLUMN=uni_relml 
analysis.dir/shannon_uni_relml_%.hist:  ANALYSIS_HIST_OPTIONS=--min-value=0.0 --bin-size=0.05

analysis.dir/shannon_uni_kl_%.hist:  ANALYSIS_COLUMN=uni_kl
analysis.dir/shannon_uni_kl_%.hist:  ANALYSIS_HIST_OPTIONS=--min-value=0.0 --bin-size=0.1 --max-value=20.0

analysis.dir/shannon_uni_entropy_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_uni_entropy_dominant.hist:	    ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_uni_entropy_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

analysis.dir/shannon_uni_relml_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_uni_relml_dominant.hist:     ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_uni_relml_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

analysis.dir/shannon_uni_kl_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_uni_kl_dominant.hist:     ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_uni_kl_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

analysis.dir/shannon_pref_relml_%.hist:  ANALYSIS_COLUMN=pref_relml 
analysis.dir/shannon_pref_relml_%.hist:  ANALYSIS_HIST_OPTIONS=--min-value=0.0 --bin-size=0.05

analysis.dir/shannon_pref_kl_%.hist:  ANALYSIS_COLUMN=pref_kl
analysis.dir/shannon_pref_kl_%.hist:  ANALYSIS_HIST_OPTIONS=--min-value=0.0 --bin-size=0.1 --max-value=20.0

analysis.dir/shannon_pref_entropy_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_pref_entropy_dominant.hist:	ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_pref_entropy_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

analysis.dir/shannon_pref_relml_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_pref_relml_dominant.hist:     ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_pref_relml_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

analysis.dir/shannon_pref_kl_selected.hist:     ANALYSIS_FILE_FILTER=filter
analysis.dir/shannon_pref_kl_dominant.hist:     ANALYSIS_FILE_FILTER=dominant.set
analysis.dir/shannon_pref_kl_nondominant.hist:  ANALYSIS_FILE_FILTER=nondominant.set

ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --apply=bias_$${genome1}/$(ANALYSIS_FILE_FILTER) --columns=1 | awk 'BEGIN { printf("GENE\tdummy\n"); } { print }'

define RUN_SHANNON_HISTOGRAM
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py "id" $(ANALYSIS_COLUMN) \
		< bias_$${genome1}/selected.shannon |\
		grep -v -e "#" -e "total" |\
		$(ANALYSIS_CMD_FILTER) |\
		cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			$(ANALYSIS_HIST_OPTIONS) |\
		perl -p -e "s/dummy/$${genome1}/" > $@.tmp_$${genome1} ; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--normalize \
		--format-value="%6.4f" \
		--format-bin="%5.2f" \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)
endef

analysis.dir/shannon_%.hist: 
	$(RUN_SHANNON_HISTOGRAM)

analysis.dir/enc_%.stats:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		printf "category\t%s\n" $${genome1} > $@.tmp_$${genome1}; \
		cat bias_$${genome1}/all.enc |\
		$(ANALYSIS_CMD_FILTER)  |\
		grep -v "#" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py |\
		grep -v "category" >> $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@.tmp_* |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	"category" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

analysis.dir/distances_%:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		grep -v "total" bias_$${genome1}/selected.shannon |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
			pref_$* uni_$* |\
		python $(DIR_SCRIPTS_TOOLS)plot_data.py \
			--xrange=0,25 --yrange=0,16 \
			--hardcopy=analysis.dir/distances_$*_$${genome1}.png; \
	done
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Summary for all selected entries 
#########################################################################
analysis.dir/shannon.summary:
	$(PRELOG)
	@printf "genome\t%s" > $@
	grep -e "id" bias_$(PARAM_GENOME_MASTER)/selected.shannon >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		printf "%s\t%s" $${genome1} >> $@; \
		grep -e "total" bias_$${genome1}/selected.shannon >> $@; \
	done
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Summary for all selected entries 
#########################################################################
PARAM_GC3_MIN_LENGTH?=0
analysis.dir/pGC3.stats:
	$(PRELOG)
	@printf "id\t" >> $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@_tmp
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "%s\t" $${genome} >> $@_tmp; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py length pgc3 \
		< bias_$${genome}/selected.shannon |\
		awk '$$1 >= $(PARAM_GC3_MIN_LENGTH) {printf ("%s\n", $$2);}' |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--flat --format="%6.4f" |\
		grep -v "#" >> $@_tmp; \
	done
	@$(CMD_TRANSLATE) < $@_tmp > $@
	@rm -f $@_tmp
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## final weights across seven species
#########################################################################
analysis.dir/weights.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-trace=bias_$${genome1}/selected.acai_trace \
			--weights=final-list |\
			perl -p -e "s/WEIGHT/$${genome1}/" > $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@.tmp_* |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## results for orthologs
## Currently uses step6.orthologs and mapping through pairwise comparison to
## dmel. Make this more general using an orthologs.map
orthologs-hook: analysis.dir/orthologs.shannon \
	analysis.dir/orthologs.enc \
	analysis.dir/orthologs.all 

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Summary for all selected entries 
##
## Ortholog sets are created by selecting orthologs for master genes.
## The normalized bit-score based orthologs are used.
##
## A single gene in the master is represented with
##	multiple transcripts within a gene
##      possible multiple transcripts to orthologous transcripts
## 
## This procedure simply averages over all of them.
##
## Temporary files:
##    tmp1: ortholog matches between master transcripts to target genes
##    tmp2: bias per gene
#########################################################################
analysis.dir/orthologs.shannon: orthologs.map
	$(PRELOG)
	@printf "genome\t%s" > $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$(PARAM_GENOME_MASTER); \
		genome2=$${genomes[$$x]} ; \
		if [ ! -e $@_tmp_$${genome2} ]; then \
		    if [ "$${genome1}" != "$${genome2}" ]; then \
			awk -v g1="$${genome1}" -v g2="$${genome2}" \
			'{      if ( match($$1, g1) && match($$2, g2) ) { a = $$2; b = $$1; } \
			   else if ( match($$2, g1) && match($$1, g2) ) { a = $$1; b = $$2; } \
			   else { next; } \
			   split( b, s, "$(PARAM_SEPARATOR)"); b = s[3]; \
			   printf("%s\t%s\n", a, b); \
			 }' \
			< $< > $@_tmp1; \
			grep "id" bias_$${genome2}/all.shannon |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
				--apply=$@_tmp1 \
				--column=1 \
				--filter \
			< bias_$${genome2}/all.shannon |\
			grep -v "#" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 >> $@_tmp_$${genome2}; \
		    else \
			grep "id" bias_$${genome2}/all.shannon |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			awk '/$(PARAM_GENOME_MASTER)/ { split($$1, a, "$(PARAM_SEPARATOR)"); $$1=a[3]; print;}' \
			< bias_$${genome2}/all.shannon | perl -p -e "s/ /\t/g" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 > $@_tmp_$${genome2}; \
		    fi; \
		fi; \
		rm -f $@_tmp1 $@_tmp2; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@_tmp_* > $@
	@rm -f $@_tmp_*
	$(EPILOG)

ANALYSIS_GROUPS_TARGETS_LENGTHS=$(PARAM_SRC_SCHEMAS:%=%_length)
ANALYSIS_GROUPS_TARGETS=$(PARAM_SRC_SCHEMAS:%=%_$*)

## extract a set of fields from the table
analysis.dir/orthologs.shannon_%: analysis.dir/orthologs.shannon
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
		id $(ANALYSIS_GROUPS_TARGETS) \
	< $^> $@

## extract a set of fields from the table
## make them length filtered
PARAM_ANALYSIS_THRESHOLD_RELATIVE_LENGTH=0.90
analysis.dir/orthologs.filter_shannon_%: analysis.dir/orthologs.shannon
	@cat $^ |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
		id $(ANALYSIS_GROUPS_TARGETS_LENGTHS) $(ANALYSIS_GROUPS_TARGETS) |\
	awk -v ngenomes="$(PARAM_NUM_GENOMES)" \
	        '/^id/ { print; next; } \
		/^#/ || /na/ { next; } \
		{a=$$2; f=0; \
		for (x = 3; x < 2+ngenomes;++x) { \
			if ( ((a > 0 ) && ($$x / a) < $(PARAM_ANALYSIS_THRESHOLD_RELATIVE_LENGTH)) ||\
		     	(($$x > 0) && (a / $$x) < $(PARAM_ANALYSIS_THRESHOLD_RELATIVE_LENGTH) )) { f = 1; } \
			} \
		if (f == 0) { print; } }' > $@

#########################################################################
#########################################################################
#########################################################################
## retrieve a set of orthologs that pass the length filter.
#########################################################################
analysis.dir/orthologs.filter_length: analysis.dir/orthologs.shannon
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--field-compare="%s_length" \
		--field-extract="%s_length" \
		--filter-min-ratio=$(PARAM_ANALYSIS_FILTER_LENGTH_MIN_RATIO) \
		--filter-max-ratio=$(PARAM_ANALYSIS_FILTER_LENGTH_MAX_RATIO) \
		--output-format=table \
		--output-field=val \
		--schemas=$(GENOMES_COMMA) \
	< $^ |\
	grep -v "\bna\b" > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Summary for all selected entries: ENC and CAI
##
## This procedure average per gene. If there are several orthologs, again
## the average is taken
## tmp1: ortholog matches between master transcripts to target genes
## tmp2: bias per gene
#########################################################################
analysis.dir/orthologs.enc: orthologs.map
	$(PRELOG)
	@printf "genome\t%s" > $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$(PARAM_GENOME_MASTER); \
		genome2=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py GENENAME CAI CAIREF CAIBIAS ENC \
		< bias_$${genome2}/all.data > $@_tmp0; \
		if [ ! -e $@_tmp_$${genome2} ]; then \
		    if [ "$${genome1}" != "$${genome2}" ]; then \
			awk -v g1="$${genome1}" -v g2="$${genome2}" \
			'{      if ( match($$1, g1) && match($$2, g2) ) { a = $$2; b = $$1; } \
			   else if ( match($$2, g1) && match($$1, g2) ) { a = $$1; b = $$2; } \
			   else { next; } \
			   split( b, s, "$(PARAM_SEPARATOR)"); b = s[3]; \
			   printf("%s\t%s\n", a, b); \
			 }' \
			< $< > $@_tmp1; \
			grep "^GENENAME" $@_tmp0 |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
			--apply=$@_tmp1 \
			--column=1 \
			--filter \
			< $@_tmp0 |\
			grep -v "#" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 >> $@_tmp_$${genome2}; \
		    else \
			grep "^GENENAME" $@_tmp0 |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			awk '/$(PARAM_GENOME_MASTER)/ { split($$1, a, "$(PARAM_SEPARATOR)"); $$1=a[3]; print;}' \
			< $@_tmp0 | perl -p -e "s/ /\t/g" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 > $@_tmp_$${genome2}; \
		    fi; \
		fi; \
		rm -f $@_tmp0 $@_tmp1 $@_tmp2; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@_tmp_* > $@
	@rm -f $@_tmp_*
	$(EPILOG)

analysis.dir/orthologs.all: analysis.dir/orthologs.shannon analysis.dir/orthologs.enc
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		analysis.dir/orthologs.shannon analysis.dir/orthologs.enc > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Collect results for random runs.
## Note that these are not normalized for orthologs.
#########################################################################
analysis.dir/orthologs.random:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--input-file-codons=bias_$${genome}/random.acai_codons \
		--input-file-genes=bias_$${genome}/random.acai_genes \
		--input-file-trace=bias_$${genome}/random.acai_trace \
		--select="GENELENGTH AS $${genome}_length,CAIEXT AS $${genome}_CAIRAND" > $@_$${genome}_tmp; \
		for (( y = 1; y <= $(PARAM_RANDOM_ITERATIONS); ++y )); do \
			python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-codons=bias_$${genome}/random$${y}.acai_codons \
			--input-file-genes=bias_$${genome}/random$${y}.acai_genes \
			--input-file-trace=bias_$${genome}/random$${y}.acai_trace \
			--select="CAIEXT AS $${genome}_CAIRAND$${y}" > $@_$${genome}_tmp_$${y}; \
		done; \
		python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
			$@_$${genome}_tmp $@_$${genome}_tmp_* > $@_$${genome}; \
		rm -f $@_$${genome}_tmp*; \
	done;
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# histogram over a CAIBIAS with length filtered orthologs
analysis.dir/orthologs_%_length.hist: analysis.dir/orthologs.all analysis.dir/orthologs.filter_length 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--filename-subset=analysis.dir/orthologs.filter_length \
		--field-extract="%s_$*" \
	        --output-format="table" \
	        --format="%6.4f" \
		--schemas=$(GENOMES_COMMA) \
		< analysis.dir/orthologs.all |\
	grep -v "#" |\
	cut -f 2- |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--normalize \
		--min-value=0.0 \
		--bin-size=0.02 |\
	$(CMD_SUBSTITUTE) > $@
	$(EPILOG)

# the same histogram as above, but allow all orthologs
analysis.dir/orthologs_%.hist: analysis.dir/orthologs.all 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--field-extract="%s_$*" \
	        --output-format="table" \
	        --format="%6.4f" \
		--schemas=$(GENOMES_COMMA) \
		< analysis.dir/orthologs.all |\
	grep -v -e "#" -e "\bna\b" |\
	cut -f 2- |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--normalize \
		--min-value=0.0 \
		--bin-size=0.02 |\
	$(CMD_SUBSTITUTE) > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## calculate stats for all genomes
#########################################################################
analysis.dir/orthologs_%.stats: analysis.dir/orthologs.all 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--field-extract="%s_$*" \
	        --output-format="table" \
	        --format="%6.4f" \
		--schemas=$(GENOMES_COMMA) \
	< $^ |\
	grep -v -e "#" -e "\bna\b" |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--flat \
		--column=all |\
	$(CMD_SUBSTITUTE) > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Calculate correlation between CAI values
#########################################################################
analysis.dir/orthologs_%.table: analysis.dir/orthologs.all
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--filename-subset=analysis.dir/orthologs.filter_length \
		--field-extract="%s_$*" \
	        --output-format="table" \
	        --format="%6.4f" \
		--schemas=$(GENOMES_COMMA) \
	< $^ |\
	grep -v "\bna\b" |\
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
		--file=$@_tmp \
		--stats=pearson \
		--columns=all-but-first |\
	grep -v "#" > $@
	$(EPILOG)


analysis.dir/orthologs_cai.matrix: MATRIX_OPTIONS=

%.matrix: %.table
	$(PRELOG)
	@cut -f 1,2,3 $*.table |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	$(MATRIX_OPTIONS) \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) |\
	$(CMD_SUBSTITUTE) > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## final weights across seven species
## without codons, that are preferred in all species
#########################################################################
analysis.dir/unequal_weights.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-trace=bias_$${genome1}/selected.acai_trace \
			--weights=final-list |\
			perl -p -e "s/WEIGHT/$${genome1}/" > $@.tmp_$${genome1}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@.tmp_* |\
	awk '/^#/ || $$2 ~ /^[^0-9]/ { print; next; } \
	     { sum=0; for (x = 2; x <= NF; ++x) \
			{ sum+=$$x; }; \
		if (sum > 0 && sum < NF - 1) { print; };}' |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@.tmp_*
	$(EPILOG)

#########################################################################
## do not include the all 1's, as they might bias the result to higher
## correlations
## To be correct: should be included in each pairwise comparison
analysis.dir/unequal_weights_pearson.table: analysis.dir/unequal_weights.table
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
		--file=<(grep -v "#" analysis.dir/unequal_weights.table | cut -f 2-) \
		--stats=pearson > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Tree of codon weight distances (euclidean)
#########################################################################
analysis.dir/%.tree:
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
		--method=euclid \
		--headers \
	< analysis.dir/$*.table --format="%6.4f" |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--full2sparse |\
	tree_upgma -i p > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## list of 1% of dominantly biased genes
#########################################################################
analysis.dir/dominant_set.list:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select=CAICLASS \
			--dominant-set=0.1 \
			--input-file-genes=bias_$${genome1}/selected.acai_genes |\
			grep -v -e "#" >> $@_$${genome1} ; \
	done
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Comparison of reference weights to computed weights
#########################################################################
analysis.dir/weights_difference:
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		<(perl -p -e "s/,/\n/g" < reference.weights | nl -nln) \
		<(perl -p -e "s/,/\n/g" < bias_$(PARAM_GENOME_MASTER)/selected.weights | nl -nln) |\
	awk 'BEGIN { printf("codon\treference\tcomputed\tabs(difference)\tpercent(difference)\n"); }\
		!/^#/  {a = ($$2 - $$3 < 0) ? ($$3 - $$2) : ($$2 - $$3); \
			if ($$3 > 0 && $$2 > 0) { d = a / ( ($$3 > $$2) ? $$3 : $$2) } else { d = 0; } \
			printf("%s\t%f\t%f\t%f\t%f\n", $$1, $$2, $$3, a, d);\
			}' > $@
	$(EPILOG)

analysis.dir/weights_difference.png: analysis.dir/weights_difference
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
		--headers analysis.dir/weights_difference \
		--hardcopy=$@ \
	< analysis.dir/weights_difference > /dev/null
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Comparing mean/median of shuffled sequences
## % is either "mean" or "median" or "stddev"
#########################################################################
analysis.dir/shuffled_%.table:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		printf "run\t%s\n" $${genome1} > $@_$${genome1}; \
		grep "$*" bias_$${genome1}/shuffled_acai.hist.dir/acai_*.stats |\
		cut -f 2 | nl -nln >> $@_$${genome1} ; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--sort="$(GENOMES_COMMA)" \
		$@_* > $@
	@rm -f $@_*
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Analysis of cai for linear effects model
#########################################################################
## print out effects. The master genome is replace with aaa, so that it
## is used as the reference in the linear effects model
analysis.dir/orthologs_%.effects:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--field-extract="%s_$*" \
		--schemas="$(GENOMES_COMMA)" \
		--output-format="list" \
		--remove-na \
	< analysis.dir/orthologs.all |\
	perl -p -e "s/$(PARAM_GENOME_MASTER)/aaa/;" |\
	grep -v "#" > $@
	$(EPILOG)

# analysis.dir/effects.enc:
# 	$(PRELOG)
# 	@printf "genome\tbias\n" > $@
# 	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
# 	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
# 		genome=$${genomes[$$x]} ; \
# 		python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
# 			--apply=bias_$${genome}/filter \
# 			< bias_$${genome}/all.enc |\
# 			awk -v g=$${genome} \
# 			'$$2 > 0 && $$2 < 61 { printf("%s\t%f\n", g, $$2);}' \
# 		>> $@; \
# 	done
# 	$(EPILOG)

# analysis.dir/effects.cai:
# 	$(PRELOG)
# 	@printf "genome\tbias\n" > $@
# 	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
# 	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
# 		genome=$${genomes[$$x]} ; \
# 		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
# 		--select=CAICLASS \
# 		--input-file-genes=bias_$${genome}/selected.acai_genes |\
# 		awk -v g=$${genome} \
# 		'!/^#/ && !/CAICLASS/ { printf("%s\t%f\n", g, $$2);}' \
# 		>> $@; \
# 	done
# 	$(EPILOG)

# analysis.dir/effects.cairef:
# 	$(PRELOG)
# 	@printf "genome\tbias\n" > $@
# 	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
# 	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
# 		genome=$${genomes[$$x]} ; \
# 		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
# 		--select=CAIEXT \
# 		--input-file-genes=bias_$${genome}/external.acai_genes |\
# 		python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
# 			--apply=bias_$${genome}/filter \
# 			--column=1 |\
# 		awk -v g=$${genome} \
# 		'!/^#/ && !/CAIEXT/ { printf("%s\t%f\n", g, $$2);}' \
# 		>> $@; \
# 	done
# 	$(EPILOG)

# analysis.dir/effects.caibias:
# 	$(PRELOG)
# 	@printf "genome\tbias\n" > $@
# 	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
# 	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
# 		genome=$${genomes[$$x]} ; \
# 		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
# 		--select=CAIEXT \
# 		--input-file-genes=bias_$${genome}/biased.acai_genes |\
# 		python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
# 			--apply=bias_$${genome}/filter \
# 			--column=1 |\
# 		awk -v g=$${genome} \
# 		'!/^#/ && !/CAIEXT/ { printf("%s\t%f\n", g, $$2);}' \
# 		>> $@; \
# 	done
# 	$(EPILOG)

# ## effects based on ribosomal criterion: z-score
# analysis.dir/effects.ribosomes_ml3:
# 	$(PRELOG)
# 	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
# 		--filename-subset=analysis.dir/orthologs.filter_length \
# 		--filename-identifiers=ribosomes/flybase/ribosomes.genes \
# 		--field-extract="%s_ml3" \
# 		--schemas="$(GENOMES_COMMA)" \
# 		--output-format="list" \
# 	< analysis.dir/orthologs.all > $@
# 	$(EPILOG)

# ## effects based on ribosomal criterion: z-score
# analysis.dir/effects.ribosomes_enc:
# 	$(PRELOG)
# 	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
# 		--filename-subset=analysis.dir/orthologs.filter_length \
# 		--filename-identifiers=ribosomes/flybase/ribosomes.genes \
# 		--field-extract="%s_ENC" \
# 		--schemas="$(GENOMES_COMMA)" \
# 		--output-format="list" \
# 	< analysis.dir/orthologs.all > $@
# 	$(EPILOG)

###################################################
###################################################
###################################################
## collect data for export
###################################################
export:
	$(PRELOG)
	$(MAKE) export.dir
	for x in bias_*; do \
		species=$${x%.dir}; \
		species=$${species#bias_}; \
		cp $${x}/all.data export.dir/$${species}.indices; \
		cp $${x}/all.shannon export.dir/$${species}.data; \
	done
	cp analysis.dir/orthologs.all export.dir/orthologs.data
	cp ribosomes.genes export.dir/ribosomes.genes
	cd export.dir; tar -cvzf all.tgz *.{data,indices,genes}
	gzip export.dir/*.{data,indices,genes}
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Obsolete stuff:

#########################################################################
## cai per orthologous cluster
analysis.dir/cai_per_cluster.table:
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--invert-map \
			--map=components.map \
			--select=CAICLASS \
			--input-file-genes=bias_$${x}/all.acai_genes \
		> $@.tmp__$${genome1}; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py > $@
	rm -f $@_*.tmp

cai_for_selected_pdmel:
	python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--invert-map \
		--map=components.map \
		--select=CAICLASS \
		--input-file-genes=input_pdmel_vs_dmel.cai_genes |\
	grep -f filter_ks |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=<(grep pdmel_vs_dmel < components.map) --column=1 --echo > $@


## cai values based on D_mel for all species
cai_melanogaster.table:
	for x in input_*.cai_genes; do  \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--invert-map \
			--map=components.map \
			--select=caiext \
			--input-file-genes=$$x \
		> $@_$$x.tmp; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--headers=`ls $@_*.tmp | perl -p -e "s/$@_input_//g; s/.cai_genes//; s/.tmp//g; s/\s/,/g;"` \
		`ls -1 $@_*.tmp`  \
		> $@
	rm -f $@_*.tmp

##########################################################################################
##########################################################################################
%_filtered: %
	for file in $*/pd*; do  \
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --column=2 --invert < $${file} |\
		grep -f filter > $${file}.filtered; \
	done

##########################################################################################
##########################################################################################
##########################################################################################
## tables of cai values versus ks-values for each gene per organism
## Note: a file called input.kaks.gz must be in this directory
##########################################################################################

##########################################################################################
## Get CAI versus ks (on a gene level)
## For each species and each get its CAI values together with the ks values to another 
## species
analysis.dir/cai_vs_ks:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select=caiclass \
			--input-file-genes=bias_$${genome1}/all.acai_genes \
			> $@_tmp.$${genome1}; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	$@_tmp.* input.kaks.gz > $@/$@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < $@/$@ |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.cai_vs_ks" 
	rm -f $@/tmp
	$(EPILOG)

## tables of cai values versus ks-values for each gene per organism
cai_vs_d4: input.d4
	rm -rf $@; mkdir $@
	for x in input_*.cai_genes; do  \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--select=caiclass \
			--input-file-genes=$$x \
			>> $@/tmp; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	$@/tmp input.d4 > $@/$@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < $@/$@ |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.cai_vs_d4" 


## tables of enc values versus ks-values for each gene per organism
enc_vs_ks: input.ks
	rm -rf $@; mkdir $@
	cat input_*.enc | grep -v "#" > $@.tmp
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	$@/tmp input.ks > $@/$@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < $@/$@ |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.enc_vs_ks" 
	rm -f $@/tmp

## tables of cai values versus ks-values for each gene per organism
enc_vs_d4: input.d4
	rm -rf $@; mkdir $@
	cat input_*.enc | grep -v "#" > $@/tmp
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	$@/tmp input.d4 > $@/$@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < $@/$@ |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.enc_vs_d4" 
	rm -f $@/tmp

## all pairwise combinations of all organisms
## as this is a symmetric matrix (org1->org2 and org2->org1), only keep one direction.
ks_plots: input.ks
	rm -rf $@; mkdir $@
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --column=1 --invert --echo < input.ks |\
	awk 'BEGIN { printf("CLUSTER\tPAIR\tDIST\n"); } \
		/^\t/ { split($$0, orgs, "\t"); next; } \
		  { split($$NF, k, "$(PARAM_SEPARATOR)");  \
			for (x = 2; x < NF; ++x) { \
			   if (orgs[x] < k[1]) { \
			   	printf("%s\t%s-%s\t%s\n", $$1, k[1], orgs[x], $$x) } }; } ' |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=2 --header --pattern-output="$@/%s.ks"
	rm -f $@/tmp;
	for file1 in $@/*-*.ks; do \
		for file2 in $@/*-*.ks; do \
			python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
				$$file1 $$file2 >> $@/tmp; \
		done \
	done
	rm -f $@/*.pairs
	awk '!/^#/ && $$2 < $$4 { printf("%s-%s\t%s\t%s\t%s\n", $$2, $$4, $$1, $$3, $$5); }' < $@/tmp |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --pattern-output="$@/%s.pairs" --remove-key 	
	rm -f $@/tmp

## all pairwise combinations of all organisms
## as this is a symmetric matrix (org1->org2 and org2->org1), only keep one direction.
d4_plots: input.d4
	rm -rf $@; mkdir $@
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --column=1 --invert --echo < input.d4 |\
	awk 'BEGIN { printf("CLUSTER\tPAIR\tDIST\n"); } \
		/^\t/ { split($$0, orgs, "\t"); next; } \
		  { split($$NF, k, "$(PARAM_SEPARATOR)");  \
			for (x = 2; x < NF; ++x) { \
			   if (orgs[x] < k[1] && $$x != "na" ) { \
			   	printf("%s\t%s-%s\t%s\n", $$1, k[1], orgs[x], $$x) } }; } ' |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=2 --header --pattern-output="$@/%s.d4" 
	rm -f $@/tmp;
	for file1 in $@/*-*.d4; do \
		for file2 in $@/*-*.d4; do \
			python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
				$$file1 $$file2 >> $@/tmp; \
		done \
	done
	rm -f $@/*.pairs
	awk '!/^#/ && $$2 < $$4 { printf("%s-%s\t%s\t%s\t%s\n", $$2, $$4, $$1, $$3, $$5); }' < $@/tmp |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --pattern-output="$@/%s.pairs" --remove-key 	
	rm -f $@/tmp

ks_vs_ks:
	rm -rf $@; mkdir $@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < input.ks |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.ks_vs_ks" 

d4_vs_d4:
	rm -rf $@; mkdir $@
	awk '/^#/ { next; }  \
	     $$2 ~ /^[^0-9]/ { printf("ORG\t"); print; } \
	     { split($$1, k, "$(PARAM_SEPARATOR)"); \
	       printf("%s\t", k[1]); print; } ' < input.d4 |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.d4_vs_d4" 


ks_vs_d4:
	rm -rf $@; mkdir $@
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	input.ks input.d4 |\
	awk '/^#/ { next; }  \
	     /^\t/ { print; next } \
	       { split($$1, k, "$(PARAM_SEPARATOR)"); \
	         printf("%s\t", k[1]); print; } ' |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --header --pattern-output="$@/%s.ks_vs_d4"  --remove-key

enc_vs_ks_filtered: 
	for file in enc_vs_ks/pd*; do  \
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --column=2 --invert < $${file} |\
		grep -f filter > $${file}.filtered; \
	done


enc_vs_d4_filtered: 
	for file in enc_vs_d4/pd*; do  \
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --column=2 --invert < $${file} |\
		grep -f filter > $${file}.filtered; \
	done


.PHONY: ks_plots d4_plots enc_vs_d4 enc_vs_ks cai_vs_ks cai_vs_d4 ks_vs_d4


%.stats: %.table
	python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
		--column=2,3,4,5,6,7,8 \
		--file=<(awk '!/^\t/' $*.table) \
		--hardcopy=$*.png \
		--plot=pairs \
		--stats=correlation > $@

input.coloured: input.d4
	awk 'BEGIN{ printf("cluster\tcolour\n"); }  \
		/^\t/ {next;} \
		($$6 < 0.5 && $$2 > 1 ) \
			{ printf("%s\tred\n", $$1); next} \
		{ printf("%s\tgreen\n", $$1); } ' < input.d4 |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --invert --column=1 > $@.tmp2
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=components.map --invert --column=1 < input.d4 > $@.tmp1
	python $(DIR_SCRIPTS_TOOLS)merge_tables.py --table=input.coloured.tmp1 --table=input.coloured.tmp2 |\
	cut -f 1-8,10 > $@
	rm -f $@.tmp1 $@.tmp2

# make a table for each orthology cluster with the following information:
# ks for pmel-pdyak, pdana-pdpse, pdvir-pdmoj, codon bias for all seven species
#		<(cut -f 1,3 ks_plots/pdvir_vs_dmel-pdmoj_vs_dmel.ks) 
# normalize d4 and ks values column-wise
ks_cai.veo:
	echo -e "cluster\tpdvir-pdmoj\tpdpse-pdana\tpdyak-pdmel\tpdvir"
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		<(cut -f 1,3 ks_plots/pdpse_vs_dmel-pdana_vs_dmel.ks | awk '/CLUSTER/ || $$2 <= $(PARAM_MAX_KS)' | python ~/t/modify_table.py --columns=2  --method=normalize --echo --replace) \
		<(cut -f 1,3 ks_plots/pdyak_vs_dmel-pdmel_vs_dmel.ks | awk '/CLUSTER/ || $$2 <= $(PARAM_MAX_KS)' | python ~/t/modify_table.py --columns=2  --method=normalize --echo --replace) \
		<(grep -v "GENENAME" cai_per_cluster.table) |\
		awk '!/cluster/ || ( $$2 <= 5 && $$3 <= 5 && $$2 != "na" && $$3 != "na")' |\
	python $(DIR_SCRIPTS_TOOLS)tbl2veo.py |\
	grep -v "#" |\
	perl -pe 's:\n:\r\n:g;' \
> $@

d4_cai.veo:
	echo -e "cluster\tpdvir-pdmoj\tpdpse-pdana\tpdyak-pdmel\tpdvir"
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		<(cut -f 1,3 d4_plots/pdpse_vs_dmel-pdana_vs_dmel.d4 | awk '/CLUSTER/ || $$2 <= $(PARAM_MAX_D4)' | python ~/t/modify_table.py --columns=2  --method=normalize --echo --replace) \
		<(cut -f 1,3 d4_plots/pdyak_vs_dmel-pdmel_vs_dmel.d4 | awk '/CLUSTER/ || $$2 <= $(PARAM_MAX_D4)' | python ~/t/modify_table.py --columns=2  --method=normalize --echo --replace) \
		<(grep -v "GENENAME" cai_per_cluster.table) |\
		awk '!/cluster/ || ($$2 > 0 && $$3 > 0 && $$2 != "na" && $$3 != "na")' |\
	python $(DIR_SCRIPTS_TOOLS)tbl2veo.py |\
	grep -v "#" |\
	perl -pe 's:\n:\r\n:g;' \
	> $@

cai_for_pdmel:
	python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--invert-map \
		--map=components.map \
		--select=caiclass \
		--input-file-genes=input_pdmel_vs_dmel.cai_genes |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=<(grep pdmel_vs_dmel < components.map) --column=1 --echo > $@


#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
