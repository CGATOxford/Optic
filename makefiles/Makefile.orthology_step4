################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_step4 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##################################################################################
## Step4: orthology assignments
STEP4_INPUT_SEED=step3.seed.links
STEP4_INPUT_ALL=step3.scaled.links
STEP4_INPUT_BESTHITS=step3.besthits.links

STEP4_TARGETS=$(wildcard step4_*-*)

step4: step3 step4.prepare step4.run step4.finish 
	touch $@

step4.run: step4.prepare
	$(PRELOG)
	$(MAKE) -C step4.dir -k -j $(PARAM_STEP4_NUMJOBS) step4-hook
	touch $@
	$(EPILOG)

step4-hook: $(STEP4_TARGETS)

## run whole thing on cluster, minimal parallelization of subjob
$(STEP4_TARGETS):
	$(CMD_REMOTE_SUBMIT) $(MAKE) -C $@ all CMD_REMOTE_SUBMIT= PARAM_STEP1_NUMJOBS=1 < /dev/null

.PHONY: step4-hook $(STEP4_TARGETS)

#####################################################################################
## create subdirectories for building pairwise orthology sets
## 1. create subdirectories for each pairwise genome combination
## 2. split the input file into by each genome (filename: filtered)
## 3. add links to self to each input file
step4.prepare: $(STEP4_INPUT_SEED)
	$(PRELOG)
	@$(MAKE) step4.dir 
	@genomes=( $(PARAM_GENOMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			target_dir=step4.dir/step4_$${genomes[$$x]}-$${genomes[$$y]}; \
			echo "setting up $${target_dir}" $(TOLOG); \
			if [ ! -e $${target_dir} ]; then \
				mkdir $${target_dir}; \
				touch $${target_dir}/filtered; \
			fi; \
			python src/gpipe/setup.py \
			-f \
			-m orthology \
			-p orthology_$${genomes[$$x]}-$${genomes[$$y]} \
			-d $(CURDIR)/$${target_dir} \
			PARAM_GENOME1=$${genomes[$$x]} \
			PARAM_GENOME2=$${genomes[$$y]} \
			> $${target_dir}/setup.log; \
		done; \
	done
	$(CMD_LOG) "splitting $(STEP4_INPUT_SEED)"
	awk '!/^#/ && $$3 <= $(PARAM_STEP4_MAX_DISTANCE) { \
		printf("%s\t%s\t%s\n", $$1, $$2, ($$3 >= 0) ? $$3 : "0.00"); }' \
	< $(STEP4_INPUT_SEED) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)split_links.py \
		--regex="^([^$(PARAM_SEPARATOR)]+)[$(PARAM_SEPARATOR)]" \
		--targets="$(GENOMES_COMMA)" \
		--output="step4.dir/step4_%s-%s/filtered" \
		--method=prefix \
	> $@
	$(CMD_LOG) "links in each pairwise comparison"
	@wc -l step4.dir/step4_*/filtered $(TOLOG)
	$(EPILOG)

################################################################################
## create summary output from pairwise comparisons and write them to logfile.
step4.run-check: step4.run
	$(PRELOG)
	@genomes=( $(PARAM_GENOMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			target_dir=step4.dir/step4_$${genomes[$$x]}-$${genomes[$$y]}; \
			echo "checking $${target_dir}" $(TOLOG); \
			printf "jobs: started=%i rejoined=%i unchanged=%i\n" \
				`find $${target_dir}/step1.dir/ -name "*.ks" | wc -l` \
				`find $${target_dir}/step1.dir/ -name "*.rejoined" ! -empty | wc -l` \
				`find $${target_dir}/step1.dir/ -name "*.unchanged" ! -empty | wc -l` $(TOLOG); \
			for file in ortho_1_to_1 ortho_1_to_m ortho_m_to_1 orphaned_tax1 orphaned_tax2; do \
				printf "%-20s : %10i\n" $${file} `grep -c -v -e ">" -e "^$$" < $${target_dir}/orthology_$${file}` $(TOLOG); \
			done; \
		done; \
	done
	@touch $@
	$(EPILOG)

################################################
## Five stage orthology clustering
## 1. Pairwise orthology assignment
## 2. Consistency filtering
## 3. Combining clusters by overlap
## 4. Combining clusters by reciprocal blast best hits
## 5. Adding orphans by reciprocal blast best hits
STEP4_STAGES=orthologs \
		orthologs_consistent \
			orthologs_consistent_genes \
				orthologs_consistent_genes_orphans

temp=orthologs_consistent_genes_besthits  orthologs_consistent_genes_besthits_orphans
STEP4_FINAL_STAGE=orthologs_consistent_genes_orphans
STEP4_STAGES_COMPONENTS=$(STEP4_STAGES:%=%.components) 
STEP4_STAGES_STATS=$(STEP4_STAGES:%=%.stats) 

## targets to compute in each stage
STEP4_STAGES_RESULTS=$(STEP4_STAGES_COMPONENTS) \
			$(STEP4_STAGES_STATS) \
			$(STEP4_STAGES:%=%.orgs_per_cluster) \
			$(STEP4_STAGES:%=%.stats_missed_queries) \
			$(STEP4_FINAL_STAGE).pairs 

## create links to result file in parent directory.
step4.finish: step4.run step4.run-check
	$(PRELOG)
	$(MAKE) -C step4.dir step4.finish-hook
	ln -s step4.dir/$(STEP4_FINAL_STAGE).components.map orthologs.components.map
	ln -s step4.dir/$(STEP4_FINAL_STAGE).components.sizes orthologs.components.sizes
	ln -s step4.dir/$(STEP4_FINAL_STAGE).pairs orthologs.pairs
	touch orthology.components
	touch $@
	$(EPILOG)

step4.finish-hook: $(STEP4_STAGES_RESULTS)

step4.stats: $(STEP4_STAGES_STATS)

########################################################################
## a list of all vertices in the input graph and their map to genes
predictions2genes: ../$(STEP4_INPUT_SEED)
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < ../$(STEP4_INPUT_SEED) |\
	awk '!/^#/ { split($$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s|%s\n", $$1, a[1], a[3]);}' > $@
	$(EPILOG)

########################################################################
## Concatenating links from the pairwise orthology assignments
## Links are classified into 1 to many depending on the number of transcripts and genes
orthologs.links: 
	$(PRELOG)
	@rm -f $@
	@find . -name "interpretation" -maxdepth 2 -exec cat {} \; |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/orthologs2list.py \
	--species-regex="^([^$(PARAM_SEPARATOR)]+)\$(PARAM_SEPARATOR)" \
	--gene-regex="^[^$(PARAM_SEPARATOR)]+\$(PARAM_SEPARATOR)[^$(PARAM_SEPARATOR)]+\$(PARAM_SEPARATOR)([^$(PARAM_SEPARATOR)]+)\$(PARAM_SEPARATOR)" |\
	grep -v "#" > $@
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $@ $(TOLOG)
	$(EPILOG)

########################################################################
## building components from a graph. Creates a .map and .sizes file
%.components: %.links
	$(PRELOG)	
	@ga_components -m $@.map -s $@.sizes $*.links > $@
	@touch $@
	$(EPILOG)

#######################################################################
## building a consistency weighted graph
orthologs_consistent.links: orthologs.links
	$(PRELOG)
	@cut -f 1,2,3 orthologs.links > $@_tmp
	@ga_graph -e $(PARAM_STEP4_ORTHOLOGS_MIN_CONSISTENCY_EDGE) $@_tmp > $@_before_filtering
	@rm -f $@_tmp
	@cut -f 1,2,7 $@_before_filtering |\
	awk '!/^#/ {printf("%s\t%s\t%s\t\n%s\t%s\t%s\n", $$1, $$2, $$3, $$2, $$1, $$3); }' |\
	sort -k1,1 -k2,2 -k3,3n |\
	awk '{printf("%s\t%s\t%s\n", $$1, "dummy", $$3);}' |\
	python $(DIR_SCRIPTS_TOOLS)graph_combine_links_redundant.py |\
	awk '$$4 >= $(PARAM_STEP4_ORTHOLOGS_MIN_CONSISTENCY_VERTEX)' > $@_high_consistency_vertices
	@perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl $@_high_consistency_vertices < $@_before_filtering > $@
	$(CMD_LOG) "consistent edges after edge filtering."
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $@_before_filtering $(TOLOG)
	$(CMD_LOG) "consistent edges after vertex filtering."
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $@ $(TOLOG)
	$(EPILOG)


#######################################################################
##
## rejoin clusters with overlapping predictions (transcript clusters)
##
## 1. Build bi-partite graph of clusters to genes
## 2. Write links for genes that maps to two clusters (or more).
##	add self links, so that ga_components prints singletons.
## 	These links will have at least a weight two after combination,
## 	because each cluster has at least two members.
## 3. Sort the results and combine links. Edge weight is number of shared genes. 
## 4. Weight links by total number of genes in cluster. Take maximum of
## 	adjacent vertices to set edge weight
## 5. Filter graph and keep links with at least $(PARAM_STEP4_ORTHOLOGS_MIN_PERCENT_OVERLAP) 
##	shared genes.
## 6. Cluster graph by components and map old clusters to new clusters.
%_genes.clusters2genes.links: %.components predictions2genes
	$(PRELOG)
	@grep -v "#" < $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=predictions2genes --columns=1  |\
	sort | uniq > $@
	$(EPILOG)

%_genes.clusters2sizes: %_genes.clusters2genes.links
	$(PRELOG)
	@cut -f 2 $*_genes.clusters2genes.links | sort | uniq -c | awk '{printf("%s\t%s\n", $$2, $$1);}' > $@
	$(EPILOG)

%_genes.clusters2clusters.links: %_genes.clusters2genes.links %_genes.clusters2sizes
	$(PRELOG)
	@sort $*_genes.clusters2genes.links |\
	awk 'BEGIN {li=0;lc=0} { \
		if ($$1 != li) { \
			for (x in a) { printf("%s\t%s\t1\n",x,x); delete a[x]; for (y in a) { printf("%s\t%s\t1\n",x,y) } }; \
			li=$$1; lc=0; \
		} \
		if (lc!=$$2) { a[$$2] = 1; }; \
		lc = $$2; \
		} \
	     END { for (x in a) { printf("%s\t%s\t1\n",x,x); for (y in a) { if (x < y) { printf("%s\t%s\t1\n",x,y) } } }; } ' |\
	sort -k1 -k2 |\
	python $(DIR_SCRIPTS_TOOLS)graph_combine_links_redundant.py |\
	cut -f 1,2,5 |\
	python $(DIR_SCRIPTS_TOOLS)graph_reweight_links.py --self-scores=orthologs_consistent_genes.clusters2sizes --method=normalize-max > $@
	$(EPILOG)

%_genes.components: %_genes.clusters2clusters.links
	$(PRELOG)
	@awk '$$3 >= $(PARAM_STEP4_ORTHOLOGS_MIN_PERCENT_OVERLAP)' < $*_genes.clusters2clusters.links |\
		grep -v "#" | cut -f 1,2,5 | ga_components -i -M - > $@_map
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$@_map --columns=2 < $*.components.map > $@.map
	@cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
	@touch $@
	$(EPILOG)

#######################################################################
## 
## rejoin clusters by reciprocal best hit
## (Predictions are first mapped to clusters. The reciprocity refers to clusters.)
##
## 1. Build bi-partite graph of clusters to clusters using besthits graph.
## 2. Sort the results and combine links. Count the number of links in each direction.
## 3. Filter graph and keep links with at least $(PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS) 
##	in each direction
## 4. Cluster graph by components and map old clusters to new clusters.
%_besthits.clusters2clusters.links: %.components
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$*.components.map --columns=1,2 < ../$(STEP4_INPUT_BESTHITS) |\
	awk '{l=match($$1,"^[0-9]"); r=match($$2,"^[0-9]"); \
		if (!l || !r || ($$1 == $$2) ) { next; }; \
		if ($$1 < $$2) { printf("%s\t%s\t+\n", $$1, $$2); } else { printf("%s\t%s\t-\n", $$2, $$1);}}' |\
	sort -k1,1n -k2,2n -k3,3n -k4,4n |\
	awk 'BEGIN {la=0;lc=0;np=0;nn=0;} \
		{ if (la != $$1 || lc != $$2) { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); la=$$1;lc=$$2;np=0;nn=0; } \
		  if ($$3 == "+") { np++; } else { nn++;} } \
	     END { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); }' \
	> $@
	awk '!/^#/ { printf("%s\t%s\t%i\t%i\n", $$1, $$1, $(PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS), $(PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS)); }' \
	< $*.components.sizes >> $@

%_besthits.components: %_besthits.clusters2clusters.links
	awk '$$3 >= $(PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS) && $$4 >= $(PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS)' < $*_besthits.clusters2clusters.links | \
	grep -v "#" | cut -f 1,2,5 |\
	ga_components -i -M - > $@_map
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$@_map --columns=2 < $*.components.map > $@.map
	cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
	touch $@
	$(CMD_LOG) "finished building $@"

#######################################################################
## 
## Add orphans to graph by reciprocal besthit criteria. Orphans are added
## to existing clusters, if the members of the cluster are reciprocal best 
## hits to/from the orphan. This is implemented as a filtering step.
##
## 1. Map vertices in besthit graph to clusters. Discard links between two clusters.
##	This graph will contain only edges between orphans and clusters.
## 2. Mark direction of edges in graph
# %_orphans.orphans2clusters: %.components
# 	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$*.components.map --columns=1,2 < ../$(STEP4_INPUT_BESTHITS) |\
# 	awk '{l=match($$1,"^[0-9]"); r=match($$2,"^[0-9]"); \
# 		if ( (l && r) || (!l && !r) ) { next; }; \
# 		if (l) { printf("%s\t%s\t+\n", $$2, $$1); } else { printf("%s\t%s\t-\n", $$1, $$2);}}' |\
# 	sort |\
# 	awk 'BEGIN {la=0;lc=0;np=0;nn=0;} \
# 		{ if (la != $$1 || lc != $$2) { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); la=$$1;lc=$$2;np=0;nn=0; } \
# 		  if ($$3 == "+") { np++; } else { nn++;} } \
# 	     END { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); }' \
# 	> $@

# ## take maximum match (only one direction) for deciding which match to take
# ## for dubious cases.
# %_orphans.components: %_orphans.orphans2clusters %.components
# 	cat $*.components.map > $@.map
# 	awk '$$3 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS) && $$4 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS)' < $*_orphans.orphans2clusters | \
# 	sort -k1,1 -k2,2 -k3,3nr |\
# 	awk 'BEGIN { l=0; } { if ($$1==l) { next; } printf("%s\t%s\n", $$1, $$2); l=$$1; }' >> $@.map
# 	cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
# 	touch $@
# 	$(CMD_LOG) "finished building $@"
define run_add_orphans
	$(PRELOG);\
	cp $*.components.map $@_0.map;\
	for (( x = 0, y = 1; x < $(PARAM_STEP4_ORTHOLOGS_ORPHANS_MAX_ITERATIONS); ++x, ++y )); do \
		lastcount=`cat $@_$$x.map | wc -l`; \
		$(CMD_LOG2) "# iteration $$x: $$lastcount entries"; \
		cp $@_$$x.map $@_$$y.map; \
		awk '!/^#/ { cova = ($$5-$$4+1)/$$12; covb = ($$8-$$7+1)/$$13; \
		if (cova > covb) { maxcov = cova; mincov = covb; } \
		else { maxcov = covb; mincov = cova; } \
		if ( (mincov >= $(PARAM_STEP4_ORTHOLOGS_MIN_MIN_COVERAGE)) && (maxcov>=$(PARAM_STEP4_ORTHOLOGS_MIN_MAX_COVERAGE)) ) \
		{ print; } }' < $${src_best_hits} |\
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$@_$$x.map --columns=1,2  |\
		awk '{l=match($$1,"^[0-9]"); r=match($$2,"^[0-9]"); \
			if ( (l && r) || (!l && !r) ) { next; }; \
			if (l) { printf("%s\t%s\t+\n", $$2, $$1); } else { printf("%s\t%s\t-\n", $$1, $$2);}}'|\
		sort |\
		awk 'BEGIN {la=0;lc=0;np=0;nn=0;} \
			{ if (la != $$1 || lc != $$2) { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); la=$$1;lc=$$2;np=0;nn=0; } \
		  	if ($$3 == "+") { np++; } else { nn++;} } \
	     	END { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); }' |\
		awk '$$3 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS) && $$4 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS)' |\
		sort -k1,1 -k3,3nr |\
		awk 'BEGIN { l=0; } { if ($$1==l) { next; } printf("%s\t%s\n", $$1, $$2); l=$$1; }' >> $@_$$y.map; \
		thiscount=`cat $@_$$y.map | wc -l`; \
		if [[ $$thiscount == $$lastcount ]]; then \
			$(CMD_LOG2) "# finishing at iteration $$y because no improvement: $$thiscount entries"; \
			break; \
		fi; \
	done; \
	mv $@_$$y.map $@.map
	cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
	touch $@
	$(EPILOG)
endef

%_orphevalue.components: %.components
	src_best_hits=$(PARAM_BESTHITS_EVALUE); $(run_add_orphans)

%_orphpid.components: %.components
	src_best_hits=$(PARAM_BESTHITS_PID); $(run_add_orphans)

%_orphans.components: %.components
	$(PRELOG)
	@cp $*.components.map $@_0.map
	@for (( x = 0, y = 1; x < $(PARAM_STEP4_ORTHOLOGS_ORPHANS_MAX_ITERATIONS); ++x, ++y )); do \
		lastcount=`cat $@_$$x.map | wc -l`; \
		$(CMD_LOG2) "# iteration $$x: $$lastcount entries"; \
		cp $@_$$x.map $@_$$y.map; \
		awk '!/^#/  { cova = ($$5-$$4+1)/$$12; covb = ($$8-$$7+1)/$$13; \
		if (cova > covb) { maxcov = cova; mincov = covb; } \
		else { maxcov = covb; mincov = cova; } \
		if ( (mincov >= $(PARAM_STEP4_ORTHOLOGS_MIN_MIN_COVERAGE)) && (maxcov>=$(PARAM_STEP4_ORTHOLOGS_MIN_MAX_COVERAGE)) ) \
		{ print; } }' < ../$(STEP4_INPUT_BESTHITS) |\
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$@_$$x.map --columns=1,2  |\
		awk '{l=match($$1,"^[0-9]"); r=match($$2,"^[0-9]"); \
			if ( (l && r) || (!l && !r) ) { next; }; \
			if (l) { printf("%s\t%s\t+\n", $$2, $$1); } else { printf("%s\t%s\t-\n", $$1, $$2);}}'|\
		sort |\
		awk 'BEGIN {la=0;lc=0;np=0;nn=0;} \
			{ if (la != $$1 || lc != $$2) { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); la=$$1;lc=$$2;np=0;nn=0; } \
		  	if ($$3 == "+") { np++; } else { nn++;} } \
	     	END { printf("%s\t%s\t%i\t%i\n",la,lc,np,nn); }' |\
		awk '$$3 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS) && $$4 >= $(PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS)' |\
		sort -k1,1 -k3,3nr |\
		awk 'BEGIN { l=0; } { if ($$1==l) { next; } printf("%s\t%s\n", $$1, $$2); l=$$1; }' >> $@_$$y.map; \
		thiscount=`cat $@_$$y.map | wc -l`; \
		if [[ $$thiscount == $$lastcount ]]; then \
			$(CMD_LOG2) "# finishing at iteration $$y because no improvement: $$thiscount entries"; \
			break; \
		fi; \
	done; \
	mv $@_$$y.map $@.map
	@cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
	@touch $@
	$(EPILOG)

##########################################################################
##########################################################################
## calculation of statistics
%.orgs_per_cluster: %.components
	$(PRELOG)
	@grep -v "#" $*.components.map |\
	sort -k 2,2n |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/count_orgs.py \
	--patterns=$*.patterns \
	--format=map \
	--reference-tree="$(PARAM_SPECIES_TREE)" \
	--organisms=$(GENOMES_COMMA) > $@
	$(EPILOG)


%.orgs_per_cluster.png: %.orgs_per_cluster
	python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
	--columns=1,2 \
	--plot=bar \
	--colours=3 \
	--file=<(grep "^[01]" $*.patterns | sort -k3,3 -k2,2n | python ~/t/substitute_tokens.py --apply=map_colours --columns-token=3) \
	--hardcopy=$@

## check: CG predictions should be in the same cluster as their query.
## build list of CG predictions plus queries.
%.stats_missed_queries: %.components best_predictions2queries
	$(PRELOG)
	@rm -f $@_tmp2
	@grep "pdmel_vs_dmel" $*.components.map  | perl -p -e "s/\|/\t/g" | cut -f 1,2,5 | perl -p -e "s/\t/|/" > $@_tmp2
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns=1 --apply=$*.components.map --echo < best_predictions2queries |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns=2 --apply=$@_tmp2 --echo |\
	awk '$$1 ~ /^[0-9]/ && $$2 ~ /^[0-9]/' > $@ 
	@rm -f $@_tmp2
	$(EPILOG)

%.stats_classes: %.components
	@grep -v "#" $*.components.map | cut -f 1 |\
	awk 'BEGIN {FS="$(PARAM_SEPARATOR)"; split("$(PARAM_GENOMES)",aa," "); for(x in aa){orgs[aa[x]]=1;} } \
		{ if ($$1 in orgs) { a[$$1]+=1; b[$$4]+=1;} } \
	     END { \
		printf("taxon"); for (x in a) { printf("\t%s",x) } printf("\ncounts"); for (x in a) { printf("\t%i",a[x]) } printf("\n"); \
		printf("class"); for (x in b) { printf("\t%s",x) } printf("\ncounts"); for (x in b) { printf("\t%i",b[x]) } printf("\n"); \
		}' $(TOLOG)

%.stats: %.orgs_per_cluster %.components %.stats_missed_queries
	$(CMD_LOG) "calculating statistics for $*"
	$(LOG_HR1)
	$(LOG_HR2)
	@echo -e "# ten largest clusters\nsize\tclusters" $(TOLOG)
	@cut -f 2 $*.components.sizes | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" | tail -n 10 $(TOLOG)
	$(LOG_HR2)
	@echo -e "# summary statistics of clusters\ncatgory\tvalue" $(TOLOG)
	@cut -f 2 $*.components.sizes | python $(DIR_SCRIPTS_TOOLS)data2stats.py | grep -v "#" $(TOLOG)
	$(LOG_HR2)
	@echo -e "# predictions in relation to query\nclass\ttotal\tsame\tdiff" $(TOLOG)
	@echo -e "all\t`cat $*.stats_missed_queries | wc -l`\t`awk '$$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "CG\t`awk '$$3 ~ /CG/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CG/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CG/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "SG\t`awk '$$3 ~ /SG/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SG/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SG/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "PG\t`awk '$$3 ~ /PG/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PG/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PG/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "RG\t`awk '$$3 ~ /RG/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /RG/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /RG/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "UG\t`awk '$$3 ~ /UG/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UG/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UG/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "CP\t`awk '$$3 ~ /CP/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CP/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CP/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "SP\t`awk '$$3 ~ /SP/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SP/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SP/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "PP\t`awk '$$3 ~ /PP/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PP/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PP/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "RP\t`awk '$$3 ~ /RP/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /RP/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /RP/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "UP\t`awk '$$3 ~ /UP/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UP/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UP/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "SF\t`awk '$$3 ~ /SF/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SF/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /SF/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "CF\t`awk '$$3 ~ /CF/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CF/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /CF/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "PF\t`awk '$$3 ~ /PF/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PF/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /PF/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "UF\t`awk '$$3 ~ /UF/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UF/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /UF/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	@echo -e "BF\t`awk '$$3 ~ /BF/' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /BF/ && $$1 == $$2' $*.stats_missed_queries | wc -l`\t`awk '$$3 ~ /BF/ && $$1 != $$2' $*.stats_missed_queries | wc -l`" $(TOLOG)
	$(LOG_HR2)
	@echo "# Organisms and classes present in clusters" $(TOLOG)
	@$(MAKE) -s $*.stats_classes
	$(LOG_HR2)
	@echo -e "# number of taxa per cluster\ntaxa\tclusters" $(TOLOG)
	@cut -f 3 $*.orgs_per_cluster | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" $(TOLOG)
	$(LOG_HR2)
	@echo -e "# number of clusters corresponding to phylogeny\nisok\tcounts\tpercent" $(TOLOG)
	@awk '/^[01]/ { a[$$3] += $$2; t+=$$2; } \
	END { for (x in a) { printf("%s\t%i\t%5.2f\n", x, a[x], a[x]/t); } }' \
	< $*.patterns $(TOLOG)
	$(LOG_HR2)
	@echo -e "# total number of predictions\n`grep -v "#" $*.components.map | wc -l`" $(TOLOG)
	@if test -e $*.links; then \
		$(LOG_HR2v); \
		echo -e "# summary of graph\nqueries\tsbjcts\tvertices\tlinks" $(TOLOG); \
		perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $*.links | grep -v "#" $(TOLOG) ; \
	fi
	$(LOG_HR2)
	@echo -e "# genes per clusters" $(TOLOG)
	@echo -e "query genes per clusters\tcounts\trelative" $(TOLOG)
	@grep "$(PARAM_INPUT_GENOME_MASTER)" $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --column=1 --apply=predictions2genes |\
	sort -k2,2n | uniq | uniq -f 1 -c | awk '{printf("%s\n", $$1);}' |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --append=normalize |\
	grep -v "#" $(TOLOG);
	$(LOG_HR1)

#########################################################################
## calculate cluster information for bitscores
step4.bits:
	@if [ ! -e $@ ]; then \
		mkdir $@; \
		$(CMD_LOG2) "collecting data"; \
	fi
	$(CMD_LOG) "calculating histograms for all within clusters"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_bits_within_%s.%s \
		--methods=hists,stats \
		--map=orthologs.components.map \
		--columns=3 \
		--add-total \
		--minbin=0.0 --maxbin=1.0 --binsize=0.01 \
	< $(STEP4_INPUT_ALL) > $@/analysis_bits_within.out
	$(CMD_LOG) "calculating histograms for all between clusters"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_bits_between_%s.%s \
		--methods=hists,stats \
		--map=orthologs.components.map \
		--columns=3 \
		--between-clusters \
		--add-total \
		--minbin=0.0 --maxbin=1.0 --binsize=0.01 \
	< $(STEP4_INPUT_ALL) > $@/analysis_bits_between.out

.PHONY: step4.bits

#########################################################################
## follow a certain pattern through the different clustering stages
%.follow_query:
	@for x in orthologs orthologs_consistent orthologs_consistent_genes orthologs_consistent_genes_orphans; do \
		cluster=`grep "$*" < $$x.components.map | cut -f 2`; \
		if [ ! -z "$${cluster}" ]; then \
			echo "# $* in cluster $${cluster} in $$x"; \
			grep "\b$${cluster}$$" < $$x.components.map; \
		else \
			echo "# $* not in $$x"; \
		fi \
	done

#########################################################################
## get all clusters of size xxx in all stages
%.get_sizes:
	@for x in orthologs orthologs_consistent orthologs_consistent_genes orthologs_consistent_genes_orphans; do \
		nclusters=`grep -c "\b$*$$" < $$x.components.sizes | cut -f 1`; \
		echo "# $${nclusters} clusters of size $* in $$x"; \
		for cluster in `grep "\b$*$$" < $$x.components.sizes | cut -f 1;`; do \
			echo "# masters in cluster $${cluster}"; \
			grep "\b$$cluster$$" $$x.components.map |\
			grep $(PARAM_INPUT_GENOME_MASTER); \
		done; \
	done

#########################################################################
## get largest clusters
%.get_largest_clusters:
	clusters=`sort -k2,2rn $*.components.sizes | head -n 10 | cut -f 1`;\
	for cluster in $${clusters}; do \
		printf "##############################################################################\n"; \
		printf "# cluster %s of size %i\n" $${cluster} `grep -c "\b$$cluster$$" $*.components.map`; \
		printf "# composition\n"; \
		grep "\b$$cluster$$" $*.components.map | cut -f 1 -d "$(PARAM_SEPARATOR)" | sort | uniq -c; \
		grep "\b$$cluster$$" $*.components.map | cut -f 4 -d "$(PARAM_SEPARATOR)" | sort | uniq -c; \
		printf "# masters\n"; \
		grep "\b$$cluster$$" $*.components.map | sort |\
		grep $(PARAM_INPUT_GENOME_MASTER); \
	done

#########################################################################
## matrix of number of pairwise 1_to_1 relationships
1_to_1.stats:
	find . -name "orthology_gene" -print -exec cat {} \; |\
	grep -e "orthology" -e "1 to 1" |\
	perl -p -e "if (/orthology/) { s/step4_//; s/\-/\t/; s/.\///; s/\/.*\n/\t/ }" |\
	cut -f 1,2,4 |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py > $@

##############################################################################
## get statistics for the various steps into the same file
step4.stats.steps:
	$(PRELOG)
	@rm -f $@
	@for x in $(STEP4_STAGES_STATS); do \
		rm -f $$x; \
		$(MAKE) $$x CMD_LOG="@echo >> $@" TOLOG=">> $@"; \
	done
	$(EPILOG)

step4.xstats: step4.stats.steps
	@$(MAKE) stats.dir
	@echo "mean number of taxa per cluster"
	@grep "mean" $< | cut -f 2- | nl -nln
	@echo "number of CG predictions separated from query"
	@grep "^CG" $< | cut -f 2- | nl -nln

## get number of clusters 
##    with good phylgeny and complete
##    with good phylogeny, but not complete, 
##    with bad phylogeny
barplot_phylogeny.png:
	@for x in orthologs orthologs_consistent orthologs_consistent_genes orthologs_consistent_genes_orphans; do \
		awk -v name=$$x \
		'BEGIN { printf("\t%s\n", name); } \
		/^1+\t/ { a["complete"] += $$2; t+=$$2; next;} \
		/^[01]/ { key = ($$3 == "1") ? "ok" : "failed"; a[key] += $$2; t+=$$2; } \
		END { for (x in a) { printf("%s\t%i\n", x, a[x]); } }' \
		< $$x.patterns > $@.tmp_$$x; \
	done
	@printf "\tcolours\ncomplete\tgreen\nok\tblue\nfailed\tred\n" > $@.tmp_colours
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@.tmp_* > $@.tmp
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py --plot=bar --file=$@.tmp --columns=3,4,5,6 --colours=2 --hardcopy=$@
	@rm -f $*.tmp*

step4.get_errors:
	rm -f $@
	$(CMD_MSG) "Get predictions which are in different cluster than their query"
	for x in $(STEP4_STAGES_STATS); do \
		echo "#############################################################################" >> $@; \
		echo "# separated CG entries in $${x}:" >> $@; \
		awk '$$3 ~ /CG/ && $$1 != $$2' $${x}_missed_queries |\
		sort -k1,1n -k2,2n |\
		awk 'BEGIN \
			{ printf("cluster1\tcluster2\tnmissed\tmemclus1\tmemclus2\n"); } \
		     { \
			if (a != $$1 || b != $$2) { \
				if(a) { x++;printf("%s\t%s\t%i\t%s\t%s\n",a,b,n,aa,bb); }; n = 0; aa=""; bb=""; \
			} \
		        l = $$0; n+=1; a=$$1; b=$$2; aa = aa $$3 ";"; bb = bb $$4 ";" \
		     }\
		     END \
			{ x++;printf("%s\t%s\t%i\t%s\t%s\n",a,b,n,aa,bb); \
			  printf("# mismatched clusters: %i\n", x);} ' >> $@; \
	done

##############################################################################
## build graphs from ortholgous links
##
## graph with links between orthologous components
orthologs.pairs: orthologs.links orthologs.components
	$(PRELOG)
	@cat ../$(STEP4_INPUT_ALL) |\
	perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl -n orthologs.components.map |\
	cut -f 1-3 |\
	perl $(DIR_SCRIPTS_TOOLS)graph_sort_links_components.pl -f fasta -s size orthologs.components.map |\
	grep -v "^#" > $@
	$(EPILOG)

## graph with links between orthologous components but only orthologous links
strict_orthologs.pairs: orthologs.pairs
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl orthologs.links < orthologs.pairs > $@
	$(EPILOG)

## graph with links between orthologous components 
orthologs_%.pairs: orthologs.links orthologs_%.components
	$(PRELOG)
	@cat ../$(STEP4_INPUT_ALL) |\
	perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl -n orthologs_$*.components.map |\
	cut -f 1-3 |\
	perl $(DIR_SCRIPTS_TOOLS)graph_sort_links_components.pl -f fasta -s size orthologs_$*.components.map |\
	grep -v "^#" > $@
	$(EPILOG)

## graph with links between orthologous components but only orthologous links
strict_orthologs_%.pairs: orthologs_%.pairs
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_links.pl orthologs.links < orthologs_$*.pairs > $@
	$(EPILOG)
