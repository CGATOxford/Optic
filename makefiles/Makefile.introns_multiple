################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.introns_multiple 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Multiple pairwise orthology prediction

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=introns_multiple
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

PARAM_DIR_UPLOAD?=/home/andreas/uploads/

PARAM_DIR_EXPORT?=../../export/
################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=short_jobs.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

PARAM_PRIORITY?=-10

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
## genome parameters
## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

#########################################################################
## location of genome files
PARAM_PATTERN_GENOME_FILES?=%s/genome

## id of master genome
PARAM_GENOME_MASTER?=

## pattern to identify master genome
PARAM_PATTERN_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_PATTERN_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=

## These should be sorted in the same way.
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## separator in identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(shell echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/_vs_dmel//g")

################################################
## Predictions to use for codon bias calculation.
PARAM_QUALITIES?=CG,PG,SG

################################################
# Section parameters: end
################################################

GENOMES_COMMA=`echo '$(PARAM_SRC_SCHEMAS)' | perl -p -e 's/ +/,/g'`
NAMES_COMMA=`echo '$(PARAM_SRC_NAMES)' | perl -p -e 's/ +/,/g'`

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

########################################################################
## various includes

########################################################################
## target to do in subdirectories
MASTER_TARGET?=all

########################################################################
## setup directories for intron analysis.
##
prepare: 
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]}; \
		target_dir=introns_$${genome};\
		if [ ! -e $${target_dir} ]; then \
		    echo "setting up $${target_dir}" $(TOLOG); \
		    mkdir $${target_dir}; \
		    python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		    -f \
		    -m introns \
		    -p introns_$${genome} \
		    -d $(CURDIR)/$${target_dir} \
		    PARAM_PSQL_SCHEMA=$${genome} \
		    > $${target_dir}/setup.log; \
		    ln -s `printf $(PARAM_PATTERN_GENOME_FILES) $${genome}`.{fasta,idx} $${target_dir}; \
		    awk -v qq="$(PARAM_QUALITIES)" \
			'BEGIN { split( qq, q, ","); for (x in q) { qualities[q[x]] = 1; } } \
			{ split( $$0, a, "$(PARAM_SEPARATOR)"); \
				if (a[4] in qualities && \
					a[2] == a[3] ) { printf("%s%s%s\n", a[1], "$(PARAM_SEPARATOR)", a[2]); }}' \
		    < $(PARAM_DIR_EXPORT)/export_clustering.dir/export_clustering_$${genome}_representatives > $${target_dir}/filter; \
		    $(MAKE) -C $${target_dir} prepare; \
		else \
			echo "$${target_dir} already exists: skipped" $(TOLOG); \
		fi; \
	done;
	@-mkdir analysis.dir
	$(EPILOG)

SUBDIRS=$(wildcard introns_*)

$(SUBDIRS):
	$(MAKE) -C $@ $(MASTER_TARGET)

all: $(SUBDIRS)
	$(EPILOG)

finish: 

clean:
	$(MAKE) all MASTER_TARGET=clean

.PHONY: subdirs $(SUBDIRS)


#########################################################################
#########################################################################
#########################################################################
## building a map for export names
#########################################################################
CMD_SUBSTITUTE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all

#######################################################################################
#######################################################################################
#######################################################################################
## Analysis targets
#######################################################################################

#########################################################################
#########################################################################
#########################################################################
# Histogram across all genomes. Only take selected ids
#########################################################################
ANALYSIS_HISTOGRAM_OPTIONS=--min-value=0.0 --bin-size=0.02
ANALYSIS_CMD_FILTER=python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
			--titles \
			--apply=introns_$${genome}/filter \
			--column=1 

analysis.dir/%.hist:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "bin\t%s\n" $${genome} > $@_tmp_$${genome}; \
		$(ANALYSIS_CMD_FILTER) < introns_$${genome}/introns_mean.stats |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py $* |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			$(ANALYSIS_HISTOGRAM_OPTIONS) | grep -v "#" >> $@_tmp_$${genome}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--titles \
		--sort="$(GENOMES_COMMA)" \
		$@_tmp_* |\
	$(CMD_SUBSTITUTE) > $@
	@rm -f $@_tmp_*
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# Statistics across all genomes
#########################################################################
analysis.dir/%.stats:
	$(PRELOG)
	@printf "genome\t%s\n" "`python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header`" > $@_tmp;
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "%s\t" $${genome} >> $@_tmp ;\
		$(ANALYSIS_CMD_FILTER) < introns_$${genome}/introns_mean.stats |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py $* |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--flat --format="%6.4f" | grep -v "#" >> $@_tmp; \
	done
	@$(CMD_SUBSTITUTE) < $@_tmp > $@
	@rm -f $@_tmp
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## Summary for all selected over orthologs
##
## This procedure averages per gene. If there are several orthologs, again
## the average is taken
#########################################################################
analysis.dir/orthologs.introns:
	$(PRELOG)
	@printf "genome\t%s" > $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$(PARAM_GENOME_MASTER); \
		genome2=$${genomes[$$x]} ; \
		if [ ! -e $@_tmp_$${genome2} ]; then \
		    if [ "$${genome1}" != "$${genome2}" ]; then \
			awk -v g1="$${genome1}" -v g2="$${genome2}" \
			'{      if ( match($$1, g1) && match($$2, g2) ) { a = $$2; b = $$1; } \
			   else if ( match($$2, g1) && match($$1, g2) ) { a = $$1; b = $$2; } \
			   else { next; } \
			   split( b, s, "$(PARAM_SEPARATOR)"); b = s[3]; \
			   split( a, aa, "$(PARAM_SEPARATOR)"); \
			   printf("%s%s%s\t%s\n", aa[1], "$(PARAM_SEPARATOR)", aa[2], b); \
			 }' \
			< ../../orthology_pairwise/pair_$${genome1}-$${genome2}/step6.orthologs \
			> $@_tmp1; \
			grep "id" introns_$${genome2}/introns_mean.stats |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			awk '!/^#/ {split( $$1, a, "$(PARAM_SEPARATOR)"); $$1=a[1] "$(PARAM_SEPARATOR)" a[3]; print; }' \
			< introns_$${genome2}/introns_mean.stats |\
			perl -p -e "s/ /\t/g;" |\
			python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
			--apply=$@_tmp1 \
			--column=1 \
			--filter |\
			grep -v "#" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 >> $@_tmp_$${genome2}; \
		    else \
			grep "id" introns_$${genome2}/introns_mean.stats |\
			awk -v g="$${genome2}" \
			    '{ printf ("id"); for (x = 2; x <= NF; ++x) { printf("\t%s_%s", g, $$x); } printf("\n"); }' \
			    > $@_tmp2; \
			awk '/$(PARAM_GENOME_MASTER)/ { split($$1, a, "$(PARAM_SEPARATOR)"); $$1=a[3]; print;}' \
			< introns_$${genome2}/introns_mean.stats | perl -p -e "s/ /\t/g" >> $@_tmp2; \
			python $(DIR_SCRIPTS_TOOLS)table2table.py \
			--group=1 --group-function=mean \
			< $@_tmp2 > $@_tmp_$${genome2}; \
		    fi; \
		fi; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--titles \
		$@_tmp_* > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
#########################################################################
## get total intronic GC
#########################################################################
analysis.dir/total.data:
	$(PRELOG)
	@printf "schema\t" > $@; 
	@grep "id" introns_$(PARAM_GENOME_MASTER)/joined_introns.stats | cut -f 2- >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		printf "%s\t" $${genome} >> $@; \
		grep "total" introns_$${genome}/joined_introns.stats | cut -f 2- >> $@; \
	done;
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# Correlate the intronic gc of a gene with the exonic gc3
# together with the cumulative length of the introns (nucleotides) and 
# exons (codons)
#########################################################################
analysis.dir/introns_exons.data:
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome=$${genomes[$$x]} ; \
		$(PSQL_CONNECTION) "SELECT c.prediction_id, i.length, i.percent_gc, c.ncodons, c.percent_gc3 \
			FROM $${genome}.codonbias AS c, $${genome}.introns AS i \
			WHERE c.prediction_id = i.prediction_id \
			AND c.is_selected = True" \
		$(PSQL_CONNECTION_OPTIONS) > analysis.dir/$${genome}_introns_exons.data; \
	done
	$(EPILOG)

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
