################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.blat_protein 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2008 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

## Run blat for proteins. This pipeline is used to lookup a large
## set of sequences in a fasta file.

################################################
## Section parameters: start
################################################

## the query database
PARAM_FILENAME_QUERIES?=queries.fasta

## the reference database to which query shall
## be compared to.
PARAM_FILENAME_SBJCTS?=sbjcts.fasta

## Minimum identity for a match
PARAM_MIN_IDENTITY?=40

## chunk size for blat runs
PARAM_CHUNK_SIZE?=100

################################################
# Section parameters: end
################################################

################################################
################################################
################################################
## build lookup file
################################################
5.ooc:
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	blat -dots=100 -prot -makeOoc=$@ \
		-minIdentity=$(PARAM_MIN_IDENTITY) \
		$(PARAM_FILENAME_SBJCTS) $(PARAM_FILENAME_QUERIES) $@.log < /dev/null >> $@.log
	$(EPILOG)

################################################
################################################
################################################
## prepare parallel run
################################################
data.prepare: 5.ooc data.dir
	$(PRELOG)
	@perl /home/andreas/gpipe/split_fasta.pl \
		-a data.dir/chunk_%s.fasta \
		$(PARAM_CHUNK_SIZE) \
	< $(PARAM_FILENAME_QUERIES) > $@
	$(EPILOG)

################################################
################################################
################################################
## perform parallel run
################################################

QUERIES=$(wildcard chunk*.fasta)
TARGETS=$(QUERIES:%.fasta=%.blat.gz) 

data.run:
	$(PRELOG) 
	@$(MAKE) -j $(PARAM_NUM_JOBS) -k -C data.dir data.run-subhook
	$(EPILOG)

data.run-subhook: $(TARGETS)

%.blat.gz: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) -l mem_free=3500M \
		blat \
		-dots=100 \
		-prot \
		-ooc=../5.ooc \
		-minIdentity=$(PARAM_MIN_IDENTITY) \
		../$(PARAM_FILENAME_SBJCTS) \
		$< \
		$@.tmp \
	< /dev/null >& $@.log
	@$(CMD_REMOTE_SUBMIT) \
		gzip < $@.tmp > $@
	@rm -f $@.tmp
	$(EPILOG)

.PRECIOUS: %.blat

################################################
################################################
################################################
## show progress
################################################
data.show-progress:
	@echo "# progress at `date`" >> data.progress
	@nfinished=`grep "^[.]" data.dir/chunk_*.blat.log | perl -p -e "s/[^.]//g" | wc -c`; \
	ninput=`grep "found:" map.log | perl -pe "s/.*new: //; s/ .*//"`; \
	awk -v ninput=$${ninput} -v nfinished=$${nfinished} \
	'END { nfinished *=100; printf("input\tdone\tdone [%]\n"); \
		printf("%i\t%i\t%5.2f\n", ninput, nfinished, 100.0 * nfinished/ninput)}' < /dev/null \
	>> data.progress
	@tail data.progress

################################################
################################################
################################################
## collect results
################################################
data.finish: matches.gz map_query2sbjct.table
	$(PRELOG)
	$(EPILOG)

matches.gz:
	$(PRELOG)
	@find data.dir -name "*.gz" -exec cat {} \; > $@
	$(EPILOG)

map_query2sbjct.table: matches.gz
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)blat2map.py \
		--output-filename-pattern="$@.%s" \
		$< \
	< /dev/null > $@
	$(EPILOG)
################################################
################################################
################################################
## clean up
################################################
clean:
	$(PRELOG)
	@rm -rf data.dir
	$(EPILOG)

#########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
