################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_phylogeny 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
##
## Files created by this module
##
## Result targets:
##
## {median,mean}_{fitch,kitsch}.tree:	Trees based on genomic median/mean using fitch/kitsch
##
## mean_replicates_{fitch,kitsch}.tree: Trees based on genomic mean with replicated information
## 
## {fitch,kitsch}.trees:		Trees for orthologous groups build using kitsch/fitch
##					without providing a tree topology
##
## {fitch,kitsch}_fitted.trees:		Trees for orthologous groups build using kitsch/fitch
##					with providing a species tree
##
## Analysis targets: are prefixed by analysis.dir/
##
## orthologs-hook:			Collect statistis for distances between orthologs for each
##					genome pair
## error-bars-hook:			Collect statistics for branch specific distances and their
##					errors based on a set of trees.
## 
#################################################################################

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
DIR_HISTOGRAMS=$(CURDIR)/histograms/

PARAM_DIR_UPLOAD?=/home/andreas/uploads/

#########################################################################
## pattern for genome and peptide files. If there is a single file, set to filename
PARAM_INPUT_GENOME?=genome_%s.fasta
PARAM_INPUT_PEPTIDES?=peptides.fasta
PARAM_INPUT_GENOME?=$(wildcard genome*.fasta)
PARAM_INPUT_EXONS?=reference.exons

################################################
## Database connection parameters
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with raw multiple alignment information (nucleotide level)
PARAM_TABLE_NAME_MALIS_RAW?=$(PARAM_PSQL_SCHEMA).malis_raw
## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_AA?=$(PARAM_PSQL_SCHEMA).malis_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_NA?=$(PARAM_PSQL_SCHEMA).malis_na
## table with multiple alignment information: which prediction in which mali
PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER?=$(PARAM_PSQL_SCHEMA).map_prediction2cluster
## table with cluster attributes
PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES?=$(PARAM_PSQL_SCHEMA).cluster_attributes
################################################
## genome parameters
## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=

## species tree
PARAM_SPECIES_TREE?=

PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]
################################################
## directories and database schemas
## Sort order for schemas is conserved
PARAM_SRC_SCHEMAS?=

PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(PARAM_SRC_SCHEMAS)

################################################
## Maximum distance to take. Distances larger than this
## are removed from fitting distances to trees.
PARAM_MAX_DISTANCE?=5.0

################################################
## filter error bars with this subset of sequences
PARAM_FILTER_ERROR_BARS?=

################################################
## Parameters for branch specific rate calculation
## Outgroup to use for rooting trees
PARAM_OUTGROUP?=dwil_vs_dmel1

################################################
# Section parameters: end
################################################
INPUT_LINKS=input.distances.gz
INPUT_CLUSTERS=input.map

FILES_REQUISITES=$(INPUT_CLUSTERS) $(INPUT_LINKS) input.branches

################################################
GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`
NAMES_COMMA=`echo $(PARAM_SRC_NAMES) | perl -p -e "s/ +/,/g"`

PARAM_RANDOM_SEED?=$$((RANDOM * 2 - 1))

###########################################################################
## Build list of primary targets

## Genome trees
METHODS_GENOME_TREES=median_fitch median_kitsch mean_replicates_fitch mean_replicates_kitsch mean_fitch mean_kitsch
TARGETS_GENOME_TREES=$(METHODS_GENOME_TREES:%=%.tree) $(METHODS_GENOME_TREES:%=%.branches)

## Gene trees
METHODS_GENE_TREES=kitsch fitch
TARGETS_GENE_TREES=$(METHODS_GENE_TREES:%=%.trees) $(METHODS_GENE_TREES:%=%_consensus.tree) $(METHODS_GENE_TREES:%=%_fitted.trees)

all: links median.matrix mean.matrix \
	$(TARGETS_GENOME_TREES) \
	$(TARGETS_GENE_TREES) 


##################################################################################
##################################################################################
##################################################################################
## components according to Leo
## Note: seq_pairs_cluster_by_single_linkage fails when directly piped in?
## Note: links in clusters beyond minimum size at beginning of file?
##################################################################################
links: input.distances.gz input.map
	$(PRELOG)
	@gunzip < input.distances.gz |\
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl input.map |\
	awk '$$3 <= $(PARAM_MAX_DISTANCE)' > $@_tmp
	@seq_pairs_cluster_by_single_linkage \
	--minimum_cluster_size=$(PARAM_NUM_GENOMES) \
	--results_summary=$@.log \
	--err_log=$@.error \
	< $@_tmp | awk '$$1 != $$2' |\
	perl $(DIR_SCRIPTS_TOOLS)regtail.pl ">" > $@
	@rm -f $@_tmp
	$(EPILOG)

##################################################################################
## Write the reference tree to a file
reference.tree:
	$(PRELOG)
	echo "$(PARAM_SPECIES_TREE)" > $@
	$(EPILOG)

########################################################################
########################################################################
########################################################################
## build gene trees
########################################################################
FITCH_TREES_QUERIES=$(wildcard cluster*.links)
FITCH_TREES_TARGETS=$(FITCH_TREES_QUERIES:%.links=%.trees)

fitch.trees: links
	$(PRELOG)
	$(MAKE) $@.dir
	$(MAKE) $@.prepare $@.run
	@cat $@.dir/cluster*.trees | grep -v -e "#" -e ">" > $@
	@cat $@.dir/cluster*.trees.error > $@.log
	$(EPILOG)

fitch.trees.prepare: links
	$(PRELOG)
	@perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
		-n 200 \
		-a fitch.trees.dir/cluster_%05i.links < links > $@
	$(EPILOG)

fitch.trees.run: fitch.trees.prepare
	$(PRELOG)
	@if [ -e fitch.trees.dir ]; then \
		$(MAKE) -j $(PARAM_NUM_JOBS) -k -C fitch.trees.dir fitch.trees.run-subhook; \
	fi
	$(EPILOG)

fitch.trees.run-subhook: $(FITCH_TREES_TARGETS)

cluster_%.trees: cluster_%.links
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	tree_fitch \
	--iterations 30 \
	--input=p \
	--err_log=$@.error \
	< $^ > $@
	$(EPILOG)

cluster_%.trees: cluster_%.links
	$(PRELOG)
	@cat cluster_$*.links |\
	$(CMD_REMOTE_SUBMIT) \
	"python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--output-format=phylip-replicates \
		--default-diagonal=0 \
		--default=0 |\
	python $(DIR_SCRIPTS_TOOLS)matrix2tree.py \
		--method=fitch --replicates" > $@
	$(EPILOG)

kitsch.trees: links
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	tree_kitsch \
	--iterations 30 \
	--input=p \
	--err_log=$@.error \
	< $^ > $@
	$(EPILOG)

########################################################################
########################################################################
########################################################################
## Fitting the species tree onto individual clusters
########################################################################
## Note: pad identifiers to 10 characters for phylip.
## Note: trees are eliminated if they do not contain the right number of
## sequences. 
genes.matrices: links
	$(PRELOG)
	@awk '/^>/ || $$3 <= $(PARAM_MAX_DISTANCE)' \
	< links |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--filter-numrows=$(PARAM_NUM_GENOMES) \
		--filter-numcols=$(PARAM_NUM_GENOMES) \
		--output-format=phylip-replicates \
		--filename-map=$@.map |\
	perl -p -e "s/[|]\S+//" |\
	$(CMD_TRANSLATE) |\
	awk '!/^[0-9]+/ { $$1 = sprintf("%-10s", $$1); }  {print;}' > $@_tmp;
	@grep -v "#" $@_tmp > $@
	@grep "#" $@_tmp > $@.log
	@rm -f $@_tmp
	$(EPILOG)

########################################################################
########################################################################
########################################################################
## for fitch, the species tree has to be unrooted
########################################################################
fitch_fitted.trees: genes.matrices 
	$(PRELOG)
	@mkdir $@.tmp
	@cp genes.matrices $@.tmp/infile
	@echo "$(PARAM_SPECIES_TREE)" | $(CMD_TRANSLATE) > $@.tmp/intree
	@cd $@.tmp; echo -e "Y\nW\nU\nQ\n" | retree > $@.err
	@mv $@.tmp/outtree $@.tmp/intree
	@ngenomes=$(PARAM_NUM_GENOMES); \
	num_replicates=`grep -c "^$${ngenomes}" genes.matrices`; \
	rand_seed=$$((RANDOM*2+1)); \
	$(CMD_LOG2) "fitting $${num_replicates} matrices on species tree with seed $${rand_seed}."; \
	cd $@.tmp; \
	echo -e "U\nM\n$${num_replicates}\n$${rand_seed}\nS\nY\n" |\
	fitch > $@.err
	@mv $@.tmp/outfile $@.log
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename \
		--parameters=<( awk '{printf("%s\t%s\n", $$2, $$1);}' < translation) \
	< $@.tmp/outtree | grep -v "#" >  $@
	@rm -rf $@.tmp
	$(EPILOG)

########################################################################
########################################################################
########################################################################
kitsch_fitted.trees: genes.matrices fitch_fitted.trees	
	$(PRELOG)
	@mkdir $@.tmp
	@cp genes.matrices $@.tmp/infile
	@echo "$(PARAM_SPECIES_TREE)" | $(CMD_TRANSLATE) > $@.tmp/intree
	@ngenomes=$(PARAM_NUM_GENOMES); \
	num_replicates=`grep -c "^$${ngenomes}" genes.matrices`; \
	rand_seed=$$((RANDOM*2+1)); \
	$(CMD_LOG2) "fitting $${num_replicates} matrices on species tree with seed $${rand_seed}."; \
	cd $@.tmp; \
	echo -e "U\nM\n$${num_replicates}\n$${rand_seed}\nS\nY\n" |\
	kitsch >> $@.err
	@mv $@.tmp/outfile $@.log
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename \
		--parameters=<( awk '{printf("%s\t%s\n", $$2, $$1);}' < translation) \
	< $@.tmp/outtree | grep -v "#" >  $@
	@rm -rf $@.tmp
	$(EPILOG)

########################################################################
########################################################################
########################################################################
## build a consensus gene tree
%_consensus.tree: %.trees
	$(PRELOG)
	@perl -p -e "s/\|[A-Za-z0-9|-]+//g" < $*.trees |\
	python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
		--filter-ntaxa=$(PARAM_NUM_GENOMES) \
		--method=filter \
		--log=$@.log |\
	python $(DIR_SCRIPTS_TOOLS)trees2tree.py \
		--method=consensus \
		--log=$@.log > $@
	$(EPILOG)

########################################################################
########################################################################
########################################################################
## Count number of gene trees that are identical to the reference tree
########################################################################
trees.diff: trees reference.tree
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree_diff.py \
		--outgroup=$(PARAM_OUTGROUP) \
		<(perl -p -e "s/[$(PARAM_SEPARATOR)][^$(PARAM_SEPARATOR)]+[$(PARAM_SEPARATOR)][^$(PARAM_SEPARATOR)]+[$(PARAM_SEPARATOR)]X//g" < trees)  \
		reference.tree > $@
	$(EPILOG)

########################################################################
## Count and select all trees conforming to the known phylogeny.
%.correct.trees: %.trees
	$(PRELOG)
	@perl -p -e "s/\|[^|]+\|[^|]+\|X//g" < $^ |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_trees.py \
		--reference=reference_tree > $@
	$(EPILOG)

########################################################################
## building components from a graph. Creates a .map and .sizes file
%.components: %.links
	$(PRELOG)	
	@ga_components -m $@.map -s $@.sizes $*.links > $@
	@touch $@
	$(EPILOG)

########################################################################
## Counting organisms per cluster.
%.orgs_per_cluster: %.components
	$(PRELOG)
	@grep -v "#" $*.components.map |\
	sort -k 2,2n |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/count_orgs.py \
	--patterns=$*.patterns \
	--format=map \
	--reference-tree="$(PARAM_SPECIES_TREE)" \
	--organisms=$(GENOMES_COMMA) > $@
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
## Build tabular statistics information for all genomes.
## Only distances smaller than PARAM_MAX_DISTANCE are chosen.
#####################################################################################################
genes.stats: links
	$(PRELOG)
	@printf "genome1\tgenome2\t" > $@
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
		    genome1=$${genomes[$$x]} ; \
		    genome2=$${genomes[$$y]} ; \
		    printf "%s\t%s\t" $${genome1} $${genome2} >> $@; \
		    awk -v g1=$${genome1} -v g2=$${genome2} \
		    '$$3 <= $(PARAM_MAX_DISTANCE) \
		    { if ( (match($$1,g1) && match($$2,g2)) || \
			  (match($$1,g2) && match($$2,g1)) ) { print; } }' \
		    < $< |\
		    python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		    --column=3 --format="%7.4f" --flat \
		    --no-title --skip-header | grep -v "#" >> $@; \
		done; \
	done
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
## Median genome trees. Median over all genes is taken and used for building trees with fitch/kitsch.
#####################################################################################################
## Build median matrix. All distances are used.
median.matrix: links
	$(PRELOG)
	@rm -f tmp_$@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
		    genome1=$${genomes[$$x]} ; \
		    genome2=$${genomes[$$y]} ; \
		    printf "%s\t%s\t" $${genome1} $${genome2} >> tmp_$@; \
		    awk -v g1=$${genome1} -v g2=$${genome2} \
		    '!/^>/ { if ( (match($$1,g1) && match($$2,g2)) || \
			  (match($$1,g2) && match($$2,g1)) ) { print; } }' \
		    < $< |\
		    python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		    --column=3 --format="%7.4f" |\
		    grep "median" | cut -f 2 >> tmp_$@; \
		done; \
	done
	@python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) \
	< tmp_$@ > $@
	@rm -f tmp_$@
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
## Mean genome trees. Mean over all genes is taken and used for building trees with fitch/kitsch. 
## No replicate information is used.
#####################################################################################################
## Build mean matrix. Only distances smaller than PARAM_MAX_DISTANCE are used.
mean.matrix: genes.stats
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
		genome1 genome2 mean < $^ |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) \
	> $@
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
#####################################################################################################
## Mean genome trees. Mean over all genes is taken and used for building trees with fitch/kitsch. 
## Replicate information is stored in the matrix as well and used for building the trees.
#####################################################################################################
mean_replicates.matrix: genes.stats
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
		genome1 genome2 mean nval < $^ |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) \
	--input-format=row-col-weight-replicates \
	--output-format=phylip-replicates \
	> $@
	$(EPILOG)

mean_replicates_kitsch.tree: mean_replicates.matrix
	$(PRELOG)
	@rm -rf $@.dir; mkdir $@.dir
	@grep -v "#" < $^ |\
	perl -p -e "s/[|]\S+//" |\
	$(CMD_TRANSLATE) |\
	awk '!/^[0-9]+/ { $$1 = sprintf("%-10s", $$1); }  {print;}' > $@.dir/infile
	@echo "$(PARAM_SPECIES_TREE)" | $(CMD_TRANSLATE) > $@.dir/intree
	@cd $@.dir; \
	echo -e "S\nU\nY\n" |\
	kitsch > $@.err
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename \
		--parameters=<( awk '{printf("%s\t%s\n", $$2, $$1);}' < translation) \
	< $@.dir/outtree | grep -v "#" >  $@
	@mv $@.dir/outfile $@.log
	@rm -rf $@.dir
	$(EPILOG)

mean_replicates_fitch.tree: mean_replicates.matrix
	$(PRELOG)
	@rm -rf $@.dir; mkdir $@.dir
	@grep -v "#" < $^ |\
	perl -p -e "s/[|]\S+//" |\
	$(CMD_TRANSLATE) |\
	awk '!/^[0-9]+/ { $$1 = sprintf("%-10s", $$1); }  {print;}' > $@.dir/infile
	@echo "$(PARAM_SPECIES_TREE)" | $(CMD_TRANSLATE) > $@.dir/intree
	@cd $@.dir /dev/null; \
	echo -e "S\nU\nY\n" |\
	fitch > $@.err
	@mv $@.dir/outtree $@.dir/intree
	@cd $@.dir; \
	echo -e "Y\nM\nW\nU\nQ\n" | retree >> $@.err
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename \
		--parameters=<( awk '{printf("%s\t%s\n", $$2, $$1);}' < translation) \
	< $@.dir/outtree | grep -v "#" >  $@
	@mv $@.dir/outfile $@.log
	@rm -rf $@.dir
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
## Build fitch/kitsch trees from a matrix.
#####################################################################################################
%_kitsch.tree: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
		--input-format="full" \
		--output-format="phylip" \
		--format="%6.4f" \
	< $< |\
	python $(DIR_SCRIPTS_TOOLS)matrix2tree.py \
		--verbose=0 \
		--method=kitsch > $@
	$(EPILOG)

#####################################################################################################
## Midpoint root the fitch tree
%_fitch.tree: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
		--input-format="full" \
		--output-format="phylip" \
		--format="%6.4f" \
	< $< |\
	python $(DIR_SCRIPTS_TOOLS)matrix2tree.py \
		--verbose=0 \
		--method=fitch \
		--root > $@
	$(EPILOG)

#####################################################################################################
#####################################################################################################
#####################################################################################################
#####################################################################################################
## Getting branches from a tree
#####################################################################################################
%.branches: %.tree
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--outgroup=$(PARAM_OUTGROUP) \
	< $*.tree |\
	$(CMD_TRANSLATE) |\
	grep -v "#" |\
	python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--format="%6.4f" \
		--translate \
		--all-on-all |\
	perl -p -e "s/\t/-/" |\
	python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
		--apply=input.branches \
		--column=1 > $@
	$(EPILOG)

#####################################################################################################
distclean:
	@rm -f transcripts.* genes.* 
	@rm -f *.orgs_per_cluster *.patterns 
	@rm -f *.members
	@rm -f consensus*
	@rm -f median*
	@rm -f raw*
	@rm -f input.full_clusters
	@rm -f trees*
	@rm -f median*
	@rm -f mean*
	@rm -f kitsch*
	@rm -f fitsch*

#####################################################################################################
#####################################################################################################
#####################################################################################################
#####################################################################################################
## Functions for analysis
#####################################################################################################

################################################################################################
## How to make a picture out of a matrix
%.png: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	--headers \
	--labels="Genomes","Genomes" \
	--hardcopy=$@ \
	--bar-format="%6.4f" \
	< $*.matrix > /dev/null
	$(EPILOG)

#####################################################################################################
analysis.dir/%.svg: %.tree
	$(PRELOG)
	@$(CMD_TRANSLATE) < $*.tree |\
	perl -p -e "s/\n//g" |\
	python $(DIR_SCRIPTS_TOOLS)tree2plot.py | grep -v "^#" > $@
	$(EPILOG)

#####################################################################################################
summary.wiki:
	$(PRELOG)
	@rm -f $@
	python $(DIR_SCRIPTS_TOOLS)preppy.py \
	$(DIR_SCRIPTS_GENEPREDICTION)orthology_phylogeny_wiki.prep \
	genomes=$(GENOMES_COMMA) \
	locations=all,nojunk,local \
	categories=all,functional,pseudo  \
	> $@
	@mv -f summary.wiki $(PARAM_DIR_UPLOAD)
	@rm -f $(PARAM_DIR_UPLOAD)$@.zip
	@cd analysis.dir; zip $(PARAM_DIR_UPLOAD)$@.zip *.svg *.png 2>/dev/null
	$(EPILOG)

################################################################################################
################################################################################################
################################################################################################
################################################################################################
## Get ks distances for all pairs agains master
TARGETS_SRC_ANALYSIS=
TARGETS_ANALYSIS=$(TARGETS_SRC_ANALYSIS:%=analysis.dir/%)

analysis: analysis.dir $(TARGETS_ANALYSIS) \
	analysis.dir/orthologs-hook \
	analysis.dir/error-bars-hook \
	analysis.dir/median_fitch.svg \
	analysis.dir/median_kitsch.svg \
	analysis.dir/mean_fitch.svg \
	analysis.dir/mean_kitsch.svg \
	analysis.dir/mean_replicates_kitsch.svg \
	analysis.dir/mean_replicates_fitch.svg \
	analysis.dir/kitsch_consensus.svg \
	analysis.dir/fitch_consensus.svg 

################################################################################################
################################################################################################
################################################################################################
################################################################################################
## Statistics between pairwise orthologs across genomes
analysis.dir/orthologs_genes.stats: ANALYSIS_FILE_LINKS=links
analysis.dir/orthologs_genes.hists: ANALYSIS_FILE_LINKS=links

analysis.dir/orthologs-hook: \
	analysis.dir/orthologs_genes.stats \
	analysis.dir/orthologs_genes.mean.matrix \
	analysis.dir/orthologs_genes.median.matrix \
	analysis.dir/orthologs_genes.hists \
	analysis.dir/orthologs.images 

################################################################################################
## Get ks between orthologous transcripts/genes for all entries.
## Discard values larger than $(PARAM_MAX_DISTANCE)
analysis.dir/orthologs_%.stats: $(ANALYSIS_FILE_LINKS)
	$(PRELOG)
	@cat $(ANALYSIS_FILE_LINKS) |\
	awk '$$3 <= $(PARAM_MAX_DISTANCE) \
		{ split($$1, a, "$(PARAM_SEPARATOR)"); split($$2, b, "$(PARAM_SEPARATOR)"); \
		printf("%s\t%s\t%s\n", a[1], b[1], $$3); } ' |\
	python $(DIR_SCRIPTS_TOOLS)graph2histograms.py \
		--output-pattern="$@_%s.hist" \
		--output-format="semi" \
		--method="summary" \
		--bin-size=0.1 \
		--min-value=0.0 \
		--sort="$(GENOMES_COMMA)" \
		--no-self |\
	$(CMD_TRANSLATE) > $@
	@awk '!/^#/ { printf("%s\t%s\t%s\n", $$1, $$2, $$6) }' < $@ |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(NAMES_COMMA) \
	--col-names=$(NAMES_COMMA) \
	--asymmetric > $@.mean.matrix
	@awk '!/^#/ { printf("%s\t%s\t%s\n", $$1, $$2, $$7) }' < $@ |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(NAMES_COMMA) \
	--col-names=$(NAMES_COMMA) \
	--asymmetric > $@.median.matrix
	$(EPILOG)

################################################################################################
## Calculate histograms for ks between all pairs.
analysis.dir/orthologs_%.hists: $(ANALYSIS_FILE_LINKS)
	$(PRELOG)
	@cat $(ANALYSIS_FILE_LINKS) |\
	awk '{ split($$1, a, "$(PARAM_SEPARATOR)"); split($$2, b, "$(PARAM_SEPARATOR)"); \
		printf("%s\t%s\t%s\n", a[1], b[1], $$3); } ' |\
	python $(DIR_SCRIPTS_TOOLS)graph2histograms.py \
		--output-pattern="$@_%s.hist" \
		--output-format="semi" \
		--bin-size=0.1 \
		--min-value=0.0 \
		--sort="$(GENOMES_COMMA)" \
		--no-self |\
	$(CMD_TRANSLATE) > $@
	$(EPILOG)

################################################################################################
analysis.dir/orthologs_%.mean.matrix: analysis.dir/orthologs_%.stats
	$(PRELOG)
	@awk '!/^#/ { printf("%s\t%s\t%s\n", $$1, $$2, $$6) }' < analysis.dir/orthologs_$*.stats |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(NAMES_COMMA) \
	--col-names=$(NAMES_COMMA) \
	--asymmetric > $@
	$(EPILOG)

################################################################################################
analysis.dir/orthologs_%.median.matrix: analysis.dir/orthologs_%.stats
	$(PRELOG)
	@awk '!/^#/ { printf("%s\t%s\t%s\n", $$1, $$2, $$7) }' < analysis.dir/orthologs_$*.stats |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--titles \
	--row-names=$(NAMES_COMMA) \
	--col-names=$(NAMES_COMMA) \
	--asymmetric > $@
	$(EPILOG)

################################################################################################
## Build images for orthologs_ks_genes and orthologs_ks
analysis.dir/orthologs.images: \
		analysis.dir/orthologs_genes.mean.png \
		analysis.dir/orthologs_genes.median.png 
	$(PRELOG)
	@for x in analysis.dir/orthologs_genes*.hist; do \
		python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
		--hardcopy=$${x}.png \
		--xrange=-0.2,5 \
		--truncate \
		< $${x}; \
	done
	@touch $@
	$(EPILOG)

################################################################################################
################################################################################################
################################################################################################
################################################################################################
##
################################################################################################
analysis.dir/ks_master.hist: $(ANALYSIS_FILE_LINKS)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 1; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$(PARAM_INPUT_GENOME_MASTER); \
		genome2=$${genomes[$$x]} ; \
		printf "%s\t%s\n" "bin" $${genome2} > tmp_$${genome2}; \
		awk -v g1=$${genome1} -v g2=$${genome2} \
		'{ if ( (match($$1,g1) && match($$2,g2)) || \
			(match($$1,g2) && match($$2,g1)) ) { print; } }' \
		< $(ANALYSIS_FILE_LINKS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--scale=100.0 \
		--column=3 |\
		grep -v "#" >> tmp_$${genome2}; \
	done; \
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--titles \
	--missing="0" \
	tmp_* |\
	grep -v "#" |\
	python $(DIR_SCRIPTS_TOOLS)csv2csv.py \
	--sort="bin,$(GENOMES_COMMA)" | grep -v "#" | cut -f 1,3- > $@;
	rm -f tmp_*

analysis.dir/ks_master.stats:
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 1; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$(PARAM_INPUT_GENOME_MASTER); \
		genome2=$${genomes[$$x]} ; \
		printf "%s\t%s\n" "bin" $${genome2} > tmp_$${genome2}; \
		awk -v g1=$${genome1} -v g2=$${genome2} \
		'{ if ( (match($$1,g1) && match($$2,g2)) || \
			(match($$1,g2) && match($$2,g1)) ) { print; } }' \
		< $(ANALYSIS_FILE_LINKS) |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--column=3 |\
		grep -v "#" >> tmp_$${genome2}; \
	done; \
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	--titles \
	--missing="0" \
	--sort="$(GENOMES_COMMA)" \
	tmp_* > $@; \
	rm -f tmp_*


## full range plot of histogram versus ks in logscale
analysis.dir/ks_master_full.png: analysis.dir/ks_master.hist
	@python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--columns=all \
	--xtitle="ks" \
	--ytitle="Relative frequency of genes" \
	--logscale=x \
	--normalize \
	--hardcopy=$@ \
	--symbols="g+-,b+-,r+-,c+-,m.-,g.-,b.-,c.-,m.-,g<-,b<-,c<-,m<-" \
	< analysis.dir/ks_master.hist

## lower range plot of histogram versus ks
analysis.dir/ks_master_limited.png: analysis.dir/ks_master.hist
	@python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--columns=all \
	--xtitle="ks" \
	--ytitle="Relative frequency of genes" \
	--xrange="0,5" \
	--normalize \
	--hardcopy=$@ \
	--symbols="g+-,b+-,r+-,c+-,m.-,g.-,b.-,c.-,m.-,g<-,b<-,c<-,m<-" \
	< analysis.dir/ks_master.hist


#####################################################################
## Difference between observed distance matrix and inferred distance matrix
## through tree
analysis.dir/%_difference.matrix: %.tree 
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--format="%6.4f" \
	< $*.tree |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) |\
	python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
		--parameter=`echo $* | perl -p -e "s/_\S+$$//"`.matrix \
		--format="%6.4f" \
		--method=subtract-matrix |\
	$(CMD_TRANSLATE) > $@
	$(EPILOG)

#####################################################################
## Difference between observed distance matrix and inferred distance matrix
## through tree.
## Upper diagonal = fitch, lower diagonal = kitsch (or vice versa)
analysis.dir/difference.matrix: median_fitch.tree median_kitsch.tree
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--format="%6.4f" \
	< median_kitsch.tree |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) > $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--format="%6.4f" \
	< median_fitch.tree |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) |\
	python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
		--parameter=$@_tmp,median.matrix \
		--format="%6.4f" \
		--method=mix-matrix,subtract-matrix |\
	$(CMD_TRANSLATE) > $@
	@rm -f $@_tmp
	$(EPILOG)

################################################################################################
################################################################################################
################################################################################################
################################################################################################
## Analysis of branch lengths in gene trees
##
################################################################################################
ANALYSIS_TARGETS_ERROR_BARS?=fitch kitsch fitch_fitted kitsch_fitted

analysis.dir/error-bars-hook: $(ANALYSIS_TARGETS_ERROR_BARS:%=analysis.dir/error_bars_%.data) \
				$(ANALYSIS_TARGETS_ERROR_BARS:%=analysis.dir/error_bars_%.branches) \
				$(ANALYSIS_TARGETS_ERROR_BARS:%=analysis.dir/error_bars_%.stats)

## get path lengths for all trees and all possible node combinations
analysis.dir/error_bars_%.data: %.trees
	$(PRELOG)
	@-mkdir $@.dir
	@grep -v "#" $*.trees |\
	perl -p -e "s/[|][^X]+X//g" |\
	python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--outgroup=$(PARAM_OUTGROUP) \
		--verbose=2 |\
	grep -v "#" |\
	python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
	--all-on-all --translate --output-pattern=$@.dir/tree_%06i > $@.log
	@find $@.dir -name "tree_*" -exec perl -p -i -e "s/\t/-/; s/_vs_[a-zA-Z]+\d+//g" {} \;
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	--missing="na" --glob="$@.dir/tree_*" |\
	grep -v "#" | sort |\
	awk 'BEGIN { n=0; } \
		!/^#/ { if (n==0) { \
		printf("branch"); for (x=1; x<NF;++x) { printf("\t%i", x); } printf("\n"); } \
		++n; print; }' \
	> $@
	$(EPILOG)

#####################################################################################################
## get path specific error bar estimation for a subset of interesting paths given
## by input.branches
## At the same rename the columns so that they reflect the original components using
## genes.matrices.map for the fitted entries
analysis.dir/error_bars_%_fitted.branches: CMD_ANALYSIS_ERRORS_SUBSTITUTE=| python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=genes.matrices.map --select-rows=branches --column=all

analysis.dir/error_bars_%.branches: analysis.dir/error_bars_%.data input.branches 
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
		--apply=input.branches \
		--column=1 \
		--titles \
	< $< $(CMD_ANALYSIS_ERRORS_SUBSTITUTE) > $@
	$(EPILOG)

## get path specific error bar estimation
analysis.dir/error_bars_%.stats: analysis.dir/error_bars_%.branches
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--flat --rows --column=all --format=%6.4f \
	< $< > $@
	$(EPILOG)

#####################################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
