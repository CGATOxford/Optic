################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.blast 2040 2008-07-25 09:41:05Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
ERROR=error

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
################################################
## Use local directory, because blast files can be 
## big and /tmp might not hold it all.
DIR_TMP?=./

################################################
PARAM_BLASTP_NUMJOBS?=100
PARAM_BLASTP_CHUNKSIZE?=100

## Format of searches
PARAM_BLASTP_FORMAT?=protein

## command to execute 
PARAM_BLASTP_COMMAND?=legacy_blast.pl blastall -p blastp

## Note: previously formatdb
PARAM_FORMAT_COMMAND=makeblastdb

## blastp options
PARAM_BLASTP_OPTIONS?=-e 1e-5 -v 5000 -b 5000 -F F 
## options to the parser
PARAM_BLASTP_PARSING?=--ends --table --len --noheader --log --zero
## number of fields in tabular output
PARAM_BLASTP_NUMFIELDS?=14

## whether or not to compress the final output
PARAM_BLASTP_COMPRESS?=
################################################
# Section parameters: end
################################################

UPDATE_HOOK?=

## requisite files
FILES_REQUISITES=queries.fasta sbjcts.fasta

##################################################
##################################################
##################################################
## Commands to execute - can be overwritten for debugging
CMD_BLASTP?=$(PARAM_BLASTP_COMMAND) $(PARAM_BLASTP_OPTIONS)
CMD_PARSE_BLAST?=perl $(DIR_SCRIPTS_GENEPREDICTION)psiblastparser.pl $(PARAM_BLASTP_PARSING)

################################################
## blast alignments
BLAST_QUERIES=$(wildcard query_*.fasta)
BLAST_TARGETS=$(BLAST_QUERIES:%.fasta=%.blast.gz)

BLAST_FINAL_TARGET=blast.links.gz

ifeq ($(PARAM_BLASTP_FORMAT), protein)
FORMATDB_FORMAT=-dbtype prot
else
FORMATDB_FORMAT=-dbtype nucl
endif

nop:

blast: blast.prepare blast.run blast.finish
	$(EPILOG)
	@touch $@

## build databases and queries for each genome excluding itself.
blast.prepare: $(UPDATE_HOOK)
	@echo "#################`date`#############################" $(TOLOG)
	@echo "# Gene prediction pipeline of the Ponting Group, MRC" $(TOLOG)
	@echo "# This is Makefile version $$Id: Makefile.blast 2040 2008-07-25 09:41:05Z andreas $$" $(TOLOG)
	@echo "# Subsection: BLAST runs" $(TOLOG)
	@echo "# Working directory: $(CURDIR)" $(TOLOG)
	@echo "# Parameters" $(TOLOG)
	@$(MAKE) -p nop | awk '/^# Variables/ { keep = 1} /^# Directories/ { keep = 0; } \
	/^PARAM_/ {if (keep) {print;}} \
	/^SHELL/ {if (keep) {print;}} \
	/^INPUT_/ {if (keep) {print;}} \
	/^DIR_/ {if (keep) {print;}}' | sort $(TOLOG)
	$(CMD_LOG) "creating working direcotry blast.dir"
	@rm -rf blast.dir
	@$(MAKE) blast.dir
	$(CMD_LOG) "preparing query files"
	@if test -e blast.recover.fasta; then \
		$(CMD_LOG2) "taking sequences from blast.recover.fasta"; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -p blast.dir/query_ -s .fasta $(PARAM_BLASTP_CHUNKSIZE) < blast.recover.fasta  >> $@; \
	else \
		$(CMD_LOG2) "taking sequences from queries.fasta"; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -p blast.dir/query_ -s .fasta $(PARAM_BLASTP_CHUNKSIZE) < queries.fasta  >> $@; \
	fi
	$(CMD_LOG) "preparing search database"
	@if [[ ! -e sbjcts.fasta.phr && ! -e sbjcts.fasta.nhn && ! -e sbjcts.fasta.pal ]]; then \
		$(PARAM_FORMAT_COMMAND) -in sbjcts.fasta -title sbjcts $(FORMATDB_FORMAT); \
	fi
	$(CMD_LOG) "running `grep -c ">" queries.fasta` queries against `grep -c ">" sbjcts.fasta` sbjcts."
	@touch $@

#########################################################################
blast.run: blast.prepare
	$(PRELOG)
	@if test -e blast.dir; then \
		$(MAKE) -C blast.dir -k -j $(PARAM_BLASTP_NUMJOBS) blast-hook; \
	fi
	@touch $@
	$(EPILOG)

blast-hook: $(BLAST_TARGETS)

blast.finish: blast.run $(BLAST_FINAL_TARGET) 
	$(PRELOG)
	@touch $@
	$(EPILOG)

## do check for empty files!
#	$(MAKE) blast.clean

## run a single blast job for one chunk
%.blast.gz: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	'$(CMD_BENCHMARK) --log=$*.log "$(CMD_BLASTP) -i $< -d ../sbjcts.fasta | $(CMD_PARSE_BLAST)" | gzip > $@' \
	< /dev/null > /dev/null
	$(EPILOG)

## has to be one single line command, otherwise using pid won't work.
blast.links.gz: blast.run
	$(PRELOG)
	@rm -f $(DIR_TMP)$@_$$$$; \
	$(CMD_BENCHMARK) \
		$(DIR_SCRIPTS_GENEPREDICTION)optic/combine_blast_results.bash \
		$(DIR_TMP)$@_$$$$ $@.error blast.dir/ $(PARAM_BLASTP_NUMFIELDS); \
	if test -e blast.recover.links.gz; then \
		cat blast.recover.links.gz >> $(DIR_TMP)$@_$$$$; \
	fi; \
	$(CMD_BENCHMARK) gunzip < $(DIR_TMP)$@_$$$$ |\
	$(CMD_BENCHMARK) sort -k1,1 -k3,3n -T $(DIR_TMP) | gzip > $@; \
	rm -f $(DIR_TMP)$@_$$$$
	cat blast.dir/*.log > $@.log
	$(EPILOG)

#########################################################################
blast.clean:
	$(PRELOG)
	@if [ -s $(BLAST_FINAL_TARGET) ]; then \
		$(CMD_LOG2) "removing blast.dir."; \
		rm -rf blast.dir; \
	else \
		$(CMD_LOG2) "not removing blast.dir."; \
	fi 
	$(EPILOG)

#########################################################################
# combine links after a crash. Build the following files:
#    file with all links           : blast.recover.links (append to an old file if already existing)
#    file with queries to be rerun : blast.recover.fasta
#		add incomplete entries
#		add last entry mentioned
blast.recover:
	$(CMD_LOG) "$@ : starting."
	touch $@.links.new
	$(DIR_SCRIPTS_GENEPREDICTION)optic/combine_blast_results.bash $@.links.new $@.error blast.dir/ $(PARAM_BLASTP_NUMFIELDS)
	if test -e $@.links; then \
		cat $@.links.new >> $@.links; \
		rm -f $@.links.new; \
	else \
		mv $@.links.new $@.links; \
	fi
	perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl -r <(cut -f 1 $@.links | uniq) < queries.fasta > $@.fasta
	perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl <(grep "skipped" blast.recover.error | cut -d " " -f 3) < queries.fasta >> $@.fasta
	for file in blast.dir/*.blast; do \
		perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl <(tail -n 10 $$file | awk 'NF==$(PARAM_BLASTP_NUMFIELDS)' | tail -n 1 | cut -f 1) \
		< queries.fasta >> $@.fasta
	done
	$(CMD_LOG) "$@ : `grep -c ">" $@.fasta` sequences left to run."
	$(CMD_LOG) "$@ : finished."

blast.show-results:
	for file in blast.dir/query_*.blast; do \
		echo -e -n "$${file}\t"; \
		perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $${file} | grep -v "#"; \
	done

blast.show-progress:
	@echo "# blast status at `date`" >> blast.progress
	@find blast.dir -name "query_*.blast" -exec cat {} \; |\
	perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl |\
	awk -v total=`grep -c ">" queries.fasta` \
		'!/#/ {n=$$1} \
	END {   printf("# NFIN\tNTOT\tNLEFT\n"); \
		printf("%i\t%i\t%i\n",n,total,total-n);}' \
	>> blast.progress
	@tail blast.progress

blast.show-unfinished:
	for file in blast.dir/query_*.log; do \
		tail -n 1 $${file} | grep -q "job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "unfinished: $${file}"; \
		fi \
	done

blast.remove-unfinished:
	$(PRELOG)
	for file in blast.dir/query_*.log; do \
		tail -n 1 $${file} | grep -q "job finished"; \
		if [[ $$? == 1 ]] ; then \
			prefix=`echo $${file} | perl -p -e "s/.log//"`; \
			echo "deleting $${prefix}.{log,blast}"; \
			rm -f $${prefix}.{log,blast}; \
		fi \
	done
	$(EPILOG)

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
