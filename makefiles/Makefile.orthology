################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology 2039 2008-07-25 09:40:34Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## genomes to use
PARAM_GENOME1?=
PARAM_GENOME2?=

## project name
PARAM_PROJECT_NAME?=geneprediction
PARAM_INPUT_FILES?=

################################################
PARAM_STEP1_NUMJOBS?=100
PARAM_STEP1_CHUNKSIZE?=1000000

################################################
## options for filtering links
PARAM_MIN_KS?=0
PARAM_MIN_KA?=0.5
PARAM_MIN_MIN_COVERAGE=0
PARAM_MIN_MAX_COVERAGE=0.75
PARAM_USE_KS=1

# refuse to process clusters with more than # number
# of links.
PARAM_MAX_LINKS_PER_CLUSTER?=200000

################################################
# Section parameters: end
################################################

FILES_REQUISITES?=$(PARAM_INPUT_FILES)

################################################
################################################
################################################
################################################
################################################
################################################

##############################################################################
## primary targets
all: filtered.gz single_linkage.gz data.prepare data.run data.finish 



## do analysis
post: stats

##############################################################################
show_unfinished:
	for file in `find . -name "*.tree" -print`; do \
		result=`grep -v "^make" $$file | tail -n 1 | grep -v "finished"`; \
		if [ ! -z "$${result}" ];  then \
			echo "$$file has not finished";  \
		fi \
	done

##############################################################################
## dangerous, assumes that process stopped at the started stage.
remove_unfinished:
	for file in `find . -name "*.tree" -print`; do \
		result=`grep -v "^make" $$file | tail -n 1 | grep -v "finished"`; \
		if [ ! -z "$${result}" ];  then \
			echo "removing $$file";  \
			rm -f $$file; \
		fi \
	done

##############################################################################
clean:
	$(PRELOG)
	@if [ -s interpretation ]; then \
		$(CMD_LOG2) "removing data.dir."; \
		rm -rf data.dir; \
	else \
		$(CMD_LOG2) "not removing data.dir."; \
	fi 
	$(EPILOG)

distclean: clean
	rm -rf data*
	rm -f single_linkage*
	rm -f interpretation
	rm -f ortho*

##############################################################################
## Step 1: filter links and build clusters
##############################################################################
filtered.gz: $(PARAM_INPUT_FILES)
	$(PRELOG)
	@cat $(PARAM_INPUT_FILES) |\
	seq_pairs_filter_kaks_results \
	--ds_threshold $(PARAM_MIN_KS) \
	--dn_threshold $(PARAM_MIN_KA) \
	--coverage_fragment $(PARAM_MIN_MAX_COVERAGE) \
	--coverage_residues $(PARAM_MIN_MIN_COVERAGE) \
	--output_dn_only \
        --err_log $@.errors \
	--verbose \
	--results_summary $@.summary |\
	gzip > $@
	$(EPILOG)

##############################################################################
## helper function to check cluster size
filtered.components: filtered
	$(PRELOG)
	ga_components -m $@.map -s $@.sizes filtered > $@
	$(EPILOG)

##############################################################################
## Note: seq_pairs_cluster_by_single_linkage has problems with | pipes.
single_linkage.gz: filtered.gz
	$(PRELOG)
	@gunzip < $< > $@.tmp
	@$(CMD_BENCHMARK) \
	seq_pairs_cluster_by_single_linkage \
	    --err_log $@.errors \
            --verbose \
	< $@.tmp 2>$@.log |\
	gzip > $@ 
	@rm -f $@.tmp
	$(EPILOG)

##############################################################################
## Step 1: build global tree
##############################################################################
DATA_QUERIES1=$(wildcard *.ks)
DATA_TARGETS1=$(DATA_QUERIES1:%.ks=%.tree)  
DATA_QUERIES2=$(wildcard *.sub_matrix)
DATA_TARGETS2=$(DATA_QUERIES2:%.sub_matrix=%.kitsch)

data: single_linkage.gz data.prepare data.run data.finish 
	@touch $@
	$(EPILOG)	

data.run: data.prepare
	$(PRELOG)
	@if [ -d data.dir ]; then \
		$(CMD_BENCHMARK) $(MAKE) -C data.dir -k -j $(PARAM_STEP1_NUMJOBS) data-hook $(TOLOG); \
	fi
	@touch $@
	$(EPILOG)

data-hook: $(DATA_TARGETS1)

data-hook-subtree: $(DATA_TARGETS2)

data.finish: data.run rejoined full_tree

data.prepare: single_linkage.gz
	$(PRELOG)
	@$(MAKE) data.dir 
	@if [ -d data.dir ]; then \
		$(MAKE) -C data.dir tree.bash; \
		gunzip < $< |\
		grep -v "^#" |\
		perl -p -e "s/:/@/g" |\
		seq_pairs_split_clusters_by_size.pl \
	    		--path data.dir/cluster.ks \
			> $@; \
	fi
	$(EPILOG)

##############################################################################
%.tree: %.ks
	$(CMD_MSG) "building tree for cluster $* started." 
	@nlinks=`wc -l < $<` ;\
	if [[ $$nlinks -lt $(PARAM_MAX_LINKS_PER_CLUSTER) ]] ; then \
		$(CMD_REMOTE_SUBMIT) $(CMD_BENCHMARK) \
			$(CURDIR)/tree.bash $* < /dev/null > $@; \
	else \
		$(CMD_MSG2) "refusing to build tree for cluster $*: $${nlinks} links"; \
		$(CMD_LOG2) "refusing to build tree for cluster $*: $${nlinks} links"; \
		touch $@; \
	fi
	$(CMD_MSG) "building tree for cluster $* finished." 

##############################################################################
## run upgma to create global tree
%.upgma: %.ks
	$(CMD_MSG) "building upgma-tree for $* started."
	@tree_upgma \
		--matrix_output \
		--input_format p \
		--output_format p \
		--header \
		--err_log $*.upgma.errors < $*.ks > $@
	$(CMD_MSG) "building upgma-tree for $* finished."

##############################################################################
## split global tree into subtrees
%.after: %.upgma
	$(CMD_MSG) "extracting subtrees for $* started."
	@tree_extract_sub_trees_with_matrix \
		--unchanged_tree_file $*.nh.unchanged \
		--err_log $*.extract_sub_tree.errors \
		--tree_files_path $*.orig_sub_tree \
		--sub_matrix_files_path $*.sub_matrix \
		--description "$*.after" \
		--input_format p \
		--output_format p  < $*.upgma > $@
	$(CMD_MSG) "extracting subtrees for $* finished."

##############################################################################
## run kitsch to optimise all large sub-branches
%.kitsch: %.sub_matrix
	$(CMD_MSG) "refining subtree $* started."
	@tree_kitsch \
        --input_format p \
                --iterations 30 \
                --weighting 3.0 \
                --header \
                --err_log $@.errors \
                        < $*.sub_matrix \
                        > $@
	$(CMD_MSG) "refining subtree $* finished."

##############################################################################
## rebuild the complete trees
rejoined: data.run
	$(PRELOG)
	@cd data.dir; \
	find . -name "*.kitsch" -exec cat {} \; |\
        tree_rejoin_subbranches \
        --output_path "[FILENAME].rejoined" \
	--err_log ../$@.errors > ../$@
	@touch $@
	$(EPILOG)

full_tree: rejoined
	$(PRELOG)
	@find data.dir/ -name "*.rejoined" -exec cat {} \; > $@
	@find data.dir/ -name "*.unchanged" -exec cat {} \; >> $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Various management targets
##############################################################################

##############################################################################
## remove unfinished runs
data.remove-unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e data.dir ]; then \
	    for file in data.dir/cluster.*.tree; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 ]] ; then \
			    echo "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."; \
	if [[ $$n > 0 ]] ; then \
		rm -f data.run; \
	fi
	$(EPILOG)

##############################################################################
## display runs that have not finished
data.show-unfinished:
	@for file in data.dir/cluster.*.tree; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

##############################################################################
## Step 2: interprete tree
##############################################################################
data.finish: full_tree interpretation components
	$(EPILOG)
	@touch $@

interpretation: full_tree 
	$(PRELOG)
	@$(CMD_BENCHMARK) \
	tree_interpret_nh \
	--x_taxon_regex "($(PARAM_GENOME1).*)" \
	--y_taxon_regex "($(PARAM_GENOME2).*)" \
	--output_path "orthology_[FILENAME]" \
	--x_taxon_name $(PARAM_GENOME1) \
	--y_taxon_name $(PARAM_GENOME2) \
	--orphaned_clades "orthology_orphaned" \
	--err_log $@.errors \
	< full_tree > $@
	@for file in orthology_orphaned* orthology_orth*; do \
		perl -p -i -e "s/@/:/g;" $$file; \
	done
	@touch $@
	$(EPILOG)

components: interpretation
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/orthologs2list.py \
		$(PYTHON_OPTIONS) \
		--format=components \
		< interpretation > $@
	$(EPILOG)

#########################################################################
## Scripts for cluster runs
#########################################################################
## Note: when moving the files back use find as there can be many files.
define TREE_SCRIPT
#!/bin/bash\n\
dir_tmp=$(DIR_TMP)\$$1_\$$$$/\n\
dir_src=`pwd`\n\
echo \"# started at \`date\`\" \n\
echo \"# execution host   :\`hostname\`\" \n\
echo \"# working directory: \$${dir_tmp}\" \n\
echo \"# source directory : \$${dir_src}\" \n\
rm -rf \$${dir_tmp}\n\
mkdir \$${dir_tmp}\n\
cp \$$1.ks \$${dir_tmp}\n\
cp Makefile \$${dir_tmp}\n\
cd \$${dir_tmp}\n\
make -s \$$1.upgma \$$1.after \n\
if [ \$$? != 0 ]; then exit 2; fi\n\
make -s data-hook-subtree \n\
if [ \$$? != 0 ]; then exit 1; fi\n\
echo "# moving files to \$${dir_src}:" \n\
rm -f \$${dir_tmp}Makefile \n\
find \$${dir_tmp} -name \"*\" -mindepth 1 -exec mv {} \$${dir_src} \; \n\
if [ \$$? != 0 ]; then exit 3; fi\n\
rmdir \$${dir_tmp}\n\
if [ \$$? != 0 ]; then exit 4; fi\n\
echo \"# tree.bash finished at \`date\`\" \n\
exit 0
endef

tree.bash:
	$(PRELOG)
	@echo -e "${TREE_SCRIPT}" > $@
	@chmod 770 $@
	$(EPILOG)

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
