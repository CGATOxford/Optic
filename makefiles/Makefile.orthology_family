################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_family 783 2006-09-20 16:50:56Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## temporary local directory
DIR_TMP=/tmp/

################################################
## Cluster parameters
## queues to use
PARAM_QUEUE=short_jobs.q

## priority to use
PARAM_PRIORITY=0

################################################
## number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## prefixes of genomes
PARAM_SRC_SCHEMAS?=

PARAM_PATTERN_GENOME_MASTER=^dmel_vs_dmel

PARAM_SEPARATOR?=|

PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)$(PARAM_SEPARATOR)

## directory with clustering information
PARAM_DIR_SRC_CLUSTERS?=../../../orthology_multiple/

## directory with sequence information
PARAM_DIR_SRC_SEQUENCES?=../../../../predictions/

## graph between orthologs
PARAM_SRC_ORTHOLOGS_LINKS=$(PARAM_DIR_SRC_CLUSTERS)orthologs.links.gz

PARAM_SRC_LINKS?=../step3.scaled.links

PARAM_SRC_LINKS_ALL?= ../step3.all.links

PARAM_MALI_SIZE_DIALIGN?=50
PARAM_MALI_SIZE_MUSCLE?=500

################################################
PARAM_KAKS_MIN_LENGTH?=100

## Number of jobs
PARAM_KAKS_NUM_JOBS?=100

PARAM_KAKS_CHUNKSIZE=1000

################################################
# Section parameters: end
################################################

FILES_REQUISITES=input.ids

## Makefile for analysing a family
## input is in list ids

prepare: create-log check-setup

################################################
## colour code for colouring graphs.
## I try to make the colour code similar to belvu's colouring.
## (sort names alphabetically and then assign colours).
colours:
	$(PRELOG)
	@awk -v genomes="`echo $(PARAM_SRC_SCHEMAS) | perl -p -e 's/ /\n/g' | sort | perl -p -e 's/\n/ /'`" \
	-v colours="blue red green orange pink gold magenta cyan purple orchid khaki yellowgreen " \
	-v codes="0,0,255 255,0,0 0,255,0 255,204,0 255,102,204 204,204,0 204,102,255 102,255,255 204,102,204 204,204,102 153,204,0 204,255,0" \
	'BEGIN { split(genomes, g, " "); split(colours, c, " "); \
		 split(codes, o, " "); \
	      	for ( x in g ) { printf("%s\t%s\t%s\n", g[x], c[x], o[x]); } \
	       } ' > $@
	$(EPILOG)

###############################################################################
###############################################################################
###############################################################################
###############################################################################
## general routines to go get clusters that the query set belongs to
###############################################################################
## get components that input ids belong to 
%.components: input.ids
	$(PRELOG)
	@grep -f input.ids $(PARAM_DIR_SRC_CLUSTERS)$*.components.map > $@
	$(EPILOG)

## get all members of the selected components
%.members: %.components
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
	--filename-tokens=<(cut -f 2 $*.components) \
	--columns=2 \
	< $(PARAM_DIR_SRC_CLUSTERS)$*.components.map | grep -v "#" > $@
	$(EPILOG)

## build clustering assignment
%.components.map: %.members
	$(PRELOG)
	@grep -f $*.members $(PARAM_DIR_SRC_CLUSTERS)$*.components.map > $@
	$(EPILOG)

###############################################################################
###############################################################################
###############################################################################
###############################################################################
## visualize graph based on orthology assignments, colour it by species or 
## cluster
###############################################################################
GRAPHS_LEVELS=orthologs orthologs_consistent
GRAPHS_TARGETS=$(GRAPHS_LEVELS:%=%_by_cluster.gdl) 

graphs: orthologs_by_species.gdl $(GRAPHS_TARGETS)

## return subgraphs containing links in clusters
%.links: %.components.map
	$(PRELOG)
	@gunzip < $(PARAM_SRC_ORTHOLOGS_LINKS) |\
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl $*.components.map > $@
	$(EPILOG)

## build graph based on orthology assignments, colour it by cluster
%_by_species.gdl: %.links %.colour_by_species_aisee
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)graph_links2gdl.py --colours=$*.colour_by_species_aisee < $*.links > $@
	$(EPILOG)

## build graph based on orthology assignments, colour it by cluster
%_by_cluster.gdl: %.links %.colour_by_cluster_aisee
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)graph_links2gdl.py --colours=$*.colour_by_cluster_aisee < $*.links > $@
	$(EPILOG)

###############################################################################
###############################################################################
###############################################################################
###############################################################################
## build multiple alignments and do kaks
###############################################################################
MALIS_LEVELS=orthologs
MALIS_TARGETS=$(MALIS_LEVELS:%=%_cds.raw_mali) $(MALIS_LEVEL:%=%_cds.na_mali)

malis: $(MALIS_TARGETS)

###############################################################################
## extract cds sequences
%_cds.fasta: %.components.map
	$(PRELOG)
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl \
		$*.components.map \
		< $(PARAM_DIR_SRC_SEQUENCES)$${genome1}/export_clustering.dir/export_clustering_cds.fasta >> $@; \
	done
	$(EPILOG)

###############################################################################
## extract peptide sequences
%_peptides.fasta: %.components.map
	$(PRELOG)
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]} ; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl \
		$*.components.map \
		< $(PARAM_DIR_SRC_SEQUENCES)$${genome1}/export_clustering.dir/export_clustering_peptides.fasta >> $@; \
	done
	$(EPILOG)

################################################
%_cds.raw_mali: %_cds.fasta
	$(PRELOG)
	$(CMD_LOG) "building multiple alignment of cluster $* started."
	@numseq=`grep -c ">" $*_cds.fasta`; \
	if [[ $${numseq} -le $(PARAM_MALI_SIZE_DIALIGN) ]]; then \
		$(CMD_LOG2) "dialign on $*.fasta with $${numseq} sequences: started"; \
		$(CMD_REMOTE_SUBMIT)dialign -nt -o -fn $* -fa -stdo $*_cds.fasta < /dev/null > $@.log; \
		if [ $$? != 0 ]; then exit 1; fi; \
		python $(DIR_SCRIPTS_GENEPREDICTION)correlate_fasta_identifier.py $*_cds.fasta < $*.fa |\
		perl -p -e "s/^\s+$$//" > $@; \
		rm -f $*.fa; \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: finished"; \
	else \
	if [[ $${numseq} -le $(PARAM_MALI_SIZE_MUSCLE) ]]; then \
		$(CMD_LOG2) "muscle on $*.fasta with $${numseq} sequences: started"; \
		$(CMD_REMOTE_SUBMIT)muscle -stable -loga $@.log -in $*_cds.fasta -out $@ -quiet < /dev/null > $@.log; \
		if [ $$? != 0 ]; then exit 1; fi; \
		$(CMD_LOG2) "muscle on $*.fasta with $${numseq} sequences: finished"; \
	else \
		$(CMD_LOG2) "alignment on $*.fasta with $${numseq} sequences: declined."; \
		touch $@; \
	fi; \
	fi
	$(CMD_LOG) "building multiple alignment of cluster $* finished."
	$(EPILOG)

################################################
## pruning multiple alignment to make sure that there are codons
%.na_mali: %.raw_mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/prune_multiple_alignment.py \
	--translate=$*.aa_mali \
	--master-pattern="$(PARAM_PATTERN_GENOME_MASTER)" \
	--mark-codons \
	--remove-stops \
	< $*.raw_mali > $@
	$(EPILOG)

###############################################################################
## build graph based on all links
## build upgma-tree of all members. Label nodes in the tree with clusters
clusters: components
	$(PRELOG)
	@cut -f 2 components | sort -n | uniq | perl -p -e 's/\n/\$$\n/; s/^/[^0-9]/' > $@
	$(EPILOG)

## all members in clusters
clusters.members: clusters
	$(PRELOG)
	@grep -f clusters $(PARAM_SRC_COMPONENTS) > $@
	$(EPILOG)

## all links between them
clusters.links: clusters.members
	$(PRELOG)
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl clusters.members < $(PARAM_SRC_LINKS_ALL) > $@
	$(EPILOG)

clusters.map_members: clusters.members
	$(PRELOG)
	@awk '{printf("%s\t%s|%s\n", $$1, $$1, $$2);}' < clusters.members > clusters.map_members
	$(EPILOG)

clusters_upgma.tree: clusters.links clusters.map_members
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=clusters.map_members --column=1,2 < clusters.links | tree_upgma -i p > $@
	$(EPILOG)

###############################################################################
%.colour_by_species_aisee:  %.components.map colours
	$(PRELOG)
	@awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\n", $$1, a[1]); }' \
	< $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=<(cut -f 1,2 colours) --columns-token=2 > $@
	$(EPILOG)

%.colour_by_species_ht:  %.components.map colours
	$(PRELOG)
	@awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\n", $$1, a[1]); }' \
	< $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=<(cut -f 1,3 colours) --columns-token=2 > $@
	$(EPILOG)

%.map_cluster2colour_aisee: %.components.map
	$(PRELOG)
	@cut -f 2 $*.components.map |\
	sort -n | uniq | awk '{printf("%s\t%s\n",$$1,++a % 16 );}' > $@
	$(EPILOG)

# 	awk '{if ($$1<30) {printf("%s\t%i,%i,%i\n",$$2,8*$$1,0,0);} else \
# 	if ($$1<60) {printf("%s\t%i,%i,%i\n",$$2,0,8*($$1-30),0);} else \
# 	{printf("%s\t%i,%i,%i\n",$$2,0,0,7*($$1-60));}}' \

%.map_cluster2colour_ht: %.components.map
	$(PRELOG)
	@cut -f 2 $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)numbers2rgb.py \
	--method=random_rgb > $@
	$(EPILOG)

%.colour_by_cluster_aisee: %.components.map %.map_cluster2colour_aisee
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$*.map_cluster2colour_aisee --columns-token=2 < $*.components.map > $@
	$(EPILOG)

%.colour_by_cluster_ht:  %.components.map %.map_cluster2colour_ht
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=$*.map_cluster2colour_ht --columns-token=2 < $*.components.map > $@
	$(EPILOG)

%.colour_by_species_ht: %.components.map colours
	$(PRELOG)
	@awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\n", $$1, a[1]); }' \
	< $*.components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=colours --columns-token=2 > $@
	$(EPILOG)

###############################################################################
## Run all-vs-all pairwise alignment
%.all_vs_all:
	python $(DIR_SCRIPTS_TOOLS)align_all_vs_all.py < %_peptides.fasta > %_peptides.pairs

###############################################################################
# peptides2cds:
%.peptides2cds: %_peptides.fasta %_cds.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)peptides2cds.py \
	 	--cds=$*_cds.fasta < $*_peptides.fasta > $@
	$(EPILOG)

## get pairwise blast alignments for all orthologs
## only take the highest scoring pairing for a set of
## transcripts per gene.
%.pairs: %.all_vs_all %.peptides2cds
	$(PRELOG)
	python $(DIR_SCRIPTS_GENEPREDICTION)links2fasta.py \
	--sequences=$*_cds.fasta \
	--map=$*.peptides2cds \
	--codons \
	--nogaps \
	--format=fasta \
	--no-identical \
	--expand \
	--outfile=$@.links \
	--min-length=$(PARAM_KAKS_MIN_LENGTH) \
	< $*.all_vs_all > $@
	$(EPILOG)

%.kaks-hook: %.kaks.prepare %.kaks.run %.kaks.finish ;

%.kaks.prepare: orthologs.pairs
	$(PRELOG)
	@$(MAKE) $*.kaks.dir
	@split -l $(PARAM_KAKS_CHUNKSIZE) -a 5 <(grep -v "#" $*.pairs) $*.kaks.dir/$*_
	@for file in $*.kaks.dir/$*_*; do mv $${file} $${file}.chunk; done
	@touch $@
	$(EPILOG)

KAKS_QUERIES=$(wildcard *.chunk)
KAKS_TARGETS=$(KAKS_QUERIES:%.chunk=%.kaks)

%.kaks.run: %.kaks.prepare	
	$(PRELOG)
	@if test -e $*.kaks.dir; then \
		$(MAKE) -C $*.kaks.dir -j $(PARAM_KAKS_NUMJOBS) -k kaks.run-hook; \
	fi
	@touch $@
	$(EPILOG)

kaks.run-hook: $(KAKS_TARGETS)

%.kaks.finish: 
	$(PRELOG)
	$(EPILOG)

%.kaks: %.chunk
	@$(CMD_REMOTE_SUBMIT) \
	seq_pairs_kaks \
	--cdna_sequences $*.chunk \
	--err_log $*.err \
	--aligned \
	--temp_directory /tmp/$@_$$$$ \
	< /dev/null > $@ 
	$(CMD_CLOSE)

%.kaks: %.kaks-hook
	$(PRELOG)
	@find $*.kaks.dir -name "*.kaks" -exec grep -v "#" {} \;  > $@
	$(EPILOG)

###############################################################################
## build graph based on components
components.links: clusters.members clusters.links
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_components.pl clusters.members < clusters.links > $@
	$(EPILOG)

###############################################################################
%.gdl: %.links %.colour_by_species
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)graph_links2gdl.py --colours=$*.colour_by_species < $*.links > $*.gdl
	$(EPILOG)

%.components:
	$(PRELOG)
	@ga_components -m $*.components.map -s $*.components.sizes $*.links > $@
	$(EPILOG)

## Build UPGMA tree from ks data
%_ks_upgma.tree: %.kaks
	$(PRELOG)
	@cut -f 1,2,4 $*.kaks |\
	tree_upgma -i p > $@
	$(EPILOG)

## Build UPGMA tree from ks data
%_ka_upgma.tree: %.kaks
	$(PRELOG)
	@cut -f 1,2,3 $*.kaks |\
	tree_upgma -i p > $@
	$(EPILOG)

%_ks_kitsch.tree: %.kaks
	$(PRELOG)
	@cut -f 1,2,4 $*.kaks |\
	tree_kitsch \
		--input_format p \
		--iterations 30 \
		--weighting 3.0 \
		--header \
		--err_log $@.err \
	> $@
	$(EPILOG)

##############################################################################
## run upgma to create global tree
%_ks.subtrees: %.kaks
	$(CMD_LOG) "building upgma-tree for $* started."
	@rm -rf $@.dir
	@$(MAKE) $@.dir
	@cut -f 1,2,4 $*.kaks |\
	tree_upgma \
		--matrix_output \
		--input_format p \
		--output_format p \
		--header \
		--err_log $@.upgma.errors |\
	tree_extract_sub_trees_with_matrix \
		--unchanged_tree_file   $*.nh.unchanged \
		--err_log               $@.subtrees.errors \
		--tree_files_path       $@.dir/$*.orig_sub_tree \
		--sub_matrix_files_path $@.dir/$*.sub_matrix \
		--description "$*.subtrees" \
		--input_format p \
		--output_format p > $@
	$(CMD_LOG) "building upgma-tree for $* finished."

##############################################################################
## run kitsch to optimise all large sub-branches
KITSCH_QUERIES=$(wildcard *.sub_matrix)
KITSCH_TARGETS=$(KITSCH_QUERIES:%.sub_matrix=%.kitsch)

%.kitsch: %.sub_matrix
	$(CMD_LOG) "refining subtree $* started."
	@tree_kitsch \
        --input_format p \
                --iterations 30 \
                --weighting 3.0 \
                --header \
                --err_log $@.errors \
                        < $*.sub_matrix \
                        > $@
	$(CMD_LOG) "refining subtree $* finished."

##############################################################################
## rebuild the complete trees
rejoined: step1.run
	$(PRELOG)
	@cd step1.dir; \
	find . -name "*.kitsch" -exec cat {} \; |\
        tree_rejoin_subbranches \
        --output_path "[FILENAME].rejoined" \
	--err_log ../$@.errors > ../$@
	@touch $@
	$(EPILOG)


%_upgma.tree: %.links
	$(PRELOG)
	@cat $*.links |\
	tree_upgma -i p > $@
	$(EPILOG)

clean:
	$(PRELOG)
	rm -f clusters*
	rm -f members input* orthologs*
	rm -f components* *colour*
	$(EPILOG)

##############################################################################
## Build a colour map for trees
## (sort names alphabetically and then assign colours).
tree_colours: orthologs.members
	$(PRELOG)
	@awk '!/^#/ {split( $$0, a, "$(PARAM_SEPARATOR)"); printf ("%s\t%s\n", $$1, a[1]); }' \
	< $^ > $@
	$(EPILOG)

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
