################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step8 2011 2008-07-04 10:40:51Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
# load the data into the datatbase and execute optional steps.
#
# The following tables are filled in this step:
# predictions:	all predicted transcripts
# disruptions:	locations of frameshifts and stop codons in predicted transcripts
# introns:	intron locations
# cds:		sequences of exons
# transcripts:	transcripts extended towards the next stop
#
# Optional steps include:
# $(PARAM_DO_ASSEMBLY):		assemble contigs due to joining predictions
# $(PARAM_DO_PSEUDOGENES):	predict pseudogenes (broken?)
#
##############################################################################
step8: step7 step8.prepare step8.run step8.check
	@touch $@
	$(EPILOG)


ifdef PARAM_DO_ASSEMBLY
ASSEMBLY_TARGETS=step8.assembly.predictions.gz step8.assembly_sizes.load
ASSEMBLY_RESULTS=step8.assembly.predictions.gz
else
ASSEMBLY_RESULTS=step8.collected.predictions.gz $(PSEUDOGENES_RESULTS)
endif

ifdef PARAM_DO_PSEUDOGENES
PSEUDOGENES_TARGETS=step8.pseudogenes.predictions.gz
PSEUDOGENES_RESULTS=step8.pseudogenes.predictions.gz
endif

##############################################################################
## setting variables for merging peptides. Instead of PARAM_INPUT_PEPTIDES
## use STEP8_MERGE_PEPTIDES
STEP8_MERGE_PEPTIDES=$(wildcard step8_merge.peptides.fasta)

ifeq ($(STEP8_MERGE_PEPTIDES), )
STEP8_MERGE_PEPTIDES=$(PARAM_INPUT_PEPTIDES)
endif

STEP8_MERGE_PREDICTIONS=$(wildcard step8_merge.predictions)

step8.prepare: step7 step8.collected.predictions.gz \
		$(PSEUDOGENES_TARGETS) \
		$(ASSEMBLY_TARGETS) \
		step8.predictions.gz \
		step8.load
	$(PRELOG)
	@touch $@
	$(EPILOG)

step8.run: step8.prepare 
	$(PRELOG)
	@$(MAKE) -j $(PARAM_STEP8_NUMJOBS) step8.run-hook
	@touch $@
	$(EPILOG)

step8.run-hook: step8.cds step8.cds.load \
		step8.map_prediction2genome step8.map_prediction2genome.load \
		step8.transcripts step8.transcripts.load \
		step8.disruptions step8.disruptions.load \
		step8.introns step8.introns.load 

##############################################################################
## combine all previous predictions and renumber
##############################################################################
step8.collected.predictions.gz: step5.predictions.gz step6.predictions.gz step7.predictions.gz $(STEP8_MERGE_PREDICTIONS)
	$(PRELOG)
	@cat $^ | gunzip | grep -v "#" | cut -f 2- |\
	sort | uniq | awk '{printf("%i\t%s\n", ++n, $$0);}' |\
	gzip > $@
	$(EPILOG)

##############################################################################
## Compile "pseudogenes" from fragments.
##############################################################################
step8.pseudogenes.predictions.gz: step8.collected.predictions.gz
	$(PRELOG)
	@gunzip < $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2pseudogenes.py \
	$(PYTHON_OPTIONS) \
	--format=predictions \
	$(PARAM_PSEUDOGENES_OPTIONS) \
	> $@
	$(EPILOG)

##############################################################################
## Compile assemblies from fragments.
##############################################################################
## assemble new predictions. The new contigs are in PARAM_ASSEMBLY_PATTERN.
## If the genome was in a single file, the assembly has to be in a single file, too.
step8.assembly.predictions.gz: step8.collected.predictions.gz $(PSEUDOGENES_TARGETS)
	$(PRELOG)
	@cat $^ |\
	gunzip |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2assembly.py \
	$(PYTHON_OPTIONS) \
	--format=predictions \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--join-pattern=$(PARAM_ASSEMBLY_PATTERN) \
	--filename-sizes=step8.assembly_sizes \
	$(PARAM_ASSEMBLY_OPTIONS) |\
	gzip > $@
	@if [ -e $(PARAM_INPUT_GENOME) ]; then \
		cat $(PARAM_INPUT_GENOME) >> $(PARAM_ASSEMBLY_PATTERN); \
	fi
	@touch step8.assembly_sizes
	$(EPILOG)

## make unique (due to assembled contigs, some contigs might be
## present twice (in genome_all.fasta and genome_new.fasta) ).
step8.assembly_sizes.load: step8.assembly.predictions.gz
	$(PRELOG)
	@grep -v "#" step8.assembly_sizes |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_CONTIGS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@touch $@
	$(EPILOG)

##############################################################################
## Combine all predictions
##############################################################################
step8.predictions.gz: $(ASSEMBLY_RESULTS)
	$(PRELOG)
	@cat $^ | gunzip | grep -h -v "#" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/regions2predictions.py \
	--disable-conflict --disable-suboptimal --disable-activation \
	--min-score=$(PARAM_FILTER_MIN_SCORE) \
	--min-coverage-query=$(PARAM_FILTER_MIN_COVERAGE_QUERY) \
	--min-percent-identity=$(PARAM_FILTER_MIN_PERCENT_IDENTITY) \
	--min-length=$(PARAM_FILTER_MIN_LENGTH) |\
	gzip > $@
	$(EPILOG)

step8.load: step8.predictions.gz
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_PREDICTIONS);" >/dev/null
	@gunzip < $< | grep -v "#" |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_PREDICTIONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_PREDICTIONS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_PREDICTIONS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

step8.check: step8.predictions.gz all.transcripts
	$(PRELOG)
	@gunzip < $< | grep -v "#" | cut -f 2 | sort | uniq > $@.matches_transcripts
	@diff $@.matches_transcripts all.transcripts |\
	 grep ">" | perl -pe "s/> //" > $@.missed_transcripts
	@echo "## Step8 - combination of all results" $(TOLOG) 
	@total=`wc -l < all.transcripts`; \
	aligned=`wc -l < $@.matches_transcripts` ;\
	missed=`wc -l < $@.missed_transcripts`; \
	printf "number of submitted transcripts: %8i\n" $${total} $(TOLOG); \
	printf "number of aligned   transcripts: %8i (%3i%%)\n" \
		$${aligned} $$((100*aligned/total)) \
		$(TOLOG); \
	printf "number of missed    transcripts: %8i (%3i%%)\n" \
		$${missed} $$((100*missed/total)) $(TOLOG); \
	printf "number of aligned   pairs:       %8i\n" `gunzip < $< | grep -v '#' | wc -l` $(TOLOG)
	@touch $@
	$(EPILOG)

##############################################################################
## Rerun predictions 
##############################################################################
STEP8_QUERIES=$(wildcard step8_*.chunk)
STEP8_TARGETS=$(STEP8_QUERIES:%.chunk=%.matches)
PARAM_STEP8_PATCH_CHUNKSIZE=200
PARAM_STEP8_PATCH_NUMJOBS=100

step8.patch: step8.patch.prepare step8.patch.run step8.patch.finish
	$(CMD_MSG) "type make step8.patch.commit to continue"

step8.patch.prepare: 
	$(PRELOG)
	@rm -rf step8.patch.dir
	@$(MAKE) step8.patch.dir
	@gunzip < step8.predictions.gz | grep -v "#" |\
	sort -k3,3 -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	$(PYTHON_OPTIONS) \
	--default-margin=$(PARAM_MEMBERS_MARGIN) \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN) \
	--prefix=step8.patch.dir/step8_ \
	--suffix=.chunk \
	--format=chunks \
	--peptides=$(STEP8_MERGE_PEPTIDES) \
	--no-sequence \
	--chunk=$(PARAM_STEP8_PATCH_CHUNKSIZE) > $@; \
	detect_pipe_error;
	$(EPILOG)

step8.patch.run: 
	$(PRELOG)
	@if test -e step8.patch.dir; then \
		$(MAKE) -C step8.patch.dir -k -j $(PARAM_STEP8_PATCH_NUMJOBS) $@-hook; \
	fi
	@touch $@
	$(EPILOG)

step8.patch.run-hook: $(STEP8_TARGETS)

step8_%.matches: step8_%.chunk
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py $(PARAM_PATCH_OPTIONS) - \
	< step8_$*.chunk > $@

step8.patch.finish: step8.patch.run step8.patch.matches step8.patch.predictions
	@touch $@
	$(EPILOG)

step8.patch.matches.gz: step8.patch.run
	$(PRELOG)
	@find step8.patch.dir -name "step8_*.matches" -exec cat {} \; | gzip > $@
	$(EPILOG)

step8.patch.predictions.gz: step8.patch.matches.gz
	$(PRELOG)
	@gunzip < $< |\
	awk ' BEGIN { keep=0; } \
	/^# RESULT:/ { keep=1; } \
	/^# START: / { keep=0}; \
	/^#/ { next; }  \
	/^"/ { next; }  \
	/^\\/ { next; }  \
	{ if (keep) {printf("%i\t%s\n", ++a, $$0);} } ' > $@
	$(EPILOG)

step8.patch.remove_unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e step8.patch.dir ]; then \
	    for file in step8.patch.dir/step8_*.matches; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 ]] ; then \
			    echo "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."
	$(EPILOG)

step8.patch.show_unfinished:
	@for file in step8.patch.dir/step8_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

step8.patch.clean: 
	$(CMD_LOG) "$@ started."
	rm -rf step8.patch.dir
	$(CMD_LOG) "$@ completed."


step8.show_progress:
	@echo "# path status at `date`" >> step8.progress
	@find ./step8.patch.dir -name "*.matches" -exec grep "RESULT:" {} \; |\
	perl -p -e "s/.*time=//; s/[^0-9\n]//g" |\
	awk -v total=`grep "# written [0-9]* pairs" step8.patch.prepare | perl -p -e "s/\D+//g"` '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step8.progress
	@tail step8.progress

step8.patch.commit:
	$(PRELOG)
	@if [[ -s step8.patch.predictions && ! -e step8.predictions.bak ]] ; then \
		mv step8.predictions step8.predictions.bak; \
		mv step8.patch.predictions step8.predictions; \
		$(CMD_MSG2) "commited patch."; \
		$(CMD_LOG2) "commited patch."; \
	fi
	$(EPILOG)

##############################################################################
## Build lists of coding sequences
##############################################################################
step8.cds: step8.predictions.gz
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < $< | sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2cds.py \
	$(PYTHON_OPTIONS) \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN)" \
	< /dev/null > $@
	$(EPILOG)

step8.cds.load: step8.cds
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CDS);" > /dev/null
	@grep -v "#" $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_CDS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_CDS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_CDS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
## Build lists of maps between predictions and genomes
##############################################################################
step8.map_prediction2genome: step8.predictions.gz
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < $< | sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2cds.py \
	$(PYTHON_OPTIONS) \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN) \
	--format=map" \
	< /dev/null > $@
	$(EPILOG)

step8.map_prediction2genome.load: step8.map_prediction2genome
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_PREDICTION2GENOME);" > /dev/null
	@grep -v "#" $< |\
	cut -f 1,4,5,6,7,8,9 |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_PREDICTION2GENOME) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_PREDICTION2GENOME): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_PREDICTION2GENOME);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
## Build extended transcripts
##############################################################################
step8.transcripts: step8.predictions.gz
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < $< | sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2transcripts.py \
	$(PYTHON_OPTIONS) \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN)" \
	< /dev/null > $@
	$(EPILOG)

step8.transcripts.load: step8.transcripts
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_TRANSCRIPTS);" > /dev/null
	@grep -v "#" $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_TRANSCRIPTS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_TRANSCRIPTS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_TRANSCRIPTS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
## Get disruptions
##############################################################################
step8.disruptions: step8.predictions.gz
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < $< | sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2disruptions.py \
	$(PYTHON_OPTIONS) \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN)" \
	< /dev/null > $@
	$(EPILOG)

step8.disruptions.load: step8.disruptions
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_DISRUPTIONS);" > /dev/null
	@grep -v "#" $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_DISRUPTIONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_DISRUPTIONS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_DISRUPTIONS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
## Fill intron table
##############################################################################
step8.introns: step8.predictions.gz
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < $< | sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2introns.py \
		$(PYTHON_OPTIONS) \
		--genome-file=$(PARAM_ASSEMBLY_PATTERN)" \
	< /dev/null > $@
	$(EPILOG)

step8.introns.load: step8.introns
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_INTRONS);" > /dev/null
	@$(CMD_REMOVE_HEADER) < $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_INTRONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_INTRONS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_INTRONS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)
