################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step12 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2006 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## compute ks between query and predicted transcript.
## This step is optional and only executed, if $(PARAM_DO_KAKS) is set.
##############################################################################
step12: step11 step12.prepare step12.run step12.finish
	@touch $@
	$(EPILOG) 

##############################################################################
## KaKs calculation
##############################################################################
################################################
## parallel ks calculation
STEP12_QUERIES=$(wildcard step12_*.chunk)
STEP12_TARGETS=$(STEP12_QUERIES:%.chunk=%.matches)

#########################################################################
step12.prepare: step12.fasta step11
	$(PRELOG)
	@$(MAKE) step12.dir
	@perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -p step12.dir/step12_ -s .chunk $(PARAM_STEP12_CHUNKSIZE) < step12.fasta > $@
	$(EPILOG)


#########################################################################
step12.fasta: $(PARAM_INPUT_CDNAS) step8.predictions.gz step11.redundant.members
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < step8.predictions.gz |\
	python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
	$(PYTHON_OPTIONS) \
	--log=$@.log \
	--apply=<(grep -v '^0' step11.redundant.members) --columns=1 |\
	sort -k{3,3} |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/prediction2pairs.py \
	$(PYTHON_OPTIONS) \
	--cds=$(PARAM_INPUT_CDNAS) \
	--log=$@.log \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN) |\
	python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
	$(PYTHON_OPTIONS) \
	--method=mask-seg \
	--log=$@.log |\
	grep -v '#' " \
	< /dev/null  > $@
	$(EPILOG)

#########################################################################
step12.check:
	$(PRELOG)
	@rm -f $@
	@printf "class\tcounts\tmin\tmax\tavg\tmedian\tstddev\tsum\n" > $@
	@for quality in $(QUALITY_CLASSES); do \
		printf "%s\t" $${quality} >> $@; \
		$(CONNECTION) \
	"SELECT ds FROM $(PARAM_TABLE_NAME_KAKS) AS k, \
	$(PARAM_TABLE_NAME_GENEINFO) AS g \
	WHERE g.best_class IN ('$${quality}') AND g.best_prediction_id = k.prediction_id " |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --flat | grep -v "#" >> $@; \
	done
	$(EPILOG)

#########################################################################
step12.run: step12.prepare
	$(PRELOG)
	@if test -e step12.dir; then \
		$(MAKE) -j $(PARAM_STEP12_NUMJOBS) -k -C step12.dir $@-hook; \
	fi
	@touch $@
	$(EPILOG)	

#########################################################################
step12.run-hook: $(STEP12_TARGETS)

#########################################################################
step12_%.matches: step12_%.chunk
	@/usr/bin/install -d $(DIR_TMP)tmp_step12_$*
	@$(CMD_REMOTE_SUBMIT) \
		seq_pairs_kaks \
			--temp_directory $(DIR_TMP)tmp_step12_$* \
			--aligned \
			--cdna_sequences step12_$*.chunk \
			< /dev/null > $@
	@rm -rf $(DIR_TMP)tmp_kaks_$*

#########################################################################
step12.finish: step12.run step12.matches step12.load \
		step12.filter step12.filter.apply \
		step12.geneinfo step12.geneinfo.load
	$(PRELOG)
	@touch $@
	$(EPILOG)

#########################################################################
## show progress report
step12.show-progress:
	@echo "# $@ status at `date`" >> step$*.progress
	@find step$*.dir -name "step$*_*.matches" -exec grep "GRAPH: region [0-9]*: finished" {} \; |\
	perl -p -e "s/.*finished in //; s/[^0-9\n]//g" |\
	awk -v total=$${ntotal} `grep "# written [0-9]* regions" step$*.split | perl -p -e "s/\D+//g"` '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step$*.progress
	@tail step$*.progress

#########################################################################
step12.matches : step12.run
	$(PRELOG)
	@find step12.dir -name "step12_*.matches" -exec cat {} \; > $@
	$(EPILOG)

## load the following fields into the table
#seq1,dN,dS,dN/dS,N,S,dN_std_err,dS_std_err,kappa,lnL,tau,error_str
step12.load: step12.matches
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_KAKS);" > /dev/null
	@grep "^[0-9]" step12.matches |\
	cut -f 1,3,4,5,6,7,8,9,10,11,12,13 |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_KAKS) FROM STDIN WITH NULL AS 'na'" 2> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_KAKS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_KAKS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG) 

#########################################################################
## Use kaks to get best transcript per gene
step12.filter: step12.load
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/genes2quality.py \
		--table-predictions=$(PARAM_TABLE_NAME_PREDICTIONS) \
		--table-genes=$(PARAM_TABLE_NAME_GENES) \
		--table-quality=$(PARAM_TABLE_NAME_QUALITY) \
		--table-kaks=$(PARAM_TABLE_NAME_KAKS) \
		--method=filter \
		--filter-nbest=$(PARAM_STEP12_NBEST) \
		--filter-ds=$(PARAM_STEP12_FILTER_DS) \
		> $@
	$(EPILOG)

#########################################################################
step12.filter.apply: step12.filter
	$(PRELOG)
	@awk -v table=$(PARAM_TABLE_NAME_GENES) \
		'!/^#/ { printf("UPDATE %s SET gene_id = 0 WHERE prediction_id = %i;\n", table, $$1) }' \
		< step12.filter > $@_tmp;
	@$(CONNECTION_BATCH) $@_tmp $(CONNECTION_OPTIONS) > $@
	@rm -f $@_tmp	
	$(CMD_LOG) "updated $(PARAM_TABLE_NAME_GENES):"
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES) WHERE gene_id != 0;' \
	-t` transcripts with gene assignments" 
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES) WHERE gene_id = prediction_id;' \
	-t` genes" 
	@touch $@
	$(EPILOG)

#########################################################################
step12.geneinfo: step11.genes.load
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/genes2quality.py \
		--table-predictions=$(PARAM_TABLE_NAME_PREDICTIONS) \
		--table-genes=$(PARAM_TABLE_NAME_GENES) \
		--table-quality=$(PARAM_TABLE_NAME_QUALITY) > $@
	$(EPILOG)

#########################################################################
step12.geneinfo.load: step12.geneinfo
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GENEINFO);" > /dev/null 
	@grep -v -e "#" -e "gene_id" step12.geneinfo |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_GENEINFO) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GENEINFO): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENEINFO);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
step12.rollback:
	$(PRELOG)
	@rm -rf step12*
	$(EPILOG)

#########################################################################
step12.clean:
	$(PRELOG)
	@rm -rf step12.dir
	$(EPILOG)


