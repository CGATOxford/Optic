################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.synteny 1831 2008-05-08 11:59:26Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

VERSION=$Id: Makefile.synteny 1831 2008-05-08 11:59:26Z andreas $

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=bc1.q,bc2.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks_first

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=

## pattern to identify master genome
PARAM_PATTERN_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_PATTERN_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas

## schemas in input
PARAM_SRC_SCHEMAS?=

################################################
## separator between identifier fields
PARAM_SEPARATOR?=|

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
## Synteny options
## maximum distance between syteny blocks to parse of local rearrangments/deletions
PARAM_MAX_SYNTENY_DISTANCE?=5

## maximum out-of-order assignments that are to be skipped to continue a synteny block.
PARAM_MAX_LOOK_AHEAD?=1

################################################
# Section parameters: end
################################################

GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`
NAMES_COMMA=`echo $(PARAM_SRC_NAMES) | perl -p -e "s/ +/,/g"`

## requisites to check for presence
FILES_REQUISITES=

#############################################################################
#############################################################################
#############################################################################
## Get synteny locations between each pair of species
##
## Get a dot for each ortholog. The dot contains the following information:
## cluster_id\tgene_id1\tcontig_1\tstrand_1\tfrom_1\tto_1\tgene_id2\tcontig_2\tstrand_2\tpos_2\tfrom_2\tto_2
##
## This is all done in forward coordinates and only best prediction per genes are used.
#############################################################################
ANALYSIS_TABLE_NAME_ORTHOLOGS=$(PARAM_TABLE_NAME_ORTHOLOGLINKS)

pairwise_data: pairwise_data.dir
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome1=$${genomes[$$x]}; \
			genome2=$${genomes[$$y]}; \
			if [ ! -s pairwise_data.dir/$${genome1}-$${genome2}-a.dots ]; then \
			    $(PSQL_CONNECTION) \
			    "SELECT DISTINCT l.cluster_id, \
				    o.gene_id, o.sbjct_token, o.sbjct_strand, \
				    o.export_sbjct_genome_from, o.export_sbjct_genome_to \
			    FROM \
				    $(ANALYSIS_TABLE_NAME_ORTHOLOGS) AS l, \
				    $${genome1}.overview AS o, \
				    $${genome1}.geneinfo AS g \
			    WHERE \
				    o.prediction_id = l.prediction_id1 AND \
			            g.gene_id = o.gene_id AND \
				    g.best_prediction_id = o.prediction_id AND \
				    l.schema1='$${genome1}' AND \
				    l.schema2='$${genome2}'" \
				    $(PSQL_CONNECTION_OPTIONS) \
			    > pairwise_data.dir/$${genome1}-$${genome2}-a.dots; \
			fi; \
			if [ ! -s pairwise_data.dir/$${genome1}-$${genome2}-b.dots ]; then \
			    $(PSQL_CONNECTION) \
			    "SELECT DISTINCT l.cluster_id, \
				    o.gene_id, o.sbjct_token, o.sbjct_strand, \
				    o.export_sbjct_genome_from, o.export_sbjct_genome_to \
			    FROM \
				    $(ANALYSIS_TABLE_NAME_ORTHOLOGS) AS l, \
				    $${genome2}.overview AS o, \
				    $${genome2}.geneinfo AS g \
			    WHERE \
				    o.prediction_id = l.prediction_id2 AND \
			            g.gene_id = o.gene_id AND \
				    g.best_prediction_id = o.prediction_id AND \
				    l.schema1='$${genome1}' AND \
				    l.schema2='$${genome2}'" \
				    $(PSQL_CONNECTION_OPTIONS) \
			    > pairwise_data.dir/$${genome1}-$${genome2}-b.dots; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

prepare: pairwise_data

synteny_plots: pairwise_data synteny_plots.dir
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome1=$${genomes[$$x]}; \
			genome2=$${genomes[$$y]}; \
			if [ ! -e $@.dir/$${genome1}-$${genome2}.svg ] ; then \
				python $(DIR_SCRIPTS_GENEPREDICTION)optic/plot_synteny.py \
				pairwise_data.dir/$${genome1}-$${genome2}-a.dots \
				pairwise_data.dir/$${genome1}-$${genome2}-b.dots |\
				grep -v "#" > $@.dir/$${genome1}-$${genome2}.svg ; \
			fi; \
		done; \
	done
	$(EPILOG)

############################################################################
############################################################################
############################################################################
## PNG file
############################################################################
## Convert a svg file to a png file
## Note: for some reason the print option is necessary.
%.png: %.svg
	@sodipodi \
		--without-gui --print=dummy.ps \
		--export-background=white \
		--export-dpi=600 \
		--file=$*.svg \
		--export-png=$@ 

%.png: %.matrix
	$(YT)plot_matrix.py \
		--label=Genome,Genome \
		--hardcopy=$@ \
	< $*.matrix > /dev/null

## Save file manually as postscript
%.eps: %.svg
	$(CMD_MSG) "edit and print file as output.ps."
	@sodipodi \
		--with-gui \
		--file=$*.svg 
	$(CMD_MSG) "converting ps to eps."
	@eps2eps output.ps $*.eps
	@rm -f output.ps



############################################################################
############################################################################
############################################################################
############################################################################
## Get synteny statistis
############################################################################

############################################################################	
############################################################################
############################################################################
############################################################################
## do the analysis
############################################################################
analysis-hook: blocks_stats breakers_stats \
	blocks_genes.stats blocks_blocksizes.stats blocks_breakers.stats \
	blocks_genes.matrix blocks_blocksizes.matrix blocks_breakers.matrix \
	breakers_orthologs.matrix breakers_genes.matrix breakers_rsd.matrix

blocks_stats: ANALYSIS_METHOD=blocks
breakers_stats: ANALYSIS_METHOD=breakers

%_stats: 
	$(PRELOG)
	@$(MAKE) $*.dir
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $${x} + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    target_file=$*.dir/$${genome1}-$${genome2}; \
			    printf "%s\t%s\t" $${genome1} $${genome2} > $${target_file}; \
			    python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_synteny.py \
				    --method=$(ANALYSIS_METHOD) \
				    --max-look-ahead=$(PARAM_MAX_LOOK_AHEAD) \
				    --max-synteny-distance=$(PARAM_MAX_SYNTENY_DISTANCE) \
				    --filter-junk \
				    pairwise_data.dir/$${genome1}-$${genome2}-a.dots \
				    pairwise_data.dir/$${genome1}-$${genome2}-b.dots \
			    > $${target_file}; \
			    target_file=$*.dir/$${genome2}-$${genome1}; \
			    printf "%s\t%s\t" $${genome2} $${genome1} > $${target_file}; \
			    python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_synteny.py \
				    --method=$(ANALYSIS_METHOD) \
				    --max-look-ahead=$(PARAM_MAX_LOOK_AHEAD) \
				    --max-synteny-distance=$(PARAM_MAX_SYNTENY_DISTANCE) \
				    --filter-junk \
				    pairwise_data.dir/$${genome1}-$${genome2}-b.dots \
				    pairwise_data.dir/$${genome1}-$${genome2}-a.dots \
			    > $${target_file}; \
			fi; \
		done; \
	done
	@touch $@
	$(EPILOG)

############################################################################
############################################################################
############################################################################
## Stats about synteny blocks
############################################################################
blocks_blocksizes.stats: ANALYSIS_SYNTENY_COLUMN=len1
blocks_genes.stats:      ANALYSIS_SYNTENY_COLUMN=nmem1
blocks_breakers.stats:   ANALYSIS_SYNTENY_COLUMN=nbreaks2

blocks_%.stats: blocks_stats
	$(PRELOG)
	@printf "%s\t%s\t" "genome1" "genome2" > $@
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    target_file=$@.dir/$${genome1}-$${genome2}; \
			    printf "%s\t%s\t" $${genome1} $${genome2} >> $@; \
			    $(YT)csv_cut.py $(ANALYSIS_SYNTENY_COLUMN) < blocks.dir/$${genome1}-$${genome2} |\
			    $(YT)data2stats.py --flat |\
			    grep -v "#" >> $@; \
			fi; \
		done; \
	done
	$(EPILOG)

############################################################################
############################################################################
############################################################################
## Stats about synteny breakers
############################################################################
## ptotal: percent of breakers normalized by those in synteny blocks / counts in orthologs
breakers_orthologs.matrix: ANALYSIS_SYNTENY_COLUMN=ptotal
breakers_orthologs.matrix: ANALYSIS_SYNTENY_ROW=ortholog_total

## gtotal: percent of breakers normalized by those in synteny blocks / counts in genes
breakers_genes.matrix: ANALYSIS_SYNTENY_COLUMN=ptotal
breakers_genes.matrix: ANALYSIS_SYNTENY_ROW=gene_total

## rsd: relative number of same/different contig breakers
breakers_rsd.matrix: ANALYSIS_SYNTENY_COLUMN=rsd
breakers_rsd.matrix: ANALYSIS_SYNTENY_ROW=gene_total

breakers_%.matrix: breakers_stats
	$(PRELOG)
	@rm -f $@_tmp
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			if [ $${x} != $${y} ]; then \
			    genome1=$${genomes[$$x]}; \
			    genome2=$${genomes[$$y]}; \
			    target_file=$@.dir/$${genome1}-$${genome2}; \
			    printf "%s\t%s\t" $${genome1} $${genome2} >> $@_tmp; \
			    grep "^$(ANALYSIS_SYNTENY_ROW)" < breakers.dir/$${genome1}-$${genome2} |\
			    $(YT)csv_cut.py $(ANALYSIS_SYNTENY_COLUMN) |\
			    grep -v -e "$(ANALYSIS_SYNTENY_COLUMN)" -e "#" >> $@_tmp; \
			fi; \
		done; \
	done
	@$(YT)sparse2full.py \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) \
		--asymmetric \
	< $@_tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_tmp
	$(EPILOG)

############################################################################
############################################################################
############################################################################
## build matrix
############################################################################
blocks_genes.matrix:      ANALYSIS_CATEGORY=mean
blocks_blocksizes.matrix: ANALYSIS_CATEGORY=mean
blocks_breakers.matrix:   ANALYSIS_CATEGORY=sum

blocks_%.matrix: blocks_%.stats
	$(PRELOG)
	@$(YT)csv_cut.py genome1 genome2 $(ANALYSIS_CATEGORY) < $^ |\
	$(YT)sparse2full.py \
		--titles \
		--row-names=$(GENOMES_COMMA) \
		--col-names=$(GENOMES_COMMA) \
		--asymmetric |\
	$(CMD_TRANSLATE) > $@
	$(EPILOG)

############################################################################
clean: 
	$(PRELOG)
	@rm -rf *.matrix *.stats breakers* blocks* stats*
	$(EPILOG)




############################################################################
all: step

# build a table of exon boundaries for each gene
map_prediction2location:
	$(CMD_LOG) "started $@."
	@awk '{ if (last != $$1) { \
		if (last != "") { printf("%i\t%i\n", a, b); } \
		printf("%s\t%s\t%s\t", $$1, $$2, $$3); \
		a=$$8; b=$$9; \
		};  \
		last=$$1; \
		if (a > $$8) { a = $$8; } \
		if (b < $$9) { b = $$9; } \
	     }' < $(PARAM_INPUT_EXONS) |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns=1 --apply=$(PARAM_INPUT_ORTHOLOGS) \
		--invert --echo --filter |\
	sort -k1,1 -k6,6 > $@
	$(CMD_LOG) "finished $@."



############################################################################
# build sparse links according to cluster
all_on_all: map_prediction2location
	$(CMD_LOG) "started $@."
	@awk '{ if (last != $$1) { \
		for (i = 0; i < n-1; ++i) { \
			for (j = i+1; j < n; ++j) { \
				printf("%s\t%s\t%s\t\n", last, a[i], a[j]);  \
			}; \
		}; \
		n = 0; for (i in a) { delete a[i]; }; \
		}; \
	       a[n] = sprintf("%s\t%s\t%s\t%s\t%s", $$2, $$3, $$4, $$5, $$6); \
	       ++n; \
	       last = $$1; \
	     } \
	    END { \
		for (i = 0; i < n-1; ++i) { \
			for (j = i+1; j < n; ++j) { \
				printf("%s\t%s\t%s\t\n", last, a[i], a[j]);  \
			}; \
		}; \
	      }' < map_prediction2location > $@
	$(CMD_LOG) "finished $@."
############################################################################
## Step 1: count the number of co-occurance per chromosome.
STEP1_QUERIES=$(wildcard *.pairs)
STEP1_TARGETS=$(STEP1_QUERIES:%.pairs=%.contig_counts)

step1: step1.prepare step1.run step1.finish
	$(CMD_LOG) "finished $@."

step1.prepare: all_on_all
	$(CMD_LOG) "started $@."
	$(MAKE) step1.dir 
	@genomes=( $(PARAM_PREFIX_GENOMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			target_file=step1.dir/$${genomes[$$x]}-$${genomes[$$y]}.pairs; \
			awk -v g1=$${genomes[$$x]} -v g2=$${genomes[$$y]} \
				'!/^#/ { \
			           p1=substr($$6,1,index( $$6, "$(PARAM_SEPARATOR)")-1); \
				   p2=substr($$11,1,index( $$11, "$(PARAM_SEPARATOR)")-1); \
				   if (p1 == g1 && p2 == g2 ) { printf("%s\t%s\t%s\t%s\n", $$2, $$3, $$7, $$8); }\
				   if (p1 == g2 && p2 == g1 ) { printf("%s\t%s\t%s\t%s\n", $$7, $$8, $$2, $$3); }\
				} ' < all_on_all > $${target_file}; \
		done; \
	done; 
	@touch $@
	$(CMD_LOG) "finished $@."

step1.run:
	$(CMD_LOG) "started $@."
	@$(MAKE) -C step1.dir/ -k -j $(PARAM_STEP1_NUMJOBS) $@-hook
	@touch $@
	$(CMD_LOG) "finished $@."

step1.run-hook: $(STEP1_TARGETS)

step1.finish: 
	$(CMD_LOG) "finished $@."

%.contig_counts: %.pairs
	cut -f 1,3 $*.pairs |\
	sort -k 1,1 -k2,2 |\
	uniq -c |\
	awk '{printf("%s\t%s\t%s\n", $$2, $$3, $$1);}' |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py --asymmetric > $@

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
