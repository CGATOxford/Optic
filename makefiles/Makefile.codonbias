################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codonbias 1630 2007-11-29 10:03:52Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

################################################
## Cluster parameters

## default priority
PARAM_PRIORITY?=-10

## queue to submit to
PARAM_QUEUE?=medium_jobs.q

## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
## table names
PARAM_TABLE_NAME_CODONBIAS?=$(PARAM_PSQL_SCHEMA).codonbias

################################################
## Separator
PARAM_SEPARATOR=|

################################################
## codon bias options
## Number of iterations to do for acai
PARAM_ACAI_ITERATIONS?=10

################################################
## Threshold for dominant set size for analysis
PARAM_ACAI_DOMINANT_SET_THRESHOLD_ANALYSIS?=0.1

################################################
## Threshold for dominant set size
PARAM_ACAI_DOMINANT_SET_THRESHOLD_CAIJAVA?=0.01

################################################
## number of shuffling runs to perform
## (for benchmarking purposes)
PARAM_NUM_SHUFFLES?=10

################################################
## sample size for calculating weights on random set
## of sequences.
PARAM_RANDOM_SAMPLE_SIZE?=70

## number of repetitions
PARAM_RANDOM_ITERATIONS?=5

################################################
## number of iteration runs to perform
## (for benchmarking purposes)
PARAM_NUM_ITERATIONS?=20

################################################
# Section parameters: end
################################################
REQUISITES=peptides.fasta cds.fasta filter

## Prediction Id
TYPE_PREDICTION_ID=TEXT

## Postgres connection commands
CMD_PSQL_CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c
CMD_PSQL_CONNECTION_BATCH=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -f
CMD_PSQL_CONNECTION_OPTIONS=-t -A -F"	" 
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

###################################################
## primary targets
all: selected.acai all.acai all.enc \
	selected.frequencies selected.shannon all.shannon \
	all.sets dominant.set nondominant.set all.load \
	all.data \
	$(EXTRA_TARGETS) 

prepare: create-log create-tables

###################################################
## secondary targets to be executed
## Default weights for ACAI computation
ACAI_DEFAULT_WEIGHTS=$(wildcard input.weights)
ifneq ($(ACAI_DEFAULT_WEIGHTS),)
ACAI_EXTRA_OPTIONS=--input-file-weights=$(ACAI_DEFAULT_WEIGHTS)
else 
ACAI_EXTRA_OPTIONS=
endif

EXISTS_BIASED_SET=$(wildcard biased.set)
ifeq ($(EXISTS_BIASED_SET), biased.set)
EXTRA_TARGETS+=biased.weights biased.acai biased.frequencies
EXTRA_COLUMNS+=cai_bias FLOAT,
EXTRA_FREQUENCIES+=,biased.frequencies
endif

EXISTS_REFERENCE_WEIGHTS=$(wildcard ../reference.weights)
ifeq ($(EXISTS_REFERENCE_WEIGHTS), ../reference.weights)
EXTRA_TARGETS+=external.acai
EXTRA_COLUMNS+=cai_ext FLOAT,
endif

###################################################
## Calculate biased set for all predictions
selected.acai: selected.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=$(PARAM_ACAI_ITERATIONS) \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	$(ACAI_EXTRA_OPTIONS) \
	< selected.fasta > $@
	$(EPILOG)

## Calculate CAI values for all predictions based on
## external weights
external.acai: selected.acai all.fasta selected.weights
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=0 \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	--input-file-weights=$(EXISTS_REFERENCE_WEIGHTS) \
	< all.fasta > $@
	$(EPILOG)

## Calculate CAI values for all predictions based on 
## preferences derived from a biased subset
biased.acai: biased.weights all.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=0 \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	--input-file-weights=biased.weights \
	< all.fasta > $@
	$(EPILOG)

## Calculate CAI values for all predictions based on
## preferences derived from a random subset
random.acai: random.weights all.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=0 \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	--input-file-weights=random.weights \
	< all.fasta > $@
	$(EPILOG)

## Calculate CAI values for all predictions
all.acai: selected.acai all.fasta selected.weights
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=0 \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	--input-file-weights=selected.weights \
	< all.fasta > $@
	$(EPILOG)

%.enc: %.fasta
	$(PRELOG)
	@$(RCMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperENC.py \
	< $*.fasta > $@
	$(EPILOG)

###################################################
## intermediate targets
peptides2cds: peptides.fasta cds.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)peptides2cds.py \
	 	--cds=cds.fasta < peptides.fasta > $@
	$(EPILOG)

###################################################
## clean input sequences - only codons
codons.fasta: cds.fasta peptides2cds
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/cds2codons.py \
	--map=peptides2cds --codons\
	< cds.fasta > $@
	$(EPILOG)

###################################################
## select sequences based on filter
selected.fasta: all.fasta
	$(PRELOG)
	@if test -s filter; then \
		perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl filter < all.fasta > $@; \
	else \
		ln -s all.fasta $@; \
	fi
	$(EPILOG)

###################################################
## get codon shuffled sequences
shuffled.fasta: selected.fasta
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)shuffle_fasta.py --conserve-aminos \
	< selected.fasta > $@
	$(EPILOG)


###################################################
## select all sequences
all.fasta: codons.fasta
	$(PRELOG)
	@grep -v "#" < codons.fasta |\
	perl -p -e "if (!/^>/) {s/ //g; } " > $@
	$(EPILOG)

###################################################
## get sequence counts
%.counts: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)analyze_sequences.py \
	< $*.fasta > $@
	$(EPILOG)

###################################################
## extract new weighting table from a previous ACAI run.
%.weights: %.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=selected.acai_genes \
	--input-file-trace=selected.acai_trace \
	--input-file-codons=selected.acai_codons \
	--weights=final-matrix |\
	grep -v "#" > $@
	$(EPILOG)

###################################################
## compute weights based on a set of sequences
biased.weights: all.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=biased.set \
	--weights=subset \
	--codon-table-type=weights \
	--codon-table-format=matrix |\
	grep -v "#" > $@
	$(EPILOG)

###################################################
## compute weights based on a set of sequences
biased.frequencies: all.acai biased.set
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=biased.set \
	--weights=subset \
	--codon-table-type=frequencies \
	--codon-table-format=list |\
	grep -v "#" > $@
	$(EPILOG)

## get non-normalized frequencies
biased.absolute_frequencies: all.acai biased.set
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=biased.set \
	--weights=subset \
	--codon-table-type=absolute-frequencies \
	--codon-table-format=list |\
	grep -v "#" > $@
	$(EPILOG)

###################################################
## compute weights based on a set of sequences
random.set: filter
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)randomize_lines.pl < $^ |\
	head -n $(PARAM_RANDOM_SAMPLE_SIZE) > $@
	$(EPILOG)

random.weights: all.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=random.set \
	--weights=subset \
	--codon-table-type=weights \
	--codon-table-format=matrix |\
	grep -v "#" > $@
	$(EPILOG)

random.frequencies: all.acai random.set
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=random.set \
	--weights=subset \
	--codon-table-type=frequencies \
	--codon-table-format=list |\
	grep -v "#" > $@
	$(EPILOG)

###################################################
## compute weights based on a set of sequences
random%.set: filter
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)randomize_lines.pl < $^ |\
	head -n $(PARAM_RANDOM_SAMPLE_SIZE) > $@
	$(EPILOG)

random%.rweights: all.acai random%.set
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=random$*.set \
	--weights=subset \
	--codon-table-type=weights \
	--codon-table-format=matrix |\
	grep -v "#" > $@
	$(EPILOG)

random%.frequencies: all.acai random%.set
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=all.acai_genes \
	--input-file-subset=random$*.set \
	--weights=subset \
	--codon-table-type=frequencies \
	--codon-table-format=list |\
	grep -v "#" > $@
	$(EPILOG)

## Calculate CAI values for all predictions based on
## preferences derived from a random subset
## Have to call it rweights, otherwise there are cyclical
## dependencies.
## Only use selected.fasta, because otherwise you get
## noise (because I skipped orthology mapping).
random%.acai: random%.rweights selected.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=0 \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	--input-file-weights=random$*.rweights \
	< selected.fasta > $@
	$(EPILOG)

###################################################
## extract codon frequencies of the dominant set
## according to caijava 
selected.frequencies: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=selected.acai_genes \
	--input-file-trace=selected.acai_trace \
	--input-file-codons=selected.acai_codons \
	--weights=frequencies |\
	grep -v "#" > $@
	$(EPILOG)

## get non-normalized frequencies
selected.absolute_frequencies: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=selected.acai_genes \
	--input-file-trace=selected.acai_trace \
	--input-file-codons=selected.acai_codons \
	--weights=absolute-frequencies |\
	grep -v "#" > $@
	$(EPILOG)


###################################################
## one big table with all the data
all.data: all.acai all.shannon all.enc $(EXTRA_TARGETS)
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-codons=all.acai_codons \
	--input-file-genes=all.acai_genes \
	--input-file-trace=all.acai_trace \
	--select="CAIEXT AS CAI" |\
	grep -v "#" > $@_tmp1; \
	if test -e external.acai; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--input-file-codons=external.acai_codons \
		--input-file-genes=external.acai_genes \
		--input-file-trace=external.acai_trace \
		--select="CAIEXT AS CAIREF" |\
		grep -v "#" > $@_tmp2; \
		file2="$@_tmp2"; \
	else \
		file2=""; \
	fi; \
	if test -e biased.acai; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--input-file-codons=biased.acai_codons \
		--input-file-genes=biased.acai_genes \
		--input-file-trace=biased.acai_trace \
		--select="CAIEXT AS CAIBIAS" |\
		grep -v "#" > $@_tmp3; \
		file3=$@_tmp3; \
	else \
		file3=""; \
	fi; \
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	 --missing="F" \
	all.sets $@_tmp1 $${file2} $${file3} all.enc all.shannon |\
	grep -v "total" > $@
	@rm -f $@_tmp*
	$(EPILOG)

###################################################
## extract codon frequencies of the dominant set
## according to caijava 
dominant.frequencies: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=selected.acai_genes \
	--input-file-trace=selected.acai_trace \
	--input-file-codons=selected.acai_codons \
	--dominant-set=$(PARAM_ACAI_DOMINANT_SET_THRESHOLD_CAIJAVA) \
	--weights=frequencies |\
	grep -v "#" > $@
	$(EPILOG)

nondominant.frequencies: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-genes=selected.acai_genes \
	--input-file-trace=selected.acai_trace \
	--input-file-codons=selected.acai_codons \
	--dominant-set=$(PARAM_ACAI_DOMINANT_SET_THRESHOLD_ANALYSIS) \
	--reverse-set \
	--weights=frequencies |\
	grep -v "#" > $@
	$(EPILOG)

###################################################
###################################################
###################################################
## Calculate a multitude of sequence features
%.shannon: %.fasta dominant.frequencies nondominant.frequencies selected.frequencies
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)analyze_codonbias_shannon.py \
	--filename-weights=dominant.frequencies,nondominant.frequencies,selected.frequencies,uniform$(EXTRA_FREQUENCIES) \
	--sections=length,aa,degeneracy,bias,codons,codon-usage \
	< $< > $@
	$(EPILOG)

###################################################
###################################################
###################################################
## Calculate just codons
%.codons: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)analyze_codonbias_shannon.py \
	--sections=codons,codon-usage \
	< $< > $@
	$(EPILOG)

###################################################
###################################################
## Sequence shuffles
###################################################
## Calculate biased set for shuffled predictions
## together with CAI values. 
shuffled.acai: shuffled.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT)\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
	--iterations=$(PARAM_ACAI_ITERATIONS) \
	--output-file-trace=$@_trace \
	--output-file-extra=$@_genes \
	--output-file-codons=$@_codons \
	$(ACAI_EXTRA_OPTIONS) \
	< shuffled.fasta > $@
	$(EPILOG)

###################################################
## Plot histograms with resampled data. Plot histogram
## of genes and also the matrix of weights.
reproducibility_acai.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		nlines=`grep -c ">" selected.fasta`; \
		nsel=$$(($$nlines / 2)); \
		grep -v "#" selected.fasta |\
		awk '/^>/ { printf("\n%s\t", $$0); next; } \
		     { printf("%s", $$0); next; } \
		     END { printf("\n"); }' |\
		perl $(DIR_SCRIPTS_TOOLS)randomize_lines.pl |\
		head -n $${nsel} |\
		perl -p -e "s/\t/\n/g" |\
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
			--iterations=$(PARAM_ACAI_ITERATIONS) \
			--output-file-extra=$@.dir/acai_$${x}.genes \
			--output-file-trace=$@.dir/acai_$${x}.trace \
		> $@.dir/acai_$${x}.log; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAICLASS |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=0.02 > $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-trace=$@.dir/acai_$${x}.trace \
			--weights=final-list |\
		sort -k1,1 |\
		perl -p -e "s/WEIGHT/$${x}/" > $@.dir/acai_$${x}_weights.data; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/acai_*.hist > $@
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py  $@.dir/acai_*_weights.data > $@.dir/weights.hist
	$(EPILOG)

###################################################
## Plot histograms with iterative runs. After each run
## the dominant set is removed.
iteration_acai.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@cp filter $@.dir/filter_0
	@for ((x = 0, y = 1; x < $(PARAM_NUM_ITERATIONS); ++x, ++y)); do \
		if test ! -e $@.dir/input_$${x}.fasta; then \
		    perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl $@.dir/filter_$${x} < all.fasta > $@.dir/input_$${x}.fasta; \
		    $(CMD_REMOTE_SUBMIT) \
		    python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
			    --iterations=$(PARAM_NUM_ITERATIONS) \
			    --output-file-extra=$@.dir/acai_$${x}.genes \
			    --output-file-trace=$@.dir/acai_$${x}.trace \
		    < $@.dir/input_$${x}.fasta > $@.dir/acai_$${x}.log; \
		    python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			    --input-file-genes=$@.dir/acai_$${x}.genes \
			    --select=CAICLASS \
			    --dominant-set=$(PARAM_ACAI_DOMINANT_SET_THRESHOLD_ANALYSIS) \
			    --reverse-set \
		    > $@.dir/filter_$${y}; \
		fi; \
	done
	@for ((x = 0; x < $(PARAM_NUM_ITERATIONS); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAICLASS |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			 \
			--min-value=0.0 \
			--bin-size=0.02 |\
		perl -p -e "s/CAICLASS/$${x}/" \
		> $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-trace=$@.dir/acai_$${x}.trace \
			--weights=final-list |\
		perl -p -e "s/WEIGHT/$${x}/" \
		> $@.dir/acai_$${x}_weights.data; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--missing=0 \
		--sort=numerical \
		$@.dir/acai_*.hist \
	> $@
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--missing=0 \
		--sort=numerical \
		$@.dir/acai_*_weights.data \
	> $@.dir/weights.hist
	$(EPILOG)

###################################################
## This routine writes x histograms for shuffled sequences
shuffled_acai.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_TOOLS)shuffle_fasta.py \
			--conserve-aminos < selected.fasta |\
		grep -v "#" |\
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
			--iterations=$(PARAM_ACAI_ITERATIONS) \
			--output-file-extra=$@.dir/acai_$${x}.genes \
		> $@.dir/acai_$${x}.log; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAICLASS |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=0.02 \
			--column=2 > $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAICLASS |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--column=2 \
			--format="%6.4f" > $@.dir/acai_$${x}.stats; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/acai_*.hist > $@
	$(EPILOG)

###################################################
## This routine writes x histograms for shuffled sequences with increasing 
## bias. The bias here ranges from background to biased.
shuffled_biasedcai.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		if test ! -e $@.dir/acai_$${x}.acai; then \
		$(CMD_LOG2) "shuffling with bias" `echo "$$x / ( $(PARAM_NUM_SHUFFLES) - 1)" | bc -l`; \
		python $(DIR_SCRIPTS_TOOLS)shuffle_fasta.py \
			--conserve-aminos \
			--biased-codon-usage=biased.frequencies \
			--bulk-codon-usage=selected.frequencies \
			--bias="`echo "$$x / ( $(PARAM_NUM_SHUFFLES) - 1 )" | bc -l`" \
			< selected.fasta |\
		grep -v "#" > $@.dir/acai_$${x}.fasta; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
		--iterations=0 \
		--output-file-trace=$@.dir/acai_$${x}.trace \
		--output-file-extra=$@.dir/acai_$${x}.genes \
		--output-file-codons=$@.dir/acai_$${x}.codons \
		--input-file-weights=biased.weights \
		< $@.dir/acai_$${x}.fasta> $@.dir/acai_$${x}.acai; \
		fi; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=0.02 \
			--column=2 > $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--column=2 \
			--format="%6.4f" > $@.dir/acai_$${x}.stats; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/acai_*.hist > $@
	$(EPILOG)

###################################################
## This routine writes x histograms for shuffled sequences with increasing 
## bias. The bias here ranges from uniform to biased.
shuffled_biasedcai_uniform.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		if test ! -e $@.dir/acai_$${x}.acai; then \
		$(CMD_LOG2) "shuffling with bias" `echo "$$x / ( $(PARAM_NUM_SHUFFLES) - 1)" | bc -l`; \
		python $(DIR_SCRIPTS_TOOLS)shuffle_fasta.py \
			--conserve-aminos \
			--biased-codon-usage=biased.frequencies \
			--bias="`echo "$$x / ( $(PARAM_NUM_SHUFFLES) - 1 )" | bc -l`" \
			< selected.fasta |\
		grep -v "#" > $@.dir/acai_$${x}.fasta; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
		--iterations=0 \
		--output-file-trace=$@.dir/acai_$${x}.trace \
		--output-file-extra=$@.dir/acai_$${x}.genes \
		--output-file-codons=$@.dir/acai_$${x}.codons \
		--input-file-weights=biased.weights \
		< $@.dir/acai_$${x}.fasta> $@.dir/acai_$${x}.acai; \
		fi; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=0.02 \
			--column=2 > $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--column=2 \
			--format="%6.4f" > $@.dir/acai_$${x}.stats; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/acai_*.hist > $@
	$(EPILOG)

###################################################
## This routine writes x histograms using randomized
## codon usage weights
randomized_acai.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		if test ! -e $@.dir/acai_$${x}.log; then \
		    python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			    --weights="random" | grep -v "#" > $@.dir/acai_$${x}.weights; \
		    python $(DIR_SCRIPTS_GENEPREDICTION)WrapperAdaptiveCAI.py \
			    --iterations=$(PARAM_ACAI_ITERATIONS) \
			    --output-file-extra=$@.dir/acai_$${x}.genes \
			    --input-file-weights=$@.dir/acai_$${x}.weights \
		    < selected.fasta > $@.dir/acai_$${x}.log; \
		fi; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=0.02 \
			--column=2 > $@.dir/acai_$${x}.hist; \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-genes=$@.dir/acai_$${x}.genes \
			--select=CAIEXT |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--column=2 \
			--format="%6.4f" > $@.dir/acai_$${x}.stats; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/acai_*.hist > $@
	$(EPILOG)

###################################################
## This routine writes x histograms
shuffled_enc.hist: selected.fasta
	$(PRELOG)
	@-mkdir $@.dir
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_TOOLS)shuffle_fasta.py \
			--conserve-aminos < selected.fasta |\
		grep -v "#" |\
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperENC.py \
		> $@.dir/enc_$${x}.data; \
	done
	@for ((x = 0; x < $(PARAM_NUM_SHUFFLES); ++x)); do \
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
			--min-value=0.0 \
			--bin-size=1.0 \
	 	< $@.dir/enc_$${x}.data > $@.dir/enc_$${x}.hist; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@.dir/enc_*.hist > $@
	$(EPILOG)

###################################################
###################################################
###################################################
###################################################
## Get set information: T, if prediction_id is 
## member of selected/dominant set.
###################################################
all.sets: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--select=caiclass \
		--dominant-set=$(PARAM_ACAI_DOMINANT_SET_THRESHOLD_ANALYSIS) \
		--input-file-genes=selected.acai_genes |\
		sort -k1,1 > $@_dominant
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--missing="F" \
		<(awk '!/^#/ {printf("%s\tT\n", $$1);}' < filter) \
		<(awk '!/^#/ {printf("%s\tT\n", $$1);}' < $@_dominant) |\
	awk 'BEGIN{ printf("GENENAME\tis_selected\tis_dominant\n"); } \
	     !/^#/ && !/^GENENAME/ { print; }' > $@
	@touch $@
	@rm -f $@_dominant
	$(EPILOG)

dominant.set: selected.acai
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--select=caiclass \
		--dominant-set=$(PARAM_ACAI_DOMINANT_SET_THRESHOLD_ANALYSIS) \
		--input-file-genes=selected.acai_genes |\
		sort -k1,1 > $@
	$(EPILOG)

nondominant.set: dominant.set
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)set_rest.pl dominant.set filter > $@
	$(EPILOG)

###################################################
###################################################
###################################################
###################################################
## Load data into table
###################################################
all.load: all.acai all.sets all.enc all.shannon $(EXTRA_TARGETS)
	$(PRELOG)
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CODONBIAS);" >/dev/null
	@python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
	--input-file-codons=all.acai_codons \
	--input-file-genes=all.acai_genes \
	--input-file-trace=all.acai_trace \
	--select=CAIEXT |\
	grep -v "#" > $@_tmp1
	@if [ -e external.acai_codons ]; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--input-file-codons=external.acai_codons \
		--input-file-genes=external.acai_genes \
		--input-file-trace=external.acai_trace \
		--select="CAIEXT AS CAIEXT2" |\
		grep -v "#" > $@_tmp2; \
		extra1=$@_tmp2; \
		extra_field1="CAIEXT2"; \
	fi; \
	if [ -e biased.acai_codons ]; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-codons=biased.acai_codons \
			--input-file-genes=biased.acai_genes \
			--input-file-trace=biased.acai_trace \
			--select="CAIEXT AS CAIBIAS" |\
		grep -v "#" > $@_tmp3; \
		extra2=$@_tmp3; \
		extra_field2="CAIBIAS"; \
	fi; \
	grep -v "^total" < all.shannon > $@_tmp4; \
	$(CMD_LOG2) "build all temporary tables, extra fields: $${extra_field1}|$${extra1} $${extra_field2}|$${extra2} "; \
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	--missing="F" \
	all.sets $@_tmp1 $${extra1} $${extra2} all.enc $@_tmp4 |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	GENENAME \
	is_selected is_dominant \
	ncodons nsites1d nsites2d nsites3d nsites4d \
	CAIEXT $${extra_field1} $${extra_field2} ENC \
	pgc pgc3 pdgc3 p2dgc3 p3dgc3 p4dgc3 |\
	awk '!/^#/ && !/^GENENAME/ && $$4 != "F" { split($$1, a, "$(PARAM_SEPARATOR)"); $$1=a[2]; print; }' |\
	perl -p -e "s/ /\t/g" |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_CODONBIAS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_CODONBIAS): `$(CMD_PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_CODONBIAS);' -t `"  >> $(LOG)
	@touch $@
	@rm -f $@_tmp*
	$(EPILOG)

#########################################################################
create-tables: \
	$(PARAM_TABLE_NAME_CODONBIAS).create-table-codonbias
	$(PRELOG)
	$(EPILOG)

#########################################################################
# Guide to fields:
# is_selected:  prediction_id is part of selected set
# is_dominant:  prediction_id is part of dominant set
# ncodons:	number of codons
# n4d:		number of fourfold degenerate sites
# n3d:		number of threefold degenerate sites
# n2d:		number of twofold degenerate sites
# n1d:		number of non-degenerate sites
# is_selected:	True, if prediction is part of the selected set.
# is_biased:	True, if prediction is part of the most biased set.
# cai:		CAI value of prediction based on adaptive CAI method
# cai_ext:	CAI value based on reference preferences (optional)
# cai_cias:	CAI value based on biased set
# enc:		ENC value of prediction
# gc:		GC content of sequence
# gc3:		GC content in third position
%.create-table-codonbias: 
	$(PRELOG)
	-@$(CMD_PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(CMD_PSQL_CONNECTION) "CREATE TABLE $* ( \
	prediction_id $(TYPE_PREDICTION_ID), \
	is_selected BOOLEAN, \
	is_dominant BOOLEAN, \
	ncodons INTEGER, \
	n1d INTEGER, \
	n2d INTEGER, \
	n3d INTEGER, \
	n4d INTEGER, \
	cai FLOAT, \
	$(EXTRA_COLUMNS) \
	enc FLOAT, \
	percent_gc FLOAT, \
	percent_gc3 FLOAT, \
	percent_gc3_d FLOAT, \
	percent_gc3_2d FLOAT, \
	percent_gc3_3d FLOAT, \
	percent_gc3_4d FLOAT)"
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction_id ON $* (prediction_id);" 
	$(EPILOG)

###################################################
###################################################
###################################################
## Analysis using random sets
###################################################

random: random.set random.frequencies random.weights random.acai

RANDOMS_TARGETS:=$(shell for ((x = 0; x < $(PARAM_RANDOM_ITERATIONS); ++x)); do echo $$x; done)

random-hook: $(RANDOMS_TARGETS:%=random%-hook)

random%-hook: 
	$(CMD_REMOTE_SUBMIT) $(MAKE) random$*.set random$*.frequencies random$*.rweights random$*.acai CMD_REMOTE_SUBMIT=eval

randoms: randoms.run randoms.finish

randoms.run:
	$(PRELOG)
	$(MAKE) -j $(PARAM_NUM_JOBS) random-hook
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Collect results for random runs.
## Note that these are not normalized for orthologs.
#########################################################################
randoms.finish: randoms.run randoms.zscore_table

randoms.table: randoms.run
	$(PRELOG)
	@for (( y=0; y < $(PARAM_RANDOM_ITERATIONS); ++y )); do \
		python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
			--input-file-codons=random$${y}.acai_codons \
			--input-file-genes=random$${y}.acai_genes \
			--input-file-trace=random$${y}.acai_trace \
			--select="CAIEXT AS CAIRAND$${y}" > $@_tmp_$${y}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py $@_tmp_* > $@
	@rm -f $@_tmp*
	$(EPILOG)

randoms_%.zscore: 
	@printf "%i\t" $* > $@; \
	python $(DIR_SCRIPTS_GENEPREDICTION)codonbias_acai2tsv.py \
		--input-file-codons=random$*.acai_codons \
		--input-file-genes=random$*.acai_genes \
		--input-file-trace=random$*.acai_trace \
		--select="CAIEXT" < /dev/null |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_ribosomes.py \
		--field-compare=CAIEXT \
		--filename-identifiers=random$*.set \
		--field-extract=%sCAIEXT \
		--field-compare=%sCAIEXT \
		--output-fields=zscore \
		--output-pattern="%s%s" |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--column=2 --flat --skip-header >> $@

randoms_%.zscore-wrapped:
	@$(CMD_REMOTE_SUBMIT) $(MAKE) randoms_$*.zscore < /dev/null

randoms.zscore_table: randoms.run
	$(PRELOG)
	$(MAKE) -j $(PARAM_NUM_JOBS) $(RANDOMS_TARGETS:%=randoms_%.zscore-wrapped)
	@printf "sample\tvalue\t" > $@
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@
	@for (( y=0; y < $(PARAM_RANDOM_ITERATIONS); ++y )); do \
		cat randoms_$${y}.zscore >> $@; \
	done
	$(EPILOG)

###################################################
## cleaning up targets
clean: 
	rm -f peptides2cds selected.fasta all.fasta

distclean:
	rm -f acai* enc log

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
