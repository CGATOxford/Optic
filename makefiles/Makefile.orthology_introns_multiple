################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_introns_multiple 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
SHELL=/bin/bash --login

INPUT_PEPTIDES?=peptides.fasta
INPUT_GENOMES?=$(wildcard genome*.fasta)

LOG=log

QUERY1?=
QUERY2?=

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=introns

################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/devel/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=fgu202
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)
## table with rates
PARAM_TABLE_NAME_RATES?=$(PARAM_PSQL_SCHEMA).rates

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=bc1.q,bc2.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/
#########################################################################
## pattern for genome files. If there is a single file, set to filename
PARAM_PATTERN_GENOME_FILES?=genome_%s.fasta

################################################
PARAM_NUM_GENOMES?=7
PARAM_PREFIX_GENOMES?=pdyak_vs_dmel pdere_vs_dmel pdana_vs_dmel pdpse_vs_dmel pdvir_vs_dmel pdmoj_vs_dmel pdmel_vs_dmel
PARAM_ROOT_GENOMES?=/net/cpp-group/andreas/projects/flies/
PARAM_DIR_GENOMES?=D_yakuba1 D_erecta1 D_ananassae1 D_pseudoobscura1 D_virilis1 D_mojavensis1 D_melanogaster1
PARAM_SEPARATOR?=|
PARAM_PATTERN_GENOME?=^([^$(PARAM_SEPARATOR)]+)$(PARAM_SEPARATOR)

################################################
PARAM_MIN_COVERAGE?=90

################################################
PARAM_PREDICTION_CHUNKSIZE?=100
PARAM_PREDICTION_NUMJOBS?=100

################################################
## number of nucleotides in exons used to anchor
## intron alignments.
PARAM_ASSIGNMENT_EXTEND_INTRONS?=12
PARAM_ASSIGNMENT_CHUNKSIZE?=100
PARAM_ASSIGNMENT_NUMJOBS?=100
PARAM_ASSIGNMENT_MAX_INTRON_LENGTH?=20000
PARAM_ASSIGNMENT_MIN_COVERAGE?=80
PARAM_ASSIGNMENT_OPTIONS?=--extend-introns=$(PARAM_ASSIGNMENT_EXTEND_INTRONS) --max-intron-length=$(PARAM_ASSIGNMENT_MAX_INTRON_LENGTH) --write-exons=full --write-introns=dialigned --only-best --mask --min-coverage=$(PARAM_ASSIGNMENT_MIN_COVERAGE)

################################################
## entries per chunk for exon rate calculation
PARAM_EXONS_CHUNKSIZE?=2000
PARAM_EXONS_NUMJOBS?=100

################################################
PARAM_ANALYSIS_MIN_INTRON_LENGTH?=150
PARAM_ANALYSIS_MAX_INTRON_LENGTH?=18000

## maximum number of frameshift tolerated
PARAM_MAX_FRAMESHIFTS?=0

## minimum number of aligned positions in alignment
PARAM_ANALYSIS_MIN_ALIGNED?=150

## methods to use
PARAM_METHODS?=clusaligned dbaligned dialigned dialignedlgs gbaligned

## ortholog sets
PARAM_INPUT_ORTHOLOGS?=../clustering/blastp3/orthology/step4.dir/full_orthologs.components.map

################################################
# Section parameters: end
################################################

## setup directories for each pair of genomes
all_on_all:
	awk '{ if (last != $$1) { \
		for (i = 0; i < n-1; ++i) { \
			for (j = i+1; j < n; ++j) { \
				printf("%s\t%s\t%s\t\n", last, a[i], a[j]);  \
			}; \
		}; \
		n = 0; for (i in a) { delete a[i]; }; \
		}; \
	       a[n] = sprintf("%s", $$2); \
	       ++n; \
	       last = $$1; \
	     } \
	   END { \
		for (i = 0; i < n-1; ++i) { \
			for (j = i+1; j < n; ++j) { \
				printf("%s\t%s\t%s\t\n", last, a[i], a[j]);  \
			}; \
		}; \
	       }' < $(PARAM_INPUT_ORTHOLOGS) > $@

prepare: create-log all_on_all
	$(CMD_LOG) "started $@"
	@genomes=( $(PARAM_PREFIX_GENOMES) ); \
	genome_dirs=( $(PARAM_DIR_GENOMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		for (( y = $$x + 1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			target_dir=$${genomes[$$x]}-$${genomes[$$y]}.dir; \
			echo "setting up $${target_dir}" $(TOLOG); \
			mkdir $${target_dir}; \
			python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py --method=introns \
				--project=introns_$${genomes[$$x]}_vs_$${genomes[$$y]} \
				$(CURDIR)/$${target_dir} \
				QUERY1=$${genomes[$$x]} \
				QUERY2=$${genomes[$$y]} \
				PARAM_STEP2_WRITE_INTRONS="$(PARAM_STEP2_WRITE_INTRONS)" \
				PARAM_STEP2_WRITE_EXONS="$(PARAM_STEP2_WRITE_EXONS)" \
				> $${target_dir}/setup.log; \
			target_file=$${target_dir}/orthologous_transcripts.pairs; \
			awk -v g1=$${genomes[$$x]} -v g2=$${genomes[$$y]} \
				'!/^#/ { \
			           p1=substr($$2,1,index( $$2, "$(PARAM_SEPARATOR)")-1); \
				   p2=substr($$3,1,index( $$3, "$(PARAM_SEPARATOR)")-1); \
				   if (p1 == g1 && p2 == g2 ) { printf("%s\t%s\t%s\n", $$2, $$3, $$1); }\
				   if (p1 == g2 && p2 == g1 ) { printf("%s\t%s\t%s\n", $$3, $$2, $$1); }\
				} ' < all_on_all > $${target_file}; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$x]}/export_clustering_peptides.fasta \
				$${target_dir}/$${genomes[$$x]}_peptides.fasta; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$x]}/export_clustering_cdnas.fasta \
				$${target_dir}/$${genomes[$$x]}_cdnas.fasta; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$x]}/export_clustering_exon_boundaries \
				$${target_dir}/$${genomes[$$x]}_exon_boundaries; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$y]}/export_clustering_peptides.fasta \
				$${target_dir}/$${genomes[$$y]}_peptides.fasta; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$y]}/export_clustering_cdnas.fasta \
				$${target_dir}/$${genomes[$$y]}_cdnas.fasta; \
			ln -s $(PARAM_ROOT_GENOMES)$${genome_dirs[$$y]}/export_clustering_exon_boundaries \
				$${target_dir}/$${genomes[$$y]}_exon_boundaries; \
		done; \
	done; 
	@touch $@
	$(CMD_LOG) "finished $@"

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

STEP1_TARGETS=$(wildcard *-*.dir)

all: $(STEP1_TARGETS)

## run whole thing on cluster, minimal parallelization of subjob
$(STEP1_TARGETS):
	$(CMD_REMOTE_SUBMIT) $(MAKE) -C $@ all CMD_REMOTE_SUBMIT= PARAM_STEP2_NUMJOBS=1 < /dev/null

.PHONY: step1-hook $(STEP1_TARGETS)

