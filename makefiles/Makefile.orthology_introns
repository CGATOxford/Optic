################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_introns 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

INPUT_PEPTIDES?=peptides.fasta
INPUT_GENOMES?=$(wildcard genome*.fasta)

LOG=log

QUERY1?=
QUERY2?=

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=introns_$(QUERY1)_vs_$(QUERY2)

################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)
## table with rates
PARAM_TABLE_NAME_RATES?=$(PARAM_PSQL_SCHEMA).rates

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=bc1.q,bc2.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/
#########################################################################
## pattern for genome files. If there is a single file, set to filename
PARAM_INPUT_GENOME?=genome_%s.fasta
PARAM_SEPARATOR=|
################################################
PARAM_STEP2_NUMJOBS?=10
PARAM_STEP2_CHUNKSIZE?=1000

################################################
PARAM_MIN_COVERAGE?=90

################################################
PARAM_PREDICTION_CHUNKSIZE?=100
PARAM_PREDICTION_NUMJOBS?=100

################################################
## number of nucleotides in exons used to anchor
## intron alignments.
PARAM_ASSIGNMENT_EXTEND_INTRONS?=12
PARAM_ASSIGNMENT_CHUNKSIZE?=100
PARAM_ASSIGNMENT_NUMJOBS?=100
PARAM_ASSIGNMENT_MAX_INTRON_LENGTH?=20000
PARAM_ASSIGNMENT_MIN_COVERAGE?=80
PARAM_ASSIGNMENT_WRITE_INTRONS?=unaligned,dbaligned,clusaligned
PARAM_ASSIGNMENT_WRITE_EXONS?=unaligned
PARAM_ASSIGNMENT_OPTIONS?=--extend-introns=$(PARAM_ASSIGNMENT_EXTEND_INTRONS) \
				--max-intron-length=$(PARAM_ASSIGNMENT_MAX_INTRON_LENGTH) \
				--write-exons=$(PARAM_WRITE_EXONS) \
				--write-introns=$(PARAM_WRITE_INTRONS) \
				--only-best --mask --min-coverage=$(PARAM_ASSIGNMENT_MIN_COVERAGE) \
				--compress

################################################
## entries per chunk for exon rate calculation
PARAM_EXONS_CHUNKSIZE?=2000
PARAM_EXONS_NUMJOBS?=100

################################################
PARAM_ANALYSIS_MIN_INTRON_LENGTH?=150
PARAM_ANALYSIS_MAX_INTRON_LENGTH?=18000
## maximum length difference between introns to align
PARAM_ANALYSIS_MAX_INTRON_LENGTH_DIFFERENCE?=1000

## options to introns2rates
PARAM_ANALYSIS_ALIGNMENT_OPTIONS?=--fixed-alpha=999.0 

## maximum number of frameshift tolerated
PARAM_MAX_FRAMESHIFTS?=0

## minimum number of aligned positions in alignment
PARAM_ANALYSIS_MIN_ALIGNED?=150

################################################
PARAM_STEP2_EXTEND_INTRONS?=12
PARAM_STEP2_CHUNKSIZE?=100
PARAM_STEP2_NUMJOBS?=100
PARAM_STEP2_MAX_INTRON_LENGTH?=20000
PARAM_STEP2_MIN_COVERAGE?=80
PARAM_STEP2_WRITE_INTRONS?=unaligned,dbaligned,clusaligned
PARAM_STEP2_WRITE_EXONS?=unaligned
PARAM_STEP2_OPTIONS?=--extend-introns=$(PARAM_STEP2_EXTEND_INTRONS) \
				--max-intron-length=$(PARAM_STEP2_MAX_INTRON_LENGTH) \
				--write-exons=$(PARAM_STEP2_WRITE_EXONS) \
				--write-introns=$(PARAM_STEP2_WRITE_INTRONS) \
				--mask \
				--min-coverage=$(PARAM_STEP2_MIN_COVERAGE) \
				--compress

################################################
## Align introns and calculate rates
PARAM_STEP3_CHUNKSIZE?=300
PARAM_STEP3_NUMJOBS?=100

PARAM_STEP3_MIN_INTRON_LENGTH?=150
PARAM_STEP3_MAX_INTRON_LENGTH?=18000

## maximum length difference between introns to align
PARAM_STEP3_MAX_INTRON_LENGTH_DIFFERENCE?=1000

## options to introns2rates
PARAM_STEP3_ALIGNMENT_METHODS?=dbaligned
PARAM_STEP3_ALIGNMENT_OPTIONS?=--fixed-alpha=999.0 

################################################
# Section parameters: end
################################################

PREDICTIONS_QUERIES=$(wildcard *.chunk)
PREDICTIONS_TARGETS=$(PREDICTIONS_QUERIES:%.chunk=%.matches)

ASSIGNMENTS_QUERIES=$(wildcard *.chunk)
ASSIGNMENTS_TARGETS=$(ASSIGNMENTS_QUERIES:%.chunk=%.transcripts)

EXONS_QUERIES=$(wildcard *.chunk)
EXONS_TARGETS=$(ASSIGNMENTS_QUERIES:%.chunk=%.exon_rates)

TARGETS_INTRON_RATES=$(PARAM_ASSIGNMENT_WRITE_INTRONS:%=introns_%.rates) $(PARAM_ASSIGNMENT_WRITE_INTRONS:%=fixed_introns_%.rates)

################################################
## columns in exon section
EXONS_COLUMN_TOKEN1=3
EXONS_COLUMN_EXON_ID1=4
EXONS_COLUMN_TOKEN2=5
EXONS_COLUMN_EXON_ID2=6
EXONS_COLUMN_GENOME_FROM1=7
EXONS_COLUMN_GENOME_TO1=8
EXONS_COLUMN_GENOME_FROM2=9
EXONS_COLUMN_GENOME_TO2=10
EXONS_COLUMN_SEQ1=11
EXONS_COLUMN_SEQ2=12

################################################
## old columns in intron section
INTRONS_COLUMN_TOKEN1=3
INTRONS_COLUMN_LEN_QUERY1=6
INTRONS_COLUMN_TOKEN2=7
INTRONS_COLUMN_LEN_QUERY2=10
INTRONS_COLUMN_ALIGNED=11
INTRONS_COLUMN_COVERAGE=12
INTRONS_COLUMN_RATE=13
INTRONS_COLUMN_GENOME_FROM1=7
INTRONS_COLUMN_GENOME_TO1=8
INTRONS_COLUMN_GENOME_FROM2=9
INTRONS_COLUMN_GENOME_TO2=10
INTRONS_COLUMN_RATE_IDENTITY=18
INTRONS_COLUMN_RATE_TRANSITIONS=19
INTRONS_COLUMN_RATE_TRANSVERSIONS=20
INTRONS_COLUMN_BLOCK_SIZES=21
# gap lengths in alignments
INTRONS_COLUMN_LGAP_SIZES=22
INTRONS_COLUMN_RGAP_SIZES=23
# splice sites
INTRONS_COLUMN_LSPLICE=24
INTRONS_COLUMN_RSPLICE=25

################################################
## columns in intron section for unaligned introns
INTRONS_COLUMN_TOKEN1=3
INTRONS_COLUMN_INTRON_ID1=4
INTRONS_COLUMN_NINTRONS1=5
INTRONS_COLUMN_LEN_QUERY1=6
INTRONS_COLUMN_TOKEN2=7
INTRONS_COLUMN_INTRON_ID2=8
INTRONS_COLUMN_NINTRONS2=9
INTRONS_COLUMN_LEN_QUERY2=10
INTRONS_COLUMN_NGAPS=11
INTRONS_COLUMN_ALILENGTH=12
INTRONS_COLUMN_ALIGNED=13
INTRONS_COLUMN_FROM1=14
INTRONS_COLUMN_TO1=15
INTRONS_COLUMN_ALI1=16
INTRONS_COLUMN_FROM2=17
INTRONS_COLUMN_TO2=18
INTRONS_COLUMN_ALI2=19
INTRONS_COLUMN_GENOME_FROM1=20
INTRONS_COLUMN_GENOME_TO1=21
INTRONS_COLUMN_GENOME_FROM2=22
INTRONS_COLUMN_GENOME_TO2=23

################################################
################################################
################################################
################################################
################################################
################################################
################################################

## Postgres
CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c
CONNECTION_OPTIONS=-t -A -F"	" 

intron_rates: $(TARGETS_INTRON_RATES)

################################################
## include some helper Makefile
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.plot

################################################
prepare: create_dirs create_tables

predict: $(QUERY1)_genes.predictions $(QUERY2)_genes.predictions \
	$(QUERY1)_selected.predictions $(QUERY2)_selected.predictions \
	$(QUERY1)_selected.cds $(QUERY2)_selected.cds \
	$(QUERY1)_transcripts.fasta $(QUERY2)_transcripts.fasta 

all: step2

################################################
%_transcripts2contigs.map: %_genes2transcripts.map
	awk '{printf("%s\t%s\n", $$6, $$5);}' \
	< $*_genes2transcripts.map > $@

%_transcripts2genes.map: %_genes2transcripts.map
	awk '{printf("%s\t%s\n", $$6, $$1);}' \
	< $*_genes2transcripts.map > $@

################################################
## predict gene structure from peptides and transcripts
%_genes.pairs: %_genes2transcripts.map %_peptides.fasta
	sort -k5,5 $*_genes2transcripts.map |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--genome-file=$*_genome/%s.fasta \
	--forward-coordinates \
	--input-format=ensembl \
	--format=chunks \
	--chunk=$(PARAM_PREDICTION_CHUNKSIZE) \
	--peptides=$*_peptides.fasta \
	--prefix=$*_genes/query_ \
	--suffix=.chunk \
	--min-margin=10 > $@

%_genes.predictions: %_peptides.fasta %_genes.pairs
	$(MAKE) -k -j $(PARAM_PREDICTIONS_NUMJOBS) -C $*_genes predictions-hook 
	find $*_genes -name "*.matches" -exec cat {} \; > $@

predictions-hook: $(PREDICTIONS_TARGETS)

%.matches: %.chunk
	$(CMD_REMOTE_SUBMIT) python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py \
	--method=twostep_ee \
	--probe \
	--probe-options=\'--proteinwordlimit 5 --proteinhspdropoff 5  --proteinwordlen 3 --subopt FALSE\' \
	- \
	< $*.chunk > $@

####################################################################
## select genes: minimum coverage and no frameshifts
%_selected.predictions: %_genes.predictions
	awk ' BEGIN { keep=0; } \
	/^# RESULT:/ { keep=1; } \
	/^# START: / { keep=0}; \
	/^#/ { next; }  \
	/^"/ { next; }  \
	/^\\/ { next; }  \
	{ if (keep && $$13 > $(PARAM_MIN_COVERAGE) && $$15 <= $(PARAM_MAX_FRAMESHIFTS) && !found[$$1]) { \
	found[$$1] = 1; printf("%i\t%s\n", ++id, $$0);} } ' \
	< $*_genes.predictions > $@

####################################################################
## location of genes
## minimum and maximum of a gene is taken.
%_genes.regions: %_selected.predictions
	awk '{printf("%s\t%s\t%s\t%s\t%s\n", $$2, $$3, $$4, $$23, $$24);'} < $*_selected.predictions |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$*_transcripts2genes.map --columns-token=1 |\
	sort -k1,1 |\
	awk 'BEGIN{ id="";chr="";str="";a=-1;b=-1; } \
		{ \
			if ($$1 != id) \
			{ \
				if (a >= 0) \
				{ \
					printf("%s\t%s\t%s\t%s\t%s\n", id,a,b,str,chr); \
				}  \
				id=$$1;chr=$$2;str=$$3;a=$$4;b=$$5; \
			} \
			a = ( $$4 < a ) ? $$4 : a; \
			b = ( $$5 > b ) ? $$5 : b; \
		} \
	    END { printf("%s\t%s\t%s\t%s\t%s\n", id,a,b,str,chr); } ' \
	> $@

####################################################################
## build file with exon cds
%_selected.cds: %_selected.predictions
	sort -k3,3 < $*_selected.predictions |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2cds.py \
	--genome-file=$*_genome/%s.fasta --format=cds --reset-to-start  \
	> $@

####################################################################
## build fasta file with transcripts
%_transcripts.fasta: %_selected.predictions
	sort -k3,3 < $*_selected.predictions |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2cds.py \
	--genome-file=$*_genome/%s.fasta --format=cdnas --reset-to-start |\
	grep -v "#" | awk '{printf(">%s\n%s\n", $$2, $$7);}' > $@


####################################################################
## assign orthologous transcripts to genes
assignments.prepare:
	rm -f assignments/*.{chunk,transcripts}
	$(PARAM_CMD_COPY)$(QUERY1)_genes2transcripts.map $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_genes2transcripts.map $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY1)_peptides.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_peptides.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY1)_selected.cds $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_selected.cds $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY1)_transcripts.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_transcripts.fasta $(DIR_TMP_SHARED_LOCAL)
	split -l $(PARAM_ASSIGNMENT_CHUNKSIZE) orthologs.genes assignments/assignments_
	for file in assignments/assignments_*; do mv $$file $$file.chunk; done
	touch $@
	rm -rf $(DIR_TMP_SHARED_LOCAL)$(QUERY1)_transcripts.fasta.idx
	python $(DIR_SCRIPTS_GENEPREDICTION)index_fasta.py $(DIR_TMP_SHARED_LOCAL)$(QUERY1)_transcripts.fasta
	rm -rf $(DIR_TMP_SHARED_LOCAL)$(QUERY2)_transcripts.fasta.idx
	python $(DIR_SCRIPTS_GENEPREDICTION)index_fasta.py $(DIR_TMP_SHARED_LOCAL)$(QUERY2)_transcripts.fasta

orthologs.transcripts: orthologs.genes assignments.prepare
	$(MAKE) -k -j $(PARAM_ASSIGNMENT_NUMJOBS) -C assignments assignments-hook 
	find assignments/ -name "*.transcripts" -exec cat {} \; > $@

assignments-hook: $(ASSIGNMENTS_TARGETS)

%.transcripts: %.chunk
	$(CMD_REMOTE_SUBMIT) python $(DIR_SCRIPTS_GENEPREDICTION)optic/orthologs2transcripts.py \
	--map1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_genes2transcripts.map \
	--map2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_genes2transcripts.map \
	--peptides1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_peptides.fasta \
	--peptides2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_peptides.fasta \
	--transcripts1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_transcripts.fasta \
	--transcripts2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_transcripts.fasta \
	--cds1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_selected.cds \
	--cds2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_selected.cds \
	$(PARAM_ASSIGNMENT_OPTIONS) \
	< $*.chunk > $@

###########################################################
## calculate exon rates
exons.rates: orthologs.transcripts exons.rates.prepare
	$(MAKE) -k -j $(PARAM_ASSIGNMENT_NUMJOBS) -C exons exons-hook 
	find exons/ -name "*.exon_rates" -exec cat {} \; > $@

exons.rates.prepare: orthologs.transcripts
	grep "^exon" orthologs.transcripts | \
	awk '{ printf(">%s\n%s\n>%s\n%s\n", $$3, $$11, $$5, $$12); }' |\
	perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -p exons/exons_ -s .chunk $(PARAM_EXONS_CHUNKSIZE) > $@

exons-hook: $(EXONS_TARGETS)

%.exon_rates: %.chunk
	$(PARAM_CMD_COPY)$*.chunk $(DIR_TMP_SHARED_LOCAL)
	$(CMD_REMOTE_SUBMIT) seq_pairs_kaks --cdna_sequences $(DIR_TMP_SHARED_REMOTE)$*.chunk --aligned -t $(DIR_TMP_SHARED_REMOTE)$@_paml < /dev/null > $@
	rm -rf $(DIR_TMP_SHARED_LOCAL)$@_paml
	rm -rf $(DIR_TMP_SHARED_LOCAL)$*.chunk


###########################################################
## Dump some summary
%.summary:
	echo -e "# Summary for $*" > $@
	echo -e "`grep -c ">" $*_peptides.fasta`\tpeptides" >> $@
	echo -e "`grep -c ">" $*_transcripts.fasta`\ttranscripts" >> $@
	echo -e "`wc -l < $*_genes2transcripts.map | perl -pe 's/\s//g'`\tgenes2transcripts" >> $@
	echo -e "`grep 'written' $*_genes.pairs | perl -p -e 's/[^\d]//g'`\tattempted predictions" >> $@
	echo -e "`grep -c -v "#" $*_genes.predictions`\tfound predictions" >> $@
	echo -e "`grep -c -v "#" $*_selected.predictions`\tselected predictions" >> $@

summary: $(QUERY1).summary $(QUERY2).summary
	cat $(QUERY1).summary $(QUERY2).summary > $@
	echo -e "# Ortholog sets" >> $@
	echo -e "`grep -c -v "#" orthologs.genes`\torthologous genes" >> $@
	echo -e "`grep -v "#" orthologs.transcripts | grep -c -v "^[exon|intron]" `\torthologous transcripts" >> $@
	echo -e "`grep -c "^exon" orthologs.transcripts`\taligned exons" >> $@
	echo -e "`grep -c "^intron" orthologs.transcripts`\taligned introns" >> $@
	echo -e "`grep -c "^intron" introns.rates`\tintron rates" >> $@
	echo -e "`grep -c "^intron" introns_filtered.rates`\tfiltered intron rates" >> $@

###########################################################
###########################################################
###########################################################
## Data about gene lengths
orthologs.matches: orthologs.transcripts
	grep -v -e "#" -e "^exon" -e "^intron" < orthologs.transcripts > $@

cds.lengths: orthologous_segments.pairs
	awk '/^exon\tunaligned/ \
		{ if ($$$(EXONS_COLUMN_TOKEN1) != last1 && $$$(EXONS_COLUMN_TOKEN2) != last2) \
			{ \
				if (first_from1) \
					{ \
					printf("%s\t%s\t%i\t%i\n", last1, last2, last_to1-first_from1+1, last_to2-first_from2+1); \
					} \
		  	  	first_from1=$$$(EXONS_COLUMN_GENOME_FROM1); \
			  	first_from2=$$$(EXONS_COLUMN_GENOME_FROM2); \
		  	  	last1 = $$$(EXONS_COLUMN_TOKEN1); \
		  	  	last2 = $$$(EXONS_COLUMN_TOKEN2); \
			}\
		  	last_to1=$$$(EXONS_COLUMN_GENOME_TO1); \
			last_to2=$$$(EXONS_COLUMN_GENOME_TO2); \
		} \
	    END \
		{ printf("%s\t%s\t%i\t%i\n" , last1, last2, last_to1-first_from1+1, last_to2-first_from2+1); }' \
	< orthologous_segments.pairs > $@

introns.lengths: orthologous_segments.pairs
	awk '/^intron\tunaligned/ { \
		printf("%s$(PARAM_SEPARATOR)%s\t%s$(PARAM_SEPARATOR)%s\t%i\t%i\n", \
					   $$$(INTRONS_COLUMN_TOKEN1), $$$(INTRONS_COLUMN_INTRON_ID1), \
					   $$$(INTRONS_COLUMN_TOKEN2), $$$(INTRONS_COLUMN_INTRON_ID2), \
					   $$$(INTRONS_COLUMN_GENOME_TO1) - $$$(INTRONS_COLUMN_GENOME_FROM1), \
					   $$$(INTRONS_COLUMN_GENOME_TO2) - $$$(INTRONS_COLUMN_GENOME_FROM2)) \
					}' \
	< orthologous_segments.pairs > $@

exons.lengths: orthologous_segments.pairs
	awk '/^exon\tunaligned/ { \
		printf("%s$(PARAM_SEPARATOR)%s\t%s$(PARAM_SEPARATOR)%s\t%i\t%i\n", \
					   $$$(EXONS_COLUMN_TOKEN1), $$$(EXONS_COLUMN_EXON_ID1), \
					   $$$(EXONS_COLUMN_TOKEN2), $$$(EXONS_COLUMN_EXON_ID2), \
					   $$$(EXONS_COLUMN_GENOME_TO1) - $$$(EXONS_COLUMN_GENOME_FROM1), \
					   $$$(EXONS_COLUMN_GENOME_TO2) - $$$(EXONS_COLUMN_GENOME_FROM2)) \
					}' \
	< orthologous_segments.pairs > $@

gene_length_differences.png: cds.lengths
	awk '{printf("%i\n", $$1 - $$2)'} < orthologs.lengths | \
	python /net/cpp-group/scripts/tools/data2histogram.py --bin-size=200 |\
	python /net/cpp-group/scripts/tools/plot_histogram.py --logscale=y --hardcopy=$@

gene_length_correlation.png: orthologs.lengths
	cat orthologs.lengths |\
	python /net/cpp-group/scripts/tools/plot_data.py --hardcopy=$@ --fit

$(QUERY1)_gene_length.hist: orthologs.lengths
	cut -f 1 orthologs.lengths |\
	python /net/cpp-group/scripts/tools/data2histogram.py --bin-size=200 > $@

$(QUERY1)_gene_length_cumul.hist: $(QUERY1)_gene_length.hist
	python /net/cpp-group/scripts/tools/histogram2histogram.py < $(QUERY1)_gene_length.hist |\
	grep -v "#" | cut -f 1,4 > $@

$(QUERY2)_gene_length.hist: orthologs.lengths
	cut -f 2 orthologs.lengths |\
	python /net/cpp-group/scripts/tools/data2histogram.py --bin-size=200 > $@

$(QUERY2)_gene_length_cumul.hist: $(QUERY2)_gene_length.hist
	python /net/cpp-group/scripts/tools/histogram2histogram.py < $(QUERY2)_gene_length.hist |\
	grep -v "#" | cut -f 1,4 > $@

combined_gene_length.png: $(QUERY1)_gene_length.hist $(QUERY2)_gene_length.hist
	python /net/cpp-group/scripts/tools/combine_histograms.py \
	--headers=$(QUERY1),$(QUERY2) \
	$(QUERY1)_gene_length.hist $(QUERY2)_gene_length.hist |\
	python /net/cpp-group/scripts/tools/plot_histogram.py --logscale=x --hardcopy=$@

combined_gene_length_cumul.png: $(QUERY1)_gene_length_cumul.hist $(QUERY2)_gene_length_cumul.hist
	python /net/cpp-group/scripts/tools/plot_data.py \
	--legend=bin,$(QUERY1),$(QUERY2) \
	--files=$(QUERY1)_gene_length_cumul.hist,$(QUERY2)_gene_length_cumul.hist \
	--logscale=x --hardcopy=$@

###########################################################
$(QUERY1)_genes.stats: 
	cut -f 1 orthologs.lengths | python /net/cpp-group/scripts/tools/data2stats.py >$@
$(QUERY2)_genes.stats: 
	cut -f 2 orthologs.lengths | python /net/cpp-group/scripts/tools/data2stats.py >$@

combined_genes.stats: $(QUERY1)_genes.stats $(QUERY2)_genes.stats
	rm -f $@
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py $(QUERY1)_genes.stats $(QUERY2)_genes.stats > $@

###########################################################
###########################################################
###########################################################
## Plot functions
%_intron_size_correlation.data: %.rates
	grep -v "#" $*.rates | cut -f 6,10 | python $(DIR_SCRIPTS_TOOLS)plot_data.py -f

%_intron_correlation_rate_coverage.data: %.rates
	echo -e "coverage\tdistance" > $@
	grep -v "#" $*.rates |\
	cut -f $(INTRONS_COLUMN_COVERAGE),$(INTRONS_COLUMN_RATE) >> $@

%_rates_per_chromosome.hist: %.rates
	cat $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY1)_transcripts2contigs.map --columns-token=$(INTRONS_COLUMN_TOKEN1) |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY2)_transcripts2contigs.map --columns-token=7 > $@_tmp
	for x in `cut -f $(INTRONS_COLUMN_TOKEN1) $@_tmp | sort | uniq `; do \
		echo -e "# bin\trate" > $@_$${x}.hist; \
		grep -v "#" $@_tmp | cut -f $(INTRONS_COLUMN_TOKEN1),$(INTRONS_COLUMN_RATE) | grep "$${x}" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=20.0 | \
		grep -v "#" >> $@_$$x.hist; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--headers=`echo $@_*.hist | perl -pe "s/$@_//g; s/.hist//g; s/ +/,/g" ` \
	--normalize \
	$@_*.hist > $@
	rm -f $@_*.hist $@_tmp

$(QUERY1)_%_rates_per_chromosome.stats: %.rates
	cat $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY1)_transcripts2contigs.map --columns-token=$(INTRONS_COLUMN_TOKEN1) > $@_tmp
	for x in `cut -f $(INTRONS_COLUMN_TOKEN1) $@_tmp | sort | uniq `; do \
		echo -e "category\t$${x}" > $@_$${x}.stats; \
		grep -v "#" $@_tmp | cut -f $(INTRONS_COLUMN_TOKEN1),$(INTRONS_COLUMN_RATE) | grep "$${x}" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py | \
		grep -v "#" >> $@_$$x.stats; \
	done
	echo -e "category\tall" > $@_all.stats; \
	grep -v "#" $@_tmp |\
		cut -f $(INTRONS_COLUMN_RATE) |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py | \
		grep -v "#" >> $@_all.stats; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --headers $@_*.stats > $@
	rm -f $@_*.stats $@_tmp

$(QUERY2)_%_rates_per_chromosome.stats: %.rates
	cat $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY2)_transcripts2contigs.map --columns-token=7 > $@_tmp
	for x in `cut -f 7 $@_tmp | sort | uniq `; do \
		echo -e "category\t$${x}" > $@_$${x}.stats; \
		grep -v "#" $@_tmp |\
			cut -f 7,$(INTRONS_COLUMN_RATE) | grep "$${x}" | cut -f 2 |\
			python $(DIR_SCRIPTS_TOOLS)data2stats.py | \
			grep -v "#" >> $@_$$x.stats; \
	done
	echo -e "category\tall" > $@_all.stats; \
	grep -v "#" $@_tmp |\
		cut -f $(INTRONS_COLUMN_RATE) |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py | \
		grep -v "#" >> $@_all.stats; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --headers $@_*.stats > $@
	rm -f $@_*.stats $@_tmp

###########################################################
## sort by average distance and get human genes
%_genes_sorted.list: %.rates
	grep -v "#" $*.rates |\
	awk '{ if ($$$(INTRONS_COLUMN_TOKEN1) != a || $$$(INTRONS_COLUMN_TOKEN2) != b) \
		{ if (n > 0) {printf("%s\t%s\t%i\t%5.2f\n", a,b,n,t/n)} ; \
		  t = 0; n = 0;\
		  a = $$$(INTRONS_COLUMN_TOKEN1); b = $$$(INTRONS_COLUMN_TOKEN2);} \
		t+=$$$(INTRONS_COLUMN_RATE); n+=1}; \
	     END { printf("%s\t%s\t%i\t%5.2f\n", a,b,n,t/n); } ' |\
	sort -k4,4n |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY1)_transcripts2genes.map --columns-token=1 |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$(QUERY2)_transcripts2genes.map --columns-token=2 > $@

###########################################################
## covered regions by alignment 
$(QUERY1)_%_aligned.hist: %.rates
	awk '!/^#/ { if ($$$(INTRONS_COLUMN_LEN_QUERY1) > 0 ) \
	{printf("%5.4f\n", $$$(INTRONS_COLUMN_ALIGNED) / $$$(INTRONS_COLUMN_LEN_QUERY1));}}' < $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > $@

$(QUERY2)_%_aligned.hist: %.rates
	awk '!/^#/ { if ($$$(INTRONS_COLUMN_LEN_QUERY2) > 0 ) \
	{printf("%5.4f\n", $$$(INTRONS_COLUMN_ALIGNED) / $$$(INTRONS_COLUMN_LEN_QUERY2));}}' < $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > $@

%_aligned.stats: %.rates
	awk '!/^#/ { \
	l1 += $$$(INTRONS_COLUMN_LEN_QUERY1); \
	l2 += $$$(INTRONS_COLUMN_LEN_QUERY2); \
	l  += $$$(INTRONS_COLUMN_ALIGNED); \
	} \
	END { printf("$(QUERY1)\t%i\t%i\t%5.2f\n", l, l1, l/l1); \
	      printf("$(QUERY2)\t%i\t%i\t%5.2f\n", l, l1, l/l2); }' \
	< $*.rates > $@


###########################################################
## Block size distribution
%_block_sizes.hist: %.rates
	awk '!/^#/ { split($$$(INTRONS_COLUMN_BLOCK_SIZES),a,","); \
	for (x in a) { printf("%i\n", a[x]); }; }' \
	< $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@	

%_lgap_sizes.hist: %.rates
	awk '!/^#/ { split($$$(INTRONS_COLUMN_LGAP_SIZES),a,","); \
	for (x in a) { printf("%i\n", a[x]); }; }' \
	< $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@	

%_rgap_sizes.hist: %.rates
	awk '!/^#/ { split($$$(INTRONS_COLUMN_RGAP_SIZES),a,","); \
	for (x in a) { printf("%i\n", a[x]); }; }' \
	< $*.rates |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@	

%_sizes.png: %_block_sizes.hist %_lgap_sizes.hist %_rgap_sizes.hist
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $*_block_sizes.hist $*_lgap_sizes.hist $*_rgap_sizes.hist |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --logscale=xy --hardcopy=$@

###########################################################
## Analysis of splice sites
###########################################################
splice_sites.pairs: orthologs.transcripts
	grep -e "intron	unaligned" orthologs.transcripts |\
	python $(DIR_SCRIPTS_GENEPREDICTION)introns2rates.py \
	--is-compressed \
	--skip-distance \
	--skip-alignment \
	--echo-unaligned > $@

###########################################################
## Distance plots
%_dist.hist: %.rates
	grep -v "#" $*.rates | cut -f $(INTRONS_COLUMN_RATE) |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=20.0 > $@

%_rate_by_position.hist: %.rates
	for ((x = 1; x <= 6; ++x)); do \
		echo -e "# bin\trate" > $@_$$x.hist; \
		grep -v "#" $*.rates | cut -f 4,$(INTRONS_COLUMN_RATE) | grep "^$$x[^0-9]" | cut -f 2 |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=20.0 | \
		grep -v "#" >> $@_$$x.hist; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--headers=`echo $@_*.hist | perl -pe "s/$@_//g; s/.hist//g; s/ +/,/g" ` \
	$@_*.hist > $@
	rm -f $@_*.hist

###########################################################
## percent identity plots
%_pide.hist: %.rates
	grep -v "#" $*.rates | cut -f $(INTRONS_COLUMN_RATE_IDENTITY) |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 > $@

###########################################################
## plot transition and transversions versus distance
%_tt_vs_distance.data: %.rates
	echo -e "distance\ttransitions\ttransversions" > $@
	cat $*.rates |\
	awk '!/^#/ {printf("%f\t%f\t%f\n", \
	$$$(INTRONS_COLUMN_RATE), $$$(INTRONS_COLUMN_RATE_TRANSITIONS), $$$(INTRONS_COLUMN_RATE_TRANSVERSIONS));}' >> $@

%_t_vs_t.data: %.rates
	echo -e "transitions\ttransversions" > $@
	cat $*.rates |\
	awk '!/^#/ {printf("%f\t%f\n", $$$(INTRONS_COLUMN_RATE_TRANSITIONS), $$$(INTRONS_COLUMN_RATE_TRANSVERSIONS));}' >> $@

###########################################################
%_diff_per_gene.hist: %.rates
	echo -e "difference in rates\tcounts" > $@
	grep -v "#" $*.rates |\
	awk 'BEGIN { last=0;} \
		{ if ($$$(INTRONS_COLUMN_TOKEN1) != a || $$$(INTRONS_COLUMN_TOKEN2) != b) \
			{ last = 0; a = $$$(INTRONS_COLUMN_TOKEN1); b = $$$(INTRONS_COLUMN_TOKEN2);} \
		  if (last != 0) printf("%f\n", $$$(INTRONS_COLUMN_RATE) - last); \
		  last=$$$(INTRONS_COLUMN_RATE) } ' |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 >> $@

## plot of difference in rates of 3' introns to first intron
%_diff_first_per_gene.hist: %.rates
	echo -e "difference in rates\tcounts" > $@
	grep -v "#" $*.rates |\
	awk 'BEGIN { first=0;} \
		{ if ($$$(INTRONS_COLUMN_TOKEN1) != a || $$$(INTRONS_COLUMN_TOKEN2) != b) { \
			if ($$4 == 1 && $$8 == 1) { first = $$$(INTRONS_COLUMN_RATE); \
				a = $$$(INTRONS_COLUMN_TOKEN1); b = $$$(INTRONS_COLUMN_TOKEN2);} else { first = 0;} }\
		  if (first != 0 && $$4 > 1 && $$8 > 1) printf("%f\n", $$$(INTRONS_COLUMN_RATE) - first); \
		  } ' |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=100.0 >> $@


###########################################################
## load rates into table
%.load: %.rates 
	$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_RATES);"
	grep -v "#" $*.rates |\
	cut -f 3-16 |\
	awk '{if ($$1 != a || $$5 != b) { i += 1; a = $$1; b = $$5;} printf("%s\t%s\n", i, $$0); }' |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_RATES) FROM STDIN WITH NULL AS 'na'" >> $@ 
	echo "loaded into $(PARAM_TABLE_NAME_RATES): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_RATES);' -t `"  >> $(LOG)

#########################################################################
create_tables: $(PARAM_TABLE_NAME_RATES).create_table_rates 

create_schema: 
	-$(CONNECTION) "CREATE SCHEMA $(PARAM_PSQL_SCHEMA)";

#########################################################################
%.create_table_rates:
	-$(CONNECTION) "DROP TABLE $* CASCADE ";
	$(CONNECTION) "CREATE TABLE $* ( \
	mid INTEGER, \
	token1 TEXT, \
	exon_id1 INTEGER, \
	nexons1 INTEGER, \
	length1 INTEGER, \
	token2 TEXT, \
	exon_id2 INTEGER, \
	nexons2 INTEGER, \
	length2 INTEGER, \
	coverage FLOAT, \
	distance FLOAT, \
	nidentical INTEGER, \
	ntransitions INTEGER, \
	ntransversions INTEGER, \
	naligned INTEGER )"
	$(CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_token1 ON $* (token1);" && \
	$(CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_token2 ON $* (token2);" 

###########################################################
## Preparation steps
create_dirs:
	/usr/bin/install -d $(DIR_TMP_SHARED_LOCAL)
	-mkdir exons; ln -s ../Makefile exons/
	-mkdir assignments; ln -s ../Makefile assignments/
	-mkdir $(QUERY1)_genes; ln -s ../Makefile $(QUERY1)_genes;
	-mkdir $(QUERY2)_genes; ln -s ../Makefile $(QUERY2)_genes;


################################################
## Step2: get aligned fragments for orthologs transcripts
STEP2_QUERIES=$(wildcard *.transcripts)
STEP2_TARGETS=$(STEP2_QUERIES:%.transcripts=%.pairs)

step2: step2.prepare step2.run step2.finish 
	touch $@

step2.run: step2.prepare
	$(CMD_LOG) "started $@"
	if test -e step2.dir; then \
		$(MAKE) -C step2.dir -k -j $(PARAM_STEP2_NUMJOBS) step2-hook; \
	fi
	touch $@
	$(CMD_LOG) "finished $@"

step2-hook: $(STEP2_TARGETS)

.PHONY: step2-hook

################################################
## create subdirectory and split input file
## copy files to shared directory
step2.prepare: orthologous_transcripts.pairs
	$(CMD_LOG) "started $@"
	$(MAKE) step2.dir 
	split -a 5 -l $(PARAM_STEP2_CHUNKSIZE) orthologous_transcripts.pairs step2.dir/step2_
	for file in step2.dir/step2_*; do mv $$file $$file.transcripts; done
	$(PARAM_CMD_COPY)$(QUERY1)_peptides.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_peptides.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY1)_exon_boundaries $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_exon_boundaries $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY1)_cdnas.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)$(QUERY2)_cdnas.fasta $(DIR_TMP_SHARED_LOCAL)
	touch $@
	$(CMD_LOG) "finished $@"

################################################
## collect results from subdirectory
step2.finish: step2.run orthologous_segments.pairs
	$(CMD_LOG) "finished $@"
	touch $@

orthologous_segments.pairs: step2.run
	$(CMD_LOG) "started $@"
	find step2.dir/ -name "step2_*.pairs" -exec cat {} \; > $@
	$(CMD_LOG) "finished $@"

###########################################################
## calculate and align orthologous segments
step2_%.pairs: step2_%.transcripts
	$(CMD_REMOTE_SUBMIT) python $(DIR_SCRIPTS_GENEPREDICTION)optic/orthologs2transcripts.py \
	--mode=transcripts \
	--peptides1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_peptides.fasta \
	--peptides2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_peptides.fasta \
	--transcripts1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_cdnas.fasta \
	--transcripts2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_cdnas.fasta \
	--cds1=$(DIR_TMP_SHARED_REMOTE)$(QUERY1)_exon_boundaries \
	--cds2=$(DIR_TMP_SHARED_REMOTE)$(QUERY2)_exon_boundaries \
	$(PARAM_STEP2_OPTIONS) \
	< step2_$*.transcripts > $@

################################################
## Step3: calculate intron rates
STEP3_QUERIES=$(wildcard step3_*.pairs)
STEP3_TARGETS=$(STEP3_QUERIES:%.pairs=%.rates)

step3: step3.prepare step3.run step3.finish 
	touch $@

step3.run: step3.prepare
	$(PRELOG)
	@if test -e step3.dir; then \
		$(MAKE) -C step3.dir -k -j $(PARAM_STEP3_NUMJOBS) step3-hook; \
	fi
	@touch $@
	$(EPILOG) 

step3-hook: $(STEP3_TARGETS)

step3.finish: step3.run orthologous_segments.rates
	@touch $@
	$(EPILOG)

.PHONY: step3-hook

################################################
## create subdirectory and split input file
## copy files to shared directory
step3.prepare: orthologous_segments.pairs
	$(PRELOG)
	$(MAKE) step3.dir 
	grep -e "intron	unaligned" orthologous_segments.pairs |\
	awk '{ if ( ($$$(INTRONS_COLUMN_LEN_QUERY1)  >= $(PARAM_ANALYSIS_MIN_INTRON_LENGTH) && \
			$$$(INTRONS_COLUMN_LEN_QUERY1)  <= $(PARAM_ANALYSIS_MAX_INTRON_LENGTH)) && \
		    ($$$(INTRONS_COLUMN_LEN_QUERY2) >= $(PARAM_ANALYSIS_MIN_INTRON_LENGTH) && \
			$$$(INTRONS_COLUMN_LEN_QUERY2) <= $(PARAM_ANALYSIS_MAX_INTRON_LENGTH)) && \
		    ($$$(INTRONS_COLUMN_LEN_QUERY1)-$$$(INTRONS_COLUMN_LEN_QUERY2) < $(PARAM_ANALYSIS_MAX_INTRON_LENGTH_DIFFERENCE) && \
		        $$$(INTRONS_COLUMN_LEN_QUERY2)-$$$(INTRONS_COLUMN_LEN_QUERY1) < $(PARAM_ANALYSIS_MAX_INTRON_LENGTH_DIFFERENCE)) ) \
			{ print; } \
	     }' |\
	split -a 5 -l $(PARAM_STEP3_CHUNKSIZE) - step3.dir/step3_
	for file in step3.dir/step3_*; do mv $$file $${file}.pairs; done
	@touch $@
	$(EPILOG)

################################################
## collect results from subdirectory


################################################
step3_%.rates: step3_%.pairs
	$(CMD_REMOTE_SUBMIT) python $(DIR_SCRIPTS_GENEPREDICTION)introns2rates.py \
	--method=$(PARAM_STEP3_ALIGNMENT_METHODS) \
	$(PARAM_STEP3_ALIGNMENT_OPTIONS) \
	< step3_$*.pairs > $@

introns_%.filtered_rates: %.rates
	$(PRELOG)
	awk '{ if ( ($$$(INTRONS_COLUMN_LEN_QUERY1)  >= $(PARAM_ANALYSIS_MIN_INTRON_LENGTH) && $$$(INTRONS_COLUMN_LEN_QUERY1)  <= $(PARAM_ANALYSIS_MAX_INTRON_LENGTH)) && \
		    ($$$(INTRONS_COLUMN_LEN_QUERY2) >= $(PARAM_ANALYSIS_MIN_INTRON_LENGTH) && $$$(INTRONS_COLUMN_LEN_QUERY2) <= $(PARAM_ANALYSIS_MAX_INTRON_LENGTH)) && \
		    ($$11 >= $(PARAM_ANALYSIS_MIN_ALIGNED) && $$13 != 999.0) ) { \
		print; } }' \
	< $*.rates > $*_filtered.rates
	$(EPILOG)

################################################
## include tools Makefile
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
