################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_coverage 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Get statistics of coverage, percent identity, etc for 
## orthologs to the query genome.

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

PARAM_DIR_UPLOAD?=/home/andreas/uploads/

################################################
## Cluster parameters
## queue to submit to
## command to use to copy between shared and remote directory
PARAM_QUEUE?=bc1.q,bc2.q,highmem.q

PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

PARAM_PRIORITY?=-5

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks
## table with raw multiple alignment information (nucleotide level)
PARAM_TABLE_NAME_MALIS_RAW?=$(PARAM_PSQL_SCHEMA).malis_raw
## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_AA?=$(PARAM_PSQL_SCHEMA).malis_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_NA?=$(PARAM_PSQL_SCHEMA).malis_na
## table with multiple alignment information: which prediction in which mali
PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER?=$(PARAM_PSQL_SCHEMA).map_prediction2cluster
## table with cluster attributes
PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES?=$(PARAM_PSQL_SCHEMA).cluster_attributes
## table with distances: transcripts
PARAM_TABLE_NAME_DISTANCES?=$(PARAM_PSQL_SCHEMA).distances
## table with distances: genes
PARAM_TABLE_NAME_DISTANCES_GENES?=$(PARAM_PSQL_SCHEMA).distances_genes

## table with pairwise ka/ks assignments
PARAM_TABLE_NAME_KAKS?=$(PARAM_PSQL_SCHEMA).kaks

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=

## pattern to identify master genome
PARAM_PATTERN_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome
PARAM_PATTERN_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=

## separator to extract schema, prediction_id, gene_id and quality
## from identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(PARAM_SORTED_SCHEMAS)

PARAM_DIR_SRC=../../orthology_pairwise/

################################################
## Export parameters for the genome browser gbrowse
## user name
PARAM_EXPORT_GBROWSER_USERNAME?=andreas
## password
PARAM_EXPORT_GBROWSER_PASSWORD?=HeinBloed
## prefix of tables, suffix is schema of species
PARAM_EXPORT_GBROWSER_PREFIX?=gbrowser_devel_
## separator
PARAM_EXPORT_GBROWSER_SEPARATOR?=_

################################################
## number of samples for GO zscore calculation.
PARAM_ANALYSIS_GO_SAMPLES?=1000
PARAM_ANALYSIS_GO_SLIMS?=/net/cpp-data/backup/andreas/projects/flies/data_1v3/goslim_generic.obo
PARAM_ANALYSIS_GO_THRESHOLD=0.05
PARAM_ANALYSIS_GO_CATEGORIES=biol_process cell_location mol_function

## database on where to get GO assignments from.
PARAM_ANALYSIS_GO_ENSEMBL=ensembl_mart_37

################################################
# Section parameters: end
################################################

GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`
NAMES_COMMA=`echo $(PARAM_SRC_NAMES) | perl -p -e "s/ +/,/g"`

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

################################################################################################
%.csv: % translation
	rm -f $@
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=translation --multiple --columns=all \
	< $* |\
	grep -v "#" |\
	perl -p -e "s/\t/,/g" > $@

################################################################################################
translation:
	$(PRELOG)
	@rm -f @
	@genomes=( $(PARAM_SORTED_SCHEMAS) ); \
	names=( $(PARAM_SRC_NAMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		printf "%s\t%s\n" $${genomes[$$x]} $${names[$$x]} >> $@; \
	done
	$(EPILOG)

################################################################################################
## How to make a picture out of a matrix
%.png: %.matrix
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	$(PNG_OPTIONS) \
	--headers --labels="Genomes","Genomes" \
	--hardcopy=$@ \
	< $*.matrix > /dev/null

################################################################################################
## one pdf file with all postscript files
################################################################################################
all.pdf: 
	gs -dEPSCrop -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=$@ -dBATCH */*.eps

################################################################################################
## Command to substitute schema names with export names
CMD_SUBSTITUTE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all

################################################
## write colour schema
colours:
	$(PRELOG)
	@rm -f $@
	@printf "%s\t%s\n" class colour >> $@
	@printf "%s\t%s\t%s\n" CG orange1 >> $@
	@printf "%s\t%s\n" PG orange4 >> $@
	@printf "%s\t%s\n" SG green2 >> $@
	@printf "%s\t%s\n" RG green4 >> $@
	@printf "%s\t%s\n" CP aquamarine1 >> $@
	@printf "%s\t%s\n" PP aquamarine4 >> $@
	@printf "%s\t%s\n" SP blue1 >> $@
	@printf "%s\t%s\n" RP blue4 >> $@
	@printf "%s\t%s\n" CF grey20 >> $@
	@printf "%s\t%s\n" PF grey40 >> $@
	@printf "%s\t%s\n" SF grey30 >> $@
	@printf "%s\t%s\n" UG grey70 >> $@
	@printf "%s\t%s\n" UP grey80 >> $@
	@printf "%s\t%s\n" UF grey90 >> $@
	@printf "%s\t%s\n" BF grey95 >> $@
	@printf "%s\t%s\n" UK white >> $@
	$(EPILOG)

################################################
## translation between schemas to publishing names
## (using directory names for this)
translation:
	$(PRELOG)
	@rm -f @
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	dirs=( $(PARAM_SRC_NAMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		printf "%s\t%s\n" $${genomes[$$x]} $${dirs[$$x]} >> $@; \
	done
	$(EPILOG)

#################################################################
## number of predictions/nr_predictions per query in each schema.
found.summary:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.queries WHERE npredictions > 0" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'nr',  COUNT(*) FROM $${x}.queries WHERE nr_npredictions > 0 " $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" $@_*.tmp > $@
	@rm -f $@_*.tmp
	$(EPILOG)

################################################
## summary for all genes
classes_genes.summary:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_genes.py \
	--genomes="$(SCHEMAS_COMMA)" \
	$(CMD_FILTER) > $@
	$(EPILOG)

good_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_GOODGENES_COMMA)
export_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_EXPORTGENES_COMMA)
fragments_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_FRAGMENTS_COMMA)
pseudo_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_PSEUDOGENES_COMMA)

%_genes.summary: classes_genes.summary
	$(PRELOG)
	@awk -v ngenomes=$(PARAM_NUM_GENOMES) -v c="class,$(QUALITY_GENES_COMMA)" \
		'BEGIN { split(c,a,","); for (x in a) { cc[a[x]] = 1; } } \
		!/^#/ && ($$1 in cc) \
		{ print; split($$0, a); \
		  for (x = 2; x <= ngenomes+2; ++x ) \
			{ totals[x]+=a[x]; } } \
		END { \
		  printf("all"); \
		  for (x = 2; x <= ngenomes+2; ++x ) \
		  { printf("\t%i", totals[x]); } printf("\n") }' \
	< $< > $@
	$(EPILOG)

################################################
## Exons
missed_exons.summary:
	$(PRELOG)
	@printf "# Exons statistics for CG, PG and SG predictions. Numbers are normalized by prediction." > $@
	@printf "species\tcorrect\t\tdubious\tinserted_introns\t\tdeleted_introns\t\tdeleted_cexons\t\tdeleted_nexons\t\tdeleted_exons\t\n" >> $@
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(CONNECTION) "SELECT  '$${x}',\
			COUNT(*), \
			SUM(CASE WHEN e.dubious_exons = 0 AND e.inserted_introns = 0 AND \
					e.deleted_introns = 0 AND e.deleted_exons = 0 AND \
					e.deleted_cexons = 0 AND e.deleted_nexons = 0 \
				THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.dubious_exons = 0 AND e.inserted_introns = 0 AND \
					e.deleted_introns = 0 AND e.deleted_exons = 0 AND \
					e.deleted_cexons = 0 AND e.deleted_nexons = 0 \
				THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.dubious_exons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.dubious_exons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.inserted_introns > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.inserted_introns > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_introns > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_introns > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_cexons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_cexons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_nexons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_nexons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_exons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_exons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*) \
			FROM $${x}.exons_summary AS e, \
			$${x}.quality AS q \
			WHERE e.prediction_id = q.prediction_id AND \
			q.class IN ('CG', 'PG', 'SG')" \
			$(CONNECTION_OPTIONS) >> $@; \
	done
	$(EPILOG)

dubious_exons.distn:
	@for x in dsim_vs_dmel3; do \
		echo $${x}; \
		$(CONNECTION) "SELECT p.prediction_id, e.exon_id, p.nintrons + 1, e.pidentity, p.pidentity, q.class \
			FROM 	$${x}.exons AS e, \
				$${x}.predictions AS p, \
				$${x}.quality AS q \
			WHERE e.prediction_id = p.prediction_id AND \
			e.exon_id > 0 AND \
			e.prediction_id = q.prediction_id AND \
			q.class IN ('CG','PG') AND \
			is_ok = 'F'" \
			$(CONNECTION_OPTIONS) > tmp_$${x}; \
	done

################################################
## Summary on queries
## number of queries that have no predictions in the database.
missed_queries.summary:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=missed \
	--genomes="$(SCHEMAS_COMMA)" \
	--tablename-orthologs=$(PARAM_TABLE_NAME_ORTHOLOGLINKS) \
	$(CMD_FILTER) > $@
	$(EPILOG)

queries.summary:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

queries.report:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	--summary=min,max,count,mean \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

## get number of predictions/nr_predictions per query in each of 
## the schemas.
queries_counts.data:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	--summary=count \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

queries_counts.png: queries_counts.data
	$(PRELOG)
	@cut -f 3-`echo "3 + $(QUALITY_NUM_CLASSES)" | bc` queries_counts.data | grep "^[0-9]" |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
	--column=all |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--legend=counts,$(QUALITY_CLASSES_COMMA) --hardcopy=$@ 
	$(EPILOG)

##########################################################################################
## Select properties for best predictions in each genome
CMD_SUBSELECT_BEST_PREDICTION=	(SELECT b.prediction_id \
				FROM $${x}.predictions AS b \
				WHERE p.query_token = b.query_token \
				ORDER BY b.score DESC LIMIT 1 )

## histogram of best coverage per query
queries_coverage.hist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "bin\t%s\n" $${x} > $@_$${x}.tmp; \
		$(CONNECTION) "SELECT p.query_coverage \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--cumulative	|\
		grep -v "#" >> $@_$${x}.tmp; \
	done;
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--missing=0 --titles $@_*.tmp > $@
	@rm -f $@_*.tmp
	$(EPILOG)

PLOT_OPTIONS_QUERIES=\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py "bin" $(PARAM_SRC_SCHEMAS) |\
	$(CMD_TRANSLATE) |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--ytitle="Frequency" \
	--legend-location="upper left" \
	--xrange=0,105 \
	--hardcopy=images.dir/$@ 

queries_coverage.png: queries_coverage.hist
	grep -v "#" < queries_coverage.hist |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Coverage"

queries_coverage_normalized.png: queries_coverage.hist
	grep -v "#" < queries_coverage.hist |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Coverage" \
		--normalize

##########################################################################
## Percent identity plots
queries_percent_identity.hist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "bin\t%s\n" $${x} > $@_$${x}.tmp; \
		$(CONNECTION) "SELECT p.pidentity \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION) " \
		$(CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py --cumulative |\
		grep -v "#" >> $@_$${x}.tmp; \
	done;
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--missing=0 --titles $@_*.tmp > $@
	@rm -f $@_*.tmp
	$(EPILOG)

queries_percent_identity_frequency.hist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "bin\t%s\n" $${x} > $@_$${x}.tmp; \
		$(CONNECTION) "SELECT p.pidentity \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION) " \
		$(CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--min-value=0.0 --bin-size=1.0 --normalize |\
		grep -v "#" >> $@_$${x}.tmp; \
	done;
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--missing=0 --titles $@_*.tmp > $@
	@rm -f $@_*.tmp
	$(EPILOG)

queries_percent_identity.png: queries_percent_identity.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Percent identity"

queries_percent_identity_normalized.png: queries_percent_identity.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Percent identity"

queries_percent_identity_frequency.png: queries_percent_identity_frequency.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--xtitle="Percent identity" 

queries_correlation.2dhist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(CONNECTION) "SELECT CAST(p.query_coverage AS INTEGER), \
				      CAST(p.pidentity AS INTEGER) \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)calculate_histogram_2D.py |\
		sort -k1,1n -k2,2n |\
		grep -v "#" |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--asymmetric --format=int \
		--row-names="range(0,101)" --col-names="range(0,101)" \
		> $@_$${x}.tmp; \
	done;

######################################################################
## build wiki page of results
summary.wiki: $(INDIVIDUAL_TARGETS)
	$(PRELOG)
	@rm -f $@
	python $(DIR_SCRIPTS_TOOLS)preppy.py \
	$(DIR_SCRIPTS_GENEPREDICTION)gpipe_stats.prep \
	> $@
	@mv -f summary.wiki $(PARAM_DIR_UPLOAD)
	@rm -f $(PARAM_DIR_UPLOAD)$@.zip
	@cd images.dir; zip $(PARAM_DIR_UPLOAD)$@.zip *.png 2>/dev/null 
	$(EPILOG)

%.csv: %
	grep -v "#" $* |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
		--apply=translation --multiple --columns=all |\
	perl -p -e "s/\t/,/g" > ~/out.csv

summary.csv: $(INDIVIDUAL_TARGETS) 
	rm -f $@
	for file in $?; do \
		echo "# $${file}" >> $@; \
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
		--apply=translation --multiple --columns=all \
		< $${file} |\
		grep -v "#" |\
		perl -p -e "s/\t/,/g" >> $@; \
	done

################################################## 
## various plots
images: images.dir $(IMAGE_TARGETS)

%.png: %.summary colours translation
	@grep -v "all" $*.summary |\
	awk '!/^#/ {printf("%s\t%s\n", $$0, $$1);}' |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=colours \
	--column=$$(($(PARAM_NUM_GENOMES)+3)) |\
	$(CMD_TRANSLATE) > $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
	--plot=bar \
	--file=$@_tmp \
	--columns=all \
	--legend=1 \
	--labels="genome,genes" \
	--options="cex.names=1.5" \
	--colours=$$(($(PARAM_NUM_GENOMES)+3)) \
	--hardcopy=images.dir/$@
	@rm -f $@_tmp

################################################
## Summary on domains
domains.report:
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--report=domains \
	--fields=ndomains,npredictions,nr_ndomains,nr_npredictions \
	$(PARAM_SRC_SCHEMAS) > $@

domains.report_summary:
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--report=domains \
	--fields=ndomains,npredictions,nr_ndomains,nr_npredictions \
	--summary=min,max,count,mean \
	$(PARAM_SRC_SCHEMAS) > $@

domains.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "category\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'predictions', COUNT(DISTINCT prediction_id) FROM $${x}.domains;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'domains', COUNT(*) FROM $${x}.domains;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'families', COUNT(DISTINCT domain_id) FROM $${x}.domains;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'nr_predictions', COUNT(DISTINCT d.prediction_id) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'nr_domains', COUNT(*) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'nr_families', COUNT(DISTINCT domain_id) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" --titles $@_*.tmp > $@
	rm -f $@_*.tmp

clean:
	rm -f *.summary
	rm -f domains.*
	rm -f queries.*
	rm -rf images.dir
	rm -f summary.wiki

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

################################################
################################################
################################################

################################################
## Summary on classes
classes_predictions.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality;" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_classes_predictions.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' GROUP BY class ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm'" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_classes_genes.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(DISTINCT gene_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' GROUP BY class ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(DISTINCT gene_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm'" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## summary for pseudogenes
good_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ); " \
			$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_good_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ); " \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## summary for pseudogenes
pseudogenes.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ); " \
			$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_pseudo_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ); " \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp


################################################
## summary for fragments
fragments.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ); " \
			$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_fragments.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ); " \
		$(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## Summary on CG
class_%.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "query\t$${x}" > $@_$${x}.tmp; \
		$(CONNECTION) "SELECT query_token, COUNT(*) FROM $${x}.overview WHERE class='$*' GROUP BY query_token" $(CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --titles --sort="$(SCHEMAS_COMMA)" $@_*.tmp > $@
	rm -f $@_*.tmp

#########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
