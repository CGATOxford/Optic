#########################################################
#########################################################
#########################################################
## addititional Makefile for Makefile.compare_transcripts
##
## distance analyses
#########################################################

## resolution to use for intergenic comparisons
PARAM_ANNODIST_RESOLUTION_INTERGENIC?=100

## resolution to use for intronic comparisons
PARAM_ANNODIST_RESOLUTION_INTRONIC?=10

PARAM_ANNODIST_ITERATIONS?=10000

PARAM_ANNODIST_BINS?=1000

%.annodistances:
	$(PRELOG)
	@-make $@.dir
	@set=`echo $* | pe "s/[:].*//"` ;\
	subset=`echo $* | pe "s/[^:]*://; s/:.*//"`; \
	subtable=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	counter=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	workspace=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/[^:]*://; s/[^:]*://; s/[.].*//"`; \
	if [[ "$${subset}" == "all" || "$${subset}" == "$${set}" ]]; then where="1"; else where="is_$${subset}"; fi; \
	if [[ "$${subtable}" == "all" ]]; then \
		s3 $(PARAM_DATABASE) "SELECT g.* FROM $${set}_annotation AS a, $${set}_gtf AS g WHERE g.gene_id = a.gene_id AND $${where}" |\
		python $(DIR_SCRIPTS_GENEPREDICTION)gtf2tsv.py --invert > $@.tmp; \
	else \
		s3 $(PARAM_DATABASE) "SELECT g.* FROM $${set}_annotation AS a, $${subtable} as b, $${set}_gtf AS g WHERE g.gene_id = a.gene_id AND a.gene_id = b.gene_id AND $${where}" |\
		python $(DIR_SCRIPTS_GENEPREDICTION)gtf2tsv.py --invert > $@.tmp; \
	fi; \
	if [[ "$${workspace}" == "intergenic" ]]; then options="--workspace-builder=gtf-intergenic --resolution=$(PARAM_ANNODIST_RESOLUTION_INTERGENIC)"; \
		else options="--workspace-builder=gtf-intronic --resolution=$(PARAM_ANNODIST_RESOLUTION_INTRONIC)"; fi; \
	$(CMD_LOG2) set=$${set} subset=$${subset} subtable=$${subtable} counter=$${counter} workspace=$${workspace} size=`wc -l < $@.tmp`; \
	$(CMD_REMOTE_SUBMIT) -l mem_free=4000M \
	python $(DIR_SCRIPTS_GENEPREDICTION)annotator_distance.py \
		--workspace=$(PARAM_MASTER_SET_GENES).gtf \
		--segments=$@.tmp \
		--counter=$${counter} \
		--workspace-label=direction \
		--sampler=permutation \
		--transform-counts=cumulative \
		--logscale=x \
		--analysis=proximity \
		--num-samples=$(PARAM_ANNODIST_ITERATIONS) \
		--num-bins=$(PARAM_ANNODIST_BINS) \
		--hardcopy=$@.dir/%s.png \
		--output-filename-pattern=$@.dir/%s.table \
		$${options} \
		--plot < /dev/null > $@
	$(EPILOG)


AD_SUBSET=all
AD_SUBTABLE=all
AD_COUNTER=transcription
AD_WORKSPACE=intergenic
annotator-distance-run:
	for x in $(DATA_SAMPLES); do \
		( $(MAKE) $${x}:$(AD_SUBSET):$(AD_SUBTABLE):$(AD_COUNTER):$(AD_WORKSPACE).annodistances & ); \
	done

########################################################
########################################################
########################################################
## import annotator results
########################################################
annotator-distance.import: 
	$(PRELOG)
	@for file in *.annodistances; do \
		if [ -e $${file}.dir/proximity.table ]; then \
			tawk -v fn=$${file} '/^label/ { printf("track\tslice\tsubset\tcounter\tworkspace\t"); print; next; } \
	      		{ gsub( ".annodistances", "", fn); split(fn,a,"[:]"); printf("%s\t%s\t%s\t%s\t%s\t", a[1],a[2],a[3],a[4],a[5]); print; } ' \
			< $${file}.dir/proximity.table; \
		else \
			$(CMD_LOG2) "missing file:$${file}.dir/proximity.table" ;\
		fi; \
	done |\
	awk '/^track/ { if (!notfirst) {print; notfirst=1}; next; } {print;}' |\
	csv2db.py -b sqlite --table=annotatordistance -i track > $@	
	$(EPILOG)
