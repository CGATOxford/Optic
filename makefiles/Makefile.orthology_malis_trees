################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_malis_trees 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

################################################
## Section parameters: start
################################################
## Parameters for building multiple alignments,
## calculating kaks and building trees.

PARAM_TREES_DIALIGN_OPTIONS?=-nt -o
PARAM_TREES_CLUSTAL_OPTIONS?=

## maximum number of sequences to multiply align with dialign
PARAM_TREES_MALI_SIZE?=50

## maximum number of sequences to multiply align with muscle
PARAM_TREES_MALI_SIZE2?=500

## tree building program to use
PARAM_TREES_TREE_PROGRAM?=tree_fitch

## weighting factor 
PARAM_TREES_WEIGHTING?=3

## maximum size of cluster to use kitsch for tree building
PARAM_TREES_TREE_SIZE?=50

## Which tree to build:
## 3: ka 
## 4: ks [default]
PARAM_COLUMN_KAKS?=4

## Options for Gblocks
## Here: allow up to half the sequence to have gaps
PARAM_TREES_GBLOCKS_OPTIONS?=-b5=h

## Accept Gblocks alignments, if at least 50% of positions are kept,
## otherwise keep the original
PARAM_TREES_GBLOCKS_MIN_KEPT?=50

## maximum distance in tree. Distances larger than 
## this value are set to this value.
PARAM_TREES_MAX_DISTANCE?=5

## distance from tip to node that will include a subtree
## into the refinement stage
PARAM_TREES_REFINEMENT_THRESHOLD?=0.1

## pattern to identify master sequence
PARAM_TREES_MASTER_SPECIES?=dmel_vs_dmel4

PARAM_TREES_ALIGNMENT_BY_PEPTIDES?=

################################################
## Section parameters: end
################################################
ifdef PARAM_TREES_ALIGNMENT_BY_PEPTIDES
%.aa_mali: %_peptides.fasta 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)align_transcripts.py \
		--exons=$*.exons \
		--cds=$*_cds.fasta \
		--log=$@.log \
		--force-map \
		--verbose=2 \
		--output-filename-pattern=$*_%s.fasta \
		--output=final_aa \
		--output=final_na \
		--output=aligned_aa \
		--output=aligned_na \
		--output-format="plain-fasta" \
	< $< > $@
	$(EPILOG)
else
#######################################################################
#######################################################################
#######################################################################
## building multiple alignment from cdna sequences
#######################################################################
%.raw_mali: %_cds.fasta
	$(PRELOG)
	$(CMD_MSG) "building multiple alignment of cluster $* started."
	@numseq=`grep -c ">" $*.fasta`; \
	if [[ $${numseq} -le $(PARAM_TREES_MALI_SIZE) ]]; then \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: started"; \
		dialign $(PARAM_TREES_DIALIGN_OPTIONS) -fn $* -fa -stdo $< < /dev/null; \
		rm -f $*; \
		if [ $$? != 0 ]; then exit 1; fi; \
		python $(DIR_SCRIPTS_GENEPREDICTION)correlate_fasta_identifier.py $< < $*.fa |\
		perl -p -e "s/^\s+$$//" > $@; \
		rm -f $*.fa; \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: finished"; \
	else \
	if [[ $${numseq} -le $(PARAM_TREES_MALI_SIZE2) ]]; then \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: started"; \
		muscle -stable -loga $*.log -in $< -out $@ -quiet; \
		if [ $$? != 0 ]; then exit 1; fi; \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: finished"; \
	else \
		$(CMD_MSG2) "alignment on $*.fasta with $${numseq} sequences: declined."; \
		touch $*.mali $*.bs $*.qc; \
	fi; \
	fi
	$(CMD_MSG) "building multiple alignment of cluster $* finished."
	$(EPILOG)

#######################################################################
#######################################################################
#######################################################################
## pruning multiple alignment to make sure that there are codons
#######################################################################
%.na_mali: %.raw_mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/prune_multiple_alignment.py \
	--translate=$*.aa_mali \
	--master-species="$(PARAM_TREES_MASTER_SPECIES)" \
	--exons=$*.exons \
	--remove-stops \
	--remove-frameshifts \
	--split-exons \
	< $*.raw_mali > $@
	$(EPILOG)

endif

.PRECIOUS: %.na_mali %.aa_mali %.raw_mali

#######################################################################
#######################################################################
#######################################################################
#######################################################################
## Pruning the multiple alignment for block structure
#######################################################################
## Note: Gblocks always ends on error code 1, thus ignore it.
%.bl_mali: %.na_mali
	$(PRELOG)
	@rm -f $@.log
	@grep -v "#" $< |\
	perl -p -e "s/ //g" > $@_tmp
	@-Gblocks $@_tmp -t=c $(PARAM_TREES_GBLOCKS_OPTIONS) > $@.log
	@nkept=`grep "Gblocks alignment" $@.log | tail -n 1 | perl -p -e "s/.*positions \(//; s/ %\).*//;"`; \
	if [[ $${nkept} -lt "$(PARAM_TREES_GBLOCKS_MIN_KEPT)" ]]; then \
		printf "using original alignment\n" >> $@.log; \
		$(CMD_LOG2) "using original alignment"; \
		mv $@_tmp $@; \
	else \
		mv $@_tmp-gb $@; \
	fi; \
	rm -f $@_tmp*
	$(EPILOG)

#######################################################################
#######################################################################
#######################################################################
## calculating kaks
#######################################################################
%.kaks: %.na_mali
	$(PRELOG)
	@seq_pairs_kaks \
		--cdna_sequences $*.na_mali \
		--err_log $@.err \
		--allvsall \
		--aligned \
		--temp_directory /tmp/$@_$$$$ > $@
	$(EPILOG)

#######################################################################
#######################################################################
#######################################################################
## calculating kaks for 
#######################################################################
%.bl_kaks: %.bl_mali
	$(PRELOG)
	@seq_pairs_kaks \
		--cdna_sequences $*.bl_mali \
		--err_log $@.err \
		--allvsall \
		--aligned \
		--temp_directory /tmp/$@_$$$$ > $@
	$(EPILOG)

#######################################################################
#######################################################################
#######################################################################
## Split mali according to kaks values
#######################################################################
%.subsets: %.bl_kaks
	$(CMD_MSG) "splitting mali of cluster $* started." >> $*.log
	@cut -f 1,2,4 $*.bl_kaks |\
	python $(DIR_SCRIPTS_TOOLS)graph_cluster_by_species.py \
		--genome-master=$(PARAM_PATTERN_GENOME_MASTER) \
		--outfile-summary=$@.summary \
		--outfile-synonyms=$@.synonyms > $@
	$(CMD_MSG) "splitting mali of cluster $* finished." >> $*.log

################################################
## building tree from ks values
%_ks.tree: %.bl_kaks
	$(PRELOG)
	@numseq=`grep -c ">" $*.na_mali`; \
	if [[ $${numseq} -le $(PARAM_TREES_TREE_SIZE) ]] ; then \
		echo ">cluster# $* size= 0" > $@; \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $< |\
		grep -i -v "error" |\
		cut -f 1,2,4 |\
		$(PARAM_TREES_TREE_PROGRAM) \
			--input_format p \
			--iterations 30 \
			--weighting $(PARAM_TREES_WEIGHTING) \
			--header \
			--err_log $@.errors |\
		grep -v ">" |\
		python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
			--verbose=0 \
			--method=phylip \
			--parameters=retree,"Y@M@W@R@Q" \
		>> $@;\
	else \
		$(CMD_LOG2) "main tree calculation for $* started"; \
		$(MAKE) $@.dir; \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $< |\
		grep -i -v "error" |\
		cut -f 1,2,4 |\
		tree_upgma \
			--matrix_output \
			--input_format p \
			--output_format p \
			--header \
			--err_log $@.dir/upgma.errors |\
		tree_extract_sub_trees_with_matrix \
			--unchanged_tree_file   $@.dir/$*.nh.unchanged \
			--err_log               $@.dir/subtrees.errors \
			--tree_files_path       $@.dir/$*.orig_sub_tree \
			--sub_matrix_files_path $@.dir/$*.sub_matrix \
			--description "$*.subtrees" \
			--input_format p \
			--output_format p \
		> $@.dir/$*.subtrees; \
		$(CMD_LOG2) "subtree calculation for $* started"; \
		if test -e $@.dir; then \
		    $(MAKE) -C $@.dir $@-hook; \
		    $(CMD_LOG2) "rejoining for $* started"; \
		    cd $@.dir; \
		    find . -name "*.subtree" -exec cat {} \; |\
		    tree_rejoin_subbranches \
		    --output_path "../$@_tmp" \
		    --err_log rejoin.errors \
		    > rejoined.log; cd ..; \
		    echo ">cluster# $* size= 0" > $@; \
		    grep -v ">" $@_tmp >> $@; \
		fi; \
		rm -f $@_tmp; \
	fi
	$(EPILOG)

################################################
## building tree from ka values
%_ka.tree: %.bl_kaks
	$(PRELOG)
	@numseq=`grep -c ">" $*.na_mali`; \
	if [[ $${numseq} -le $(PARAM_TREES_TREE_SIZE) ]] ; then \
		echo ">cluster# $* size= 0" > $@; \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $< |\
		grep -i -v "error" |\
		cut -f 1,2,3 |\
		$(PARAM_TREES_TREE_PROGRAM) \
			--input_format p \
			--iterations 30 \
			--weighting $(PARAM_TREES_WEIGHTING) \
			--header \
			--err_log $@.errors |\
		grep -v ">" >> $@;\
	else \
		$(CMD_LOG2) "main tree calculation for $* started"; \
		$(MAKE) $@.dir; \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $< |\
		grep -i -v "error" |\
		cut -f 1,2,4 |\
		tree_upgma \
			--matrix_output \
			--input_format p \
			--output_format p \
			--header \
			--err_log $@.dir/upgma.errors |\
		tree_extract_sub_trees_with_matrix \
			--unchanged_tree_file   $@.dir/$*.nh.unchanged \
			--err_log               $@.dir/subtrees.errors \
			--tree_files_path       $@.dir/$*.orig_sub_tree \
			--sub_matrix_files_path $@.dir/$*.sub_matrix \
			--description "$*.subtrees" \
			--input_format p \
			--output_format p \
		> $@.dir/$*.subtrees; \
		$(CMD_LOG2) "subtree calculation for $* started"; \
		$(MAKE) -C $@.dir $@-hook; \
		$(CMD_LOG2) "rejoining for $* started"; \
		cd $@.dir; \
		find . -name "*.subtree" -exec cat {} \; |\
		tree_rejoin_subbranches \
		--output_path "../$@_tmp" \
		--err_log rejoin.errors \
		> rejoined.log; cd ..; \
		echo ">cluster# $* size= 0" > $@; \
		grep -v ">" $@_tmp >> $@; \
		rm -f $@_tmp; \
	fi
	$(EPILOG)


########################################################################
## script for bootstrapping a cluster given a multiple alignment 
define BOOTSTRAP_SCRIPT
#!/bin/bash\n\
dir_tmp=$(DIR_TMP)\$$1_boot_\$$$$/\n\
dir_src=`pwd`/\$$1.dir/\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
echo \"# working directory: \$${dir_tmp}\" \n\
echo \"# source directory : \$${dir_src}\" \n\
rm -rf \$${dir_tmp}\n\
mkdir \$${dir_tmp}\n\
cp \$${dir_src}\$$1.na_mali \$${dir_tmp}\n\
cp \$${dir_src}\$$1.aa_mali \$${dir_tmp}\n\
cp \$${dir_src}Makefile \$${dir_tmp}\n\
cd \$${dir_tmp}\n\
echo \"# calculating the bootstrap:\" \n\
$(MAKE) -k \$$1.bs_partitions \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in make during bootstrapping \"; \n\
	exit 2; \n\
fi\n\
echo \"# evaluating to the bootstrap:\" \n\
$(MAKE) -k \$$1.bs_evaluate \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in make during evaluation\"; \n\
	exit 2; \n\
fi\n\
echo \"# removing input files\" \n\
rm -f \$${dir_tmp}Makefile \$${dir_tmp}\$$1.na_mali \$${dir_tmp}\$$1.aa_mali\n\
echo \"# moving output to \$${dir_src}\" \n\
cat \$${dir_tmp}log >> \$${dir_src}log \n\
rm -f \$${dir_tmp}log \n\
mv \$${dir_tmp}* \$${dir_src} \n\
if [ \$$? != 0 ]; then exit 1; fi\n\
rmdir \$${dir_tmp}\n\
echo \"# \$$0 finished at \`date\`\" \n\
exit 0
endef

bootstrap.bash:
	@echo -e "${BOOTSTRAP_SCRIPT}" > $@
	@chmod 770 $@

