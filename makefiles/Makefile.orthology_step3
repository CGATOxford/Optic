################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_step3 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

################################################
## step0: run blast all vs all
STEP3_QUERIES=$(wildcard step3_*.chunk)
STEP3_TARGETS=$(STEP3_QUERIES:%.chunk=%.links)

step3: step3.finish
	touch $@

dummy_step3: step3.prepare step3.run step3.finish 
	touch $@

step3.run: step3.prepare
	$(PRELOG)
	$(PARAM_CMD_COPY)map_token2id.fasta $(DIR_TMP_SHARED_LOCAL)
	$(PARAM_CMD_COPY)map_mem2rep.links $(DIR_TMP_SHARED_LOCAL)
	$(MAKE) -C step3.dir -j $(PARAM_STEP3_NUMJOBS) -k $@-hook
	@touch $@
	@rm -f $(DIR_TMP_SHARED_LOCAL)map_token2id.fasta
	@rm -f $(DIR_TMP_SHARED_LOCAL)map_mem2rep.links
	$(EPILOG)

step3.prepare: queries.fasta representatives.fasta
	$(PRELOG)
	@$(MAKE) step3.dir
	@split -l $(PARAM_STEP3_CHUNKSIZE) -a 5 step1.dir/blast.links step3.dir/step3_
	@for file in step3.dir/step3_*; do \
		mv $${file} $${file}.chunk; \
	done
	@touch $@
	$(EPILOG)

.PHONY: step3.run-hook 

step3.run-hook: $(STEP3_TARGETS)

step3_%.links: step3_%.chunk
	@$(CMD_REMOTE_SUBMIT) map_alignments -r 10000 -s \
				-f $(DIR_TMP_SHARED_REMOTE)map_token2id.fasta \
				-m $(DIR_TMP_SHARED_REMOTE)map_mem2rep.links \
				-v 1 -a \
				< step3_$*.chunk |\
	awk '/^#/ {print; next; } \
	    {printf("%s\t%s\t%s\t%i\t%i\t%5.2f\n", $$1, $$2, $$3, $$5-$$4+1, $$8-$$7+1, $$9);} ' > $@

step3.finish: step3.all.links step3.self step3.scaled.links step3.seed.links
	$(PRELOG)
	@touch $@
	$(EPILOG)

step3.results: step3.run
	$(PRELOG)
	@find step3.dir -name "step3_*.links" -exec cat {} \; |\
	python $(DIR_SCRIPTS_TOOLS)graph_blast2pairs.py \
	--method=bitscore > $@
	$(EPILOG)

#####################################################################################
step3.all.links:
	ln -s stepx1.dir/blast.links step3.all.links

##############################################################################
## extract highest self-scores
step3.self: step3.all.links
	$(PRELOG)
	@awk '!/^#/ && $$1 == $$2 { printf("%s\t%s\n", $$1, $$14); }' < step3.all.links |\
	sort -k1,1 -k2,2nr |\
	awk '{if (l != $$1) { print; } l = $$1; }' > $@
	$(EPILOG)

##############################################################################
## create file with links for orthology assigment
## 	contains normalized bitscore
## 	graph is made asymmetric.
##	graph is filtered by bitscore and coverage
step3.scaled.links: step3.all.links step3.self
	$(PRELOG)
	@rm -f $@.log
	@awk '\
	BEGIN \
		{ while (getline < "step3.self") { a[$$1] = $$2 } } \
		NF == $(PARAM_STEP1_BLASTP_NUMFIELDS) && !/^#/ \
		{ ninput++; \
		cova = ($$5-$$4+1)/$$12; covb = ($$8-$$7+1)/$$13; \
		if (cova > covb) { maxcov = cova; mincov = covb; } \
		else             { maxcov = covb; mincov = cova; } \
		if (!($$1 in a)) { nerrors++;printf("error: %s not found in: %s\n", $$1, $$0) >> "$@.log"; next }; \
		if (!($$2 in a)) { nerrors++;printf("error: %s not found in: %s\n", $$2, $$0) >> "$@.log"; next }; \
		score = (a[$$1] < a[$$2]) ? ($$14 / a[$$1]) : ($$14 / a[$$2]); \
		if ( (mincov < $(PARAM_STEP3_MIN_MIN_COVERAGE)) || (maxcov < $(PARAM_STEP3_MIN_MAX_COVERAGE)) ) \
		{ neliminated_coverage++; next; } \
		if (score < $(PARAM_STEP3_MIN_SCORE)) { neliminated_score++; next; } \
		noutput++; score=1.0-score;\
		if ($$1 < $$2) { \
			printf("%s\t%s\t%8.6f\n",\
			$$1,$$2,score);  \
		} else {\
			printf("%s\t%s\t%8.6f\n",\
			$$2,$$1,score); \
		} \
	      } \
	END \
		{ printf("# ninput=%i, noutput=%i, neliminated_coverage=%i, neliminated_score=%i, nerrors=%i, ", \
			ninput, noutput, neliminated_coverage, neliminated_score, nerrors) >> "$@.log"; } \
	' < step3.all.links |\
	sort -T $(DIR_TMP) -k1,1 -k2,2 -k3,3n |\
	awk 'BEGIN {l1=0;l2=0;} {if ($$1 !=l1 || $$2 != l2) {print; l1=$$1;l2=$$2;} }' > $@
	@$(MAKE) -s step3.scaled.link_stats
	$(CMD_LOG) "number of pairs with negative scores: `awk '$$3 < 0' < $@ | wc -l`"
	$(EPILOG)

##############################################################################
## create file with links for orthology assignment
step3.seed.links: step3.scaled.links
	$(PRELOG)
	@awk '{split($$1,a,"$(PARAM_SEPARATOR)");split($$2,b,"$(PARAM_SEPARATOR)"); \
		codes["CG"]=1;codes["SG"]=1;codes["PG"]=1;codes["RG"]=1;codes["CP"]=1;codes["SP"]=1; \
		if (a[4] in codes && b[4] in codes) { print;}}'  \
	< step3.scaled.links > $@
	@$(MAKE) -s step3.seed.link_stats
	$(EPILOG)

##############################################################################
## create file with best hits
step3.besthits.links: blast.links
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)graph_blast2besthits.py \
	--method=evalue \
	--pide-factor=10 \
	--genome-file="$(PARAM_INPUT_GENOME)" \
	--score-factor=0.9 < blast.links > $@
	$(EPILOG)

## create file with best scores per genome
step3.bestscores: step3.besthits.links
	$(PRELOG)
	@awk -v gg="$(PARAM_GENOMES)" \
	'BEGIN {split(gg, genomes, " "); printf("query"); \
		for (x in genomes) { printf("\t%s", genomes[x]); } printf("\n"); } \
	 !/^#/ { if (l != $$1) { \5A
	         if (l) { printf("%s", l); for (x in genomes) { printf("\t%f", counts[genomes[x]]); counts[genomes[x]] = 0;} printf("\n"); } \
	         l = $$1; } \
	         split($$2, b, "$(PARAM_SEPARATOR)" ); \
	         if (counts[b[1]] < $$14) { counts[b[1]] = $$14; } \
	       } \
	END { printf("%s", l); for (x in genomes) { printf("\t%f", counts[genomes[x]]); counts[genomes[x]] = 0;} printf("\n"); } \
	' < step3.besthits.links > $@
	$(EPILOG)


##############################################################################
## Step 5: various management targets
##############################################################################
## remove runs that have not finished
step3.remove_unfinished:
	$(PRELOG)
	@for file in step3.dir/step3_*.links; do \
		tail -n 1 $$file | grep -q "# pairs="; \
		if [[ $$? == 1 ]] ; then \
			echo "deleting $$file"; \
			rm -f $$file; \
		fi \
	done
	$(EPILOG)

step3.remove_stalled:
	$(PRELOG)
	@for file in step3.dir/step3_*.links; do \
		tail -n 1 $$file | grep -q -v "# (.=1000"; \
		if [[ $$? == 1 ]] ; then \
			echo "deleting $$file"; \
			rm -f $$file; \
		fi \
	done
	$(EPILOG)

## display runs that have not finished
step3.show_unfinished:
	@for file in step3.dir/step3_*.links; do \
		tail -n 1 $$file | grep -q "# pairs="; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

## clean up unnecessary files
step3.clean: 
	$(PRELOG)
	@rm -rf step3.dir

## show progress report
step3.show_progress:
	@echo "# alignment status at `date`" >> step3.progress
	@find step3.dir -name "step3_*.matches" -exec grep "GRAPH: region [0-9]*: finished" {} \; |\
	perl -p -e "s/.*finished in //; s/[^0-9\n]//g" |\
	awk -v total=`grep "# written [0-9]* regions" step3.split | perl -p -e "s/\D+//g"` '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step3.progress
	@tail step3.progress


step3.check:
	$(PRELOG)
	@printf "entries in %s: %i\n" step3.self `wc -l <step3.self` $(TOLOG)
	@for x in step3.scaled.links step3.seed.links; do
		echo "composition of $${x}" $(TOLOG); \
		perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < $${x} |
		perl -p -e "s/[$(PARAM_SEPARATOR)]\s+[$(PARAM_SEPARATOR)]\s+[$(PARAM_SEPARATOR)]/\t" |\
		sort | uniq -c $(TOLOG);
	done
	$(EPILOG)
