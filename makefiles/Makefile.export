################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.export 2033 2008-07-15 09:19:48Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#################################################################################
## Export of data
#################################################################################

EXPORT_TARGETS=export_reference.exons export_peptides.fasta export_peptides2genes

export: 
	$(PRELOG)
	@$(MAKE) $@.dir 
	if test -e $@.dir; then \
		$(MAKE) -C $@.dir $(EXPORT_TARGETS); \
	fi
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
###########################################################################
## Export functions for iterative application of the pipeline
###########################################################################

EXPORT_TRANSCRIPT_ID?='$(PARAM_PSQL_SCHEMA)$(PARAM_EXPORT_SEPARATOR)' || p.prediction_id || '$(PARAM_EXPORT_SEPARATOR)' || g.gene_id || '$(PARAM_EXPORT_SEPARATOR)' || q.class
EXPORT_GENE_ID?='$(PARAM_PSQL_SCHEMA)$(PARAM_EXPORT_SEPARATOR)' || i.best_prediction_id || '$(PARAM_EXPORT_SEPARATOR)' || g.gene_id || '$(PARAM_EXPORT_SEPARATOR)' || i.best_class

###########################################################################
# create a file with exon boundaries in the same format that is used
# as input to the pipeline.
# This file uses external coordinates.
export_reference.exons: 
	$(PRELOG)
	@$(CONNECTION) "SELECT \
	$(EXPORT_TRANSCRIPT_ID), \
	p.sbjct_token, p.sbjct_strand, \
	e.exon_frame, e.cds_id, e.exon_from, e.exon_to, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start WHEN sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start   WHEN sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_GENES) AS g, \
	$(PARAM_TABLE_NAME_CDS) AS e, \
	$(PARAM_TABLE_NAME_QUALITY) AS q, \
	$(PARAM_TABLE_NAME_CONTIGS) AS c, \
	$(PARAM_TABLE_NAME_REDUNDANT) AS r \
	WHERE \
	e.prediction_id = p.prediction_id AND \
	q.prediction_id = p.prediction_id AND \
	g.prediction_id = p.prediction_id AND \
	r.mem_prediction_id = p.prediction_id AND \
	g.gene_id > 0 AND \
	p.sbjct_token = c.sbjct_token AND \
	r.rep_prediction_id = r.mem_prediction_id \
	ORDER BY query_token, sbjct_token, sbjct_strand, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

# create a peptides.fasta file that corresponds to
# the export_reference_exons file.
export_peptides.fasta: 
	$(PRELOG)
	@$(CONNECTION) "SELECT $(EXPORT_TRANSCRIPT_ID), p.sequence \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_GENES) AS g, \
	$(PARAM_TABLE_NAME_QUALITY) AS q, \
	$(PARAM_TABLE_NAME_REDUNDANT) AS r \
	WHERE \
	q.prediction_id = p.prediction_id AND \
	g.prediction_id = p.prediction_id AND \
	r.mem_prediction_id = p.prediction_id AND \
	g.gene_id > 0 AND \
	r.rep_prediction_id = r.mem_prediction_id \
	ORDER BY query_token" \
	$(CONNECTION_OPTIONS) |\
	awk '{printf(">%s\n%s\n", $$1, $$2); }' > $@
	$(EPILOG)

# create a peptides2genes file that corresponds to the
# export_peptides2genes: exons.load
export_peptides2genes:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT \
	$(EXPORT_GENE_ID), \
	$(EXPORT_TRANSCRIPT_ID) \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_GENES) AS g, \
	$(PARAM_TABLE_NAME_QUALITY) AS q, \
	$(PARAM_TABLE_NAME_GENEINFO) AS i, \
	$(PARAM_TABLE_NAME_REDUNDANT) AS r \
	WHERE \
	q.prediction_id = p.prediction_id AND \
	g.prediction_id = p.prediction_id AND \
	g.gene_id > 0 AND \
	i.gene_id = g.gene_id AND \
	r.rep_prediction_id = r.mem_prediction_id AND \
	r.mem_prediction_id = p.prediction_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

#######################################################################
## export genomic sequences of transcripts
export_cdnas.fasta:
	$(CONNECTION) \
	"SELECT '$(PARAM_EXPORT_PREFIX_PREDICTION)' || o.prediction_id, \
	o.sbjct_token, o.sbjct_strand, \
	o.full_sbjct_genome_from, o.full_sbjct_genome_to \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS o $(PARAM_EXPORT_FILTER) \
	ORDER BY o.sbjct_token " \
	$(CONNECTION_OPTIONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--format=fasta \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN) \
	--input-format=minimal \
	--min-margin=0 \
	--default-margin=0 |\
	grep -v "#" > $@

## a list of genomic regions
export_cds.gff:
	$(CONNECTION) \
	"SELECT o.sbjct_token, 'gpipe', 'cds', \
	o.export_sbjct_genome_from, o.export_sbjct_genome_to, \
	o.score, \
	o.sbjct_strand, '.', \
	'Id ' || '$(PARAM_EXPORT_PREFIX_PREDICTION)' || o.prediction_id || '$(PARAM_EXPORT_SEPARATOR)' ||\
	o.gene_id || '$(PARAM_EXPORT_SEPARATOR)' || o.class \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS o, \
	$(PARAM_TABLE_NAME_CONTIGS) AS c \
	WHERE c.sbjct_token = o.sbjct_token \
	ORDER BY o.prediction_id" \
	$(CONNECTION_OPTIONS) > $@

############################################################################
##
## Export of exons in gff format
##
EXPORT_EXONS_ID='$(PARAM_EXPORT_PREFIX_PREDICTION)' || p.prediction_id || '$(PARAM_EXPORT_SEPARATOR)' || g.gene_id || '$(PARAM_EXPORT_SEPARATOR)' || q.class

EXPORT_EXONS_FROM=$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_CDS) AS e , \
	$(PARAM_TABLE_NAME_CONTIGS) AS c, \
	$(PARAM_TABLE_NAME_QUALITY) AS q, \
	$(PARAM_TABLE_NAME_GENES) AS g 
EXPORT_EXONS_WHERE=e.prediction_id = p.prediction_id AND \
	q.prediction_id = e.prediction_id AND \
	g.prediction_id = e.prediction_id AND \
	g.gene_id > 0 AND \
	c.sbjct_token = p.sbjct_token 
EXPORT_EXONS_SELECT=p.sbjct_token, 'gpipe', 'exon', \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END, \
	100, \
	p.sbjct_strand, e.exon_frame, \
	'Id ' || $(EXPORT_EXONS_ID) || ' ; ' || \
	'Rank ' || e.cds_id || ' ; ' || \
	'Range ' || e.exon_from || '-' || e.exon_to 

EXPORT_EXONS_WHERE_CLEAN=q.class IN ('CG','PG','SG')

## export all predicted cds in gff format using external coordinates
export_exons_all.gff:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM) \
	WHERE $(EXPORT_EXONS_WHERE) \
	ORDER BY e.prediction_id, e.cds_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

## export non-redundant predicted cds in gff format using external coordinates
## formerly known as export_exons_nr.gff
export_exons_filtered.gff:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM), \
	$(PARAM_TABLE_NAME_REDUNDANT) AS m \
	WHERE $(EXPORT_EXONS_WHERE) AND \
	m.rep_prediction_id = p.prediction_id AND \
	m.rep_prediction_id = m.mem_prediction_id \
	ORDER BY e.prediction_id, e.cds_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

## export non-redundant predicted cds in gff format using external coordinates
export_exons_clean.gff:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM), \
	$(PARAM_TABLE_NAME_REDUNDANT) AS m \
	WHERE $(EXPORT_EXONS_WHERE) AND \
	m.rep_prediction_id = p.prediction_id AND \
	m.rep_prediction_id = m.mem_prediction_id AND \
	$(EXPORT_EXONS_WHERE_CLEAN) \
	ORDER BY e.prediction_id, e.cds_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

#############################################################################
##
## Export of files for the clustering/orthology assignment process
## use gene id, because overlap_id too greedy.
## export_clustering_map_id2position removed
##
##
## Id to use for exported predictions
EXPORT_CLUSTERING_ID='$(PARAM_EXPORT_PREFIX_PREDICTION)' || o.prediction_id || \
	'$(PARAM_EXPORT_SEPARATOR)' || o.gene_id || \
	'$(PARAM_EXPORT_SEPARATOR)' || o.class

EXPORT_CLUSTERING_TARGETS=export_clustering_exon_boundaries \
			export_clustering_cds.fasta \
			export_clustering_peptides.fasta \
			export_clustering_nr_predictions \
			export_clustering_representatives 

EXPORT_CLUSTERING_FROM=$(PARAM_TABLE_NAME_OVERVIEW) AS o, $(PARAM_TABLE_NAME_REDUNDANT) AS r
EXPORT_CLUSTERING_WHERE=r.rep_prediction_id = o.prediction_id AND \
	r.rep_prediction_id = r.mem_prediction_id AND \
	o.gene_id > 0

export_clustering: 
	$(MAKE) $@.dir 
	if test -e $@.dir; then \
		$(MAKE) -C $@.dir $(EXPORT_CLUSTERING_TARGETS); \
	fi

export_clustering_cdnas.fasta:
	$(PRELOG)
	$(CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID), \
	o.sbjct_token, o.sbjct_strand, \
	o.full_sbjct_genome_from, o.full_sbjct_genome_to \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS o \
	ORDER BY o.sbjct_token " \
	$(CONNECTION_OPTIONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--format=fasta \
	--genome-file=$(PARAM_ASSEMBLY_PATTERN) \
	--input-format=minimal \
	--min-margin=0 \
	--default-margin=0 |\
	grep -v "#" > $@
	$(EPILOG)

export_clustering_representatives:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID) \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$(PARAM_TABLE_NAME_GENEINFO) AS i \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	i.best_prediction_id = o.prediction_id \
	ORDER BY o.prediction_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

export_clustering_exon_boundaries:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID), \
	o.sbjct_token, o.sbjct_strand, \
	c.exon_frame, c.cds_id, c.exon_from, c.exon_to, c.genome_exon_from, c.genome_exon_to \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$(PARAM_TABLE_NAME_CDS) AS c \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	c.prediction_id = o.prediction_id \
	ORDER BY c.prediction_id, c.exon_from" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

export_clustering_cds.fasta:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT '>' || $(EXPORT_CLUSTERING_ID) || '\n' || c.sequence \
	FROM $(EXPORT_CLUSTERING_FROM), \
	$(PARAM_TABLE_NAME_CDS) AS c \
	WHERE $(EXPORT_CLUSTERING_WHERE) AND \
	c.prediction_id = o.prediction_id \
	ORDER BY c.prediction_id, c.exon_from" \
	$(CONNECTION_OPTIONS) |\
	awk '/^>/ { if ($$0 != a) {print; a = $$0; } next; } { print; }' > $@
	$(EPILOG)

## export peptides for clustering
## convert ? characters to X for easier downstream processing.
export_clustering_peptides.fasta:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT '>' || $(EXPORT_CLUSTERING_ID) || '\n' || o.sequence \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS o, \
	$(PARAM_TABLE_NAME_REDUNDANT) AS r \
	WHERE $(EXPORT_CLUSTERING_WHERE) \
	ORDER BY o.prediction_id " \
	$(CONNECTION_OPTIONS) |\
	perl -p -e "s/[?]/X/g" \
	> $@
	$(EPILOG)

## a list of non-redundant predictions 
export_clustering_nr_predictions:
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_CLUSTERING_ID) \
	FROM $(EXPORT_CLUSTERING_FROM) \
	WHERE $(EXPORT_CLUSTERING_WHERE) \
	ORDER BY o.prediction_id" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

###########################################################################
## build a map of predictions and genes to query_tokens
## get all predictions from the database with their query_tokens
## substitute query_tokens with their gene names (these are the cluster ids)
## The gene name is the representative of the query token
##
## Use query_tokens of redundant members for representative predictions. 
## This is thus a n:n mapping between non-redundant predictions and clusters (queries).
export_clustering_map_id2cluster: peptides2genes
	$(CONNECTION) \
	"SELECT o.prediction_id, o.class, o.gene_id, o.query_token \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS o "\
	$(CONNECTION_OPTIONS) |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=peptides2genes --invert --columns-token=4 |\
	awk '{printf("$(PARAM_EXPORT_PREFIX_PREDICTION)%s:%i:%s\t$(PARAM_EXPORT_PREFIX_GENE)%i\t%s\n", $$1, $$3, $$2, $$3, $$4);}' > $@

export_clustering_map_id2cluster_all: peptides2genes
	$(CONNECTION) \
	"SELECT o1.prediction_id, o1.class, o1.gene_id, o2.query_token \
	FROM $(PARAM_TABLE_NAME_REDUNDANT) AS r, \
	$(PARAM_TABLE_NAME_OVERVIEW) AS o1, \
	$(PARAM_TABLE_NAME_OVERVIEW) AS o2 \
	WHERE \
	r.rep_prediction_id = o1.prediction_id AND \
	r.mem_prediction_id = o2.prediction_id " \
	$(CONNECTION_OPTIONS) |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=peptides2genes --invert --columns-token=4 |\
	awk '{printf("$(PARAM_EXPORT_PREFIX_PREDICTION)%s-%s\t$(PARAM_EXPORT_PREFIX_GENE)%s\t%s\n", $$1, $$2, $$3, $$4);}' |\
	sort | uniq > $@


