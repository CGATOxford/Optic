################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_export_load 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#############################################################################
## export statements for the genome browser
export_load: export_load.prepare export_load.run

export_load.run:
	$(MAKE) -C export_load.dir $@-hook

export_load.prepare: create-schema create-tables
	$(MAKE) export_load.dir 

export_load.run-hook: \
	orthologs.load \
	malis.load \
	map_prediction2cluster.load \
	cluster_attributes.load 


#########################################################################
create-schema:
	$(CMD_LOG) "creating schema $(PARAM_PSQL_SCHEMA)"
	-@$(CMD_PSQL_CONNECTION) "CREATE SCHEMA $(PARAM_PSQL_SCHEMA)";

#########################################################################
create-tables: \
		$(PARAM_TABLE_NAME_MALIS_RAW).create-table-malis \
		$(PARAM_TABLE_NAME_MALIS_AA).create-table-malis \
		$(PARAM_TABLE_NAME_MALIS_NA).create-table-malis \
		$(PARAM_TABLE_NAME_MALIS_MAP_PREDICTION2CLUSTER).create-table-map_prediction2cluster 
		$(PARAM_TABLE_NAME_ORTHOLOGLINKS).create-table-orthologlinks 

#########################################################################
%.create-table-orthologlinks: 
	$(CMD_LOG) "creating table $*"
	-@$(CMD_PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(CMD_PSQL_CONNECTION) "CREATE TABLE $* ( \
	schema1 TEXT, \
	prediction_id1 TEXT, \
	gene_id1 TEXT, \
	schema2 TEXT, \
	prediction_id2 TEXT, \
	gene_id2 TEXT, \
	gene_degeneracy CHAR(2), \
	transcript_degeneracy CHAR(2), \
	weight FLOAT )"
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction_id1 ON $* (prediction_id1);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction_id2 ON $* (prediction_id2);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema1 ON $* (schema1);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema2 ON $* (schema2);" 


#########################################################################
## split identifiers at separator
## remove first character to get schema
orthologs.load:
	$(CMD_LOG) "$@ started."
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_ORTHOLOGLINKS);" 
	@awk '\
	{ split($$1, a, "$(PARAM_SEPARATOR)"); split($$2, b, "$(PARAM_SEPARATOR)"); \
	  printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", \
	  substr(a[1],2), a[2], a[3], substr(b[1],2), b[2], b[3], $$4, $$5, $$3); }' \
	< ../step4.dir/orthologs.links |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_ORTHOLOGLINKS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_ORTHOLOGLINKS): `$(CMD_PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_ORTHOLOGLINKS);' -t `"  >> $(LOG)
	@touch $@
	$(CMD_LOG) "$@ completed."

#########################################################################
## table for storing multiple alignment information
%.create-table-malis: 
	$(CMD_LOG) "creating table $*"
	-@$(CMD_PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(CMD_PSQL_CONNECTION) "CREATE TABLE $* ( \
	cluster_id INTEGER DEFAULT '0', \
	schema TEXT, \
	prediction_id TEXT, \
	alignment TEXT \
	)"
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_cluster_id1 ON $* (cluster_id);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction_id  ON $* (prediction_id);" 

#########################################################################
## load multiple alignments into database
## they are stored in three separate tables which will make serving
## them easier.
## The loading procedure for raw and aa are the same.
malis.load:
	$(CMD_LOG) "$@ started."
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_MALIS_RAW);" > /dev/null
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_MALIS_AA);"  > /dev/null
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_MALIS_NA);"  > /dev/null
	@rm -f $@_tmp
	$(CMD_LOG) "loading $(PARAM_TABLE_NAME_MALIS_RAW)."
	@for file in `find ../step6.dir -name "cluster*.raw_mali"`; do \
		cluster_id=`echo $$file | perl -p -e 's/^.*cluster_(\d+).*$$/$$1/'`; \
		awk -v cluster_id=$${cluster_id} \
		    '/^#/ {next} \
		     /^>/ \
			{ if (notfirst) { printf("\n")}; \
		          notfirst = 1; \
			  split(substr($$1,2), a, "$(PARAM_SEPARATOR)"); \
			  printf("%s\t%s\t%s\t", cluster_id, a[1], a[2] ); next;} \
		        { printf("%s", $$1); } \
		     END { printf("\n")} ;' \
		< $${file} >> $@_tmp; \
	done
	@perl -p -e "s/\r//g" < $@_tmp |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_MALIS_RAW) FROM STDIN WITH NULL AS 'na'" > $@ 
	@rm -f $@_tmp
	@echo "loaded into $(PARAM_TABLE_NAME_MALIS_RAW): `$(CMD_PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_MALIS_RAW);' -t `"  >> $(LOG)
	$(CMD_LOG) "loading $(PARAM_TABLE_NAME_MALIS_AA)."
	@for file in `find ../step6.dir -name "cluster*.aa_mali"`; do \
		cluster_id=`echo $$file | perl -p -e 's/^.*cluster_(\d+).*$$/$$1/'`; \
		awk -v cluster_id=$${cluster_id} \
		    '/^#/ {next} \
		     /^>/ \
			{ if (notfirst) { printf("\n")}; \
		          notfirst = 1; \
			  split(substr($$1,2), a, "$(PARAM_SEPARATOR)"); \
			  printf("%s\t%s\t%s\t", cluster_id, a[1], a[2] ); next;} \
		        { printf("%s", $$1); } \
		     END { printf("\n")} ;' \
		< $${file} >> $@_tmp; \
	done
	@perl -p -e "s/\r//g" < $@_tmp |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_MALIS_AA) FROM STDIN WITH NULL AS 'na'" > $@ 
	@rm -f $@_tmp
	@echo "loaded into $(PARAM_TABLE_NAME_MALIS_AA): `$(CMD_PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_MALIS_AA);' -t `"  >> $(LOG)
	$(CMD_LOG) "loading $(PARAM_TABLE_NAME_MALIS_NA)."
	@for file in `find ../step6.dir -name "cluster*.na_mali"`; do \
		cluster_id=`echo $$file | perl -p -e 's/^.*cluster_(\d+).*$$/$$1/'`; \
		awk -v cluster_id=$${cluster_id} \
		    '/^#/ {next} \
			/^>/ \
			{ if (notfirst) { printf("\n")}; \
		          notfirst = 1; \
			  split(substr($$1,2), a, "$(PARAM_SEPARATOR)"); \
			  printf("%s\t%s\t%s\t", cluster_id, a[1], a[2] ); next;} \
		        { printf("%s", $$0); } \
		     END { printf("\n")} ;' \
		< $${file} >> $@_tmp; \
	done
	@perl -p -e "s/\r//g" < $@_tmp |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_MALIS_NA) FROM STDIN WITH NULL AS 'na'" > $@ 
	@rm -f $@_tmp
	@echo "loaded into $(PARAM_TABLE_NAME_MALIS_NA): `$(CMD_PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_MALIS_NA);' -t `"  >> $(LOG)
	@touch $@
	$(CMD_LOG) "$@ completed."

#########################################################################
## table for clustering information. 
## Currently there are three clustering levels:
## Main cluster: Based on pairwise orthology
## Level 1: Based on bootstraps
## Level 2: Based on mali quality and transcripts
%.create-table-map_prediction2cluster: 
	$(CMD_LOG) "creating table $*"
	-@$(CMD_PSQL_CONNECTION) "DROP TABLE $* CASCADE ";
	@$(CMD_PSQL_CONNECTION) "CREATE TABLE $* ( \
	prefix TEXT, \
	schema TEXT, \
	prediction_id TEXT, \
	gene_id TEXT, \
	class CHAR(2), \
	cluster_id INTEGER DEFAULT '0', \
	subcluster_id1 INTEGER DEFAULT '0', \
	subcluster_id2 INTEGER DEFAULT '0', \
	is_fragment BOOLEAN \
	)"
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prefix ON $* (prefix);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_cluster_id1 ON $* (cluster_id);" 
	@$(CMD_PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_prediction  ON $* (schema,prediction_id);" 

#########################################################################
## load assignments of predictions to clusters
## 1. Get all predictions from orthologs.components.map 
## 2. Add columns for subclusters
##	clusters.components.map
##	unassigned.compoments.map
##	fragments.compoments.map
map_prediction2cluster.load: ../orthologs.components.map ../step6.qc/clusters.components.map
	$(CMD_LOG) "$@ started."
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER);" > /dev/null
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
	--missing="" \
	../orthologs.components.map \
	../step6.qc/clusters.components.map \
	../step6.qc/unassigned.components.map \
	../step6.qc/fragments.components.map |\
	awk 'BEGIN { FS = "\t"; } \
	      !/#/ \
		{ subcluster1 = 0; subcluster2 = 0; is_fragment = "0"; prefix=sprintf("cluster_%s", $$2); \
		  if ($$4) { split($$4, a, "_"); subcluster1=a[3]; subcluster2=0; prefix=$$4;} \
		   else { \
			  if ($$3) { split($$3, a, "_"); subcluster1=a[3]; subcluster2=a[4]; prefix=$$3;} \
			} \
		  if ($$5) { split($$5, a, "_"); subcluster1=a[3]; subcluster2=a[4]; is_fragment = "1" }; \
		  split($$1, a, "$(PARAM_SEPARATOR)"); \
		  printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", prefix, a[1], a[2], a[3], a[4], \
			$$2, subcluster1, subcluster2, is_fragment); \
		}' |\
	$(CMD_PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER) FROM STDIN WITH NULL AS 'na'" > $@ 
	@touch $@
	$(CMD_LOG) "$@ completed."

#########################################################################
## load predictions to cluster
cluster_attributes.load: 
	$(CMD_LOG) "$@ started."
	@$(CMD_PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES);" > /dev/null
	@grep -v "^#" ../step6.qc/joined.subclusters |\
	python $(DIR_SCRIPTS_TOOLS)csv2psql.py \
	--lowercase \
	--table=$(PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES) \
	--ignore-duplicates \
	--ignore-empty \
	--map=mask:string \
	> $@
	$(CMD_LOG) "$@ completed."
