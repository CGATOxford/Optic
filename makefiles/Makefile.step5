################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step5 2129 2008-08-26 10:39:10Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
# predict transcripts for likely orthologous matches
step5: step5.prepare step5.run step5.finish
	$(EPILOG)
	@touch $@

##############################################################################
## parallel prediction execution of representatives
## set SKIP_CHECK_PREDICTION, if you want to skip the 
## update of prediction results
STEP5_QUERIES=$(wildcard *.chunk)
ifndef PARAM_SKIP_CHECK_PREDICTION 
STEP5_TARGETS=$(STEP5_QUERIES:%.chunk=%.matches)
endif

STEP5_PREDICTION_OPTIONS=$(PARAM_PREDICTION_OPTIONS) \
	--genome-file=../$(PARAM_INPUT_GENOME) \
	--exons=../$(PARAM_INPUT_EXONS) \
	--format=graph \
	-

##############################################################################
## rollback to the start of this step.
step5.rollback:
	$(PRELOG)
	$(MAKE) step5.clean
	@rm -f step5.{prepare,run,finish,matches,predictions,load}
	@rm -f step5*
	$(EPILOG)

##############################################################################
## Step 5.0: prepare representatives alignemnts
##	-> massage boundaries as transcripts do not match completely, add something to the beginning
##		and end $(PARAM_PREDICTION_MARGIN)
##	-> split the peptides files into individual files.
##############################################################################
## for efficient processing, exonerate.predictions should be sorted by genomic region.
## which the output from exonerate.predictions not necessarily is.
step5.prepare: step4 step5.graph.gz step5.split
	$(EPILOG)
	@touch $@

step5.graph.gz: step4
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < step4.predictions.gz |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/regions2graph.py \
	$(PYTHON_OPTIONS) \
	--log=$@.log \
	--min-score=$(PARAM_EXONERATE_GRAPH_MIN_SCORE) \
	--join-regions=$(PARAM_EXONERATE_JOIN_REGIONS) \
	--join-regions-max-coverage=$(PARAM_EXONERATE_JOIN_REGIONS_MAX_COVERAGE) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--verbose=2 \
	--conserve-memory \
	--filter-suboptimal \
	--overlap-min-score=$(PARAM_EXONERATE_GRAPH_OVERLAP_MIN_SCORE) \
	--overlap-min-coverage=$(PARAM_EXONERATE_GRAPH_OVERLAP_MIN_COVERAGE) \
	--overlap-max-coverage=$(PARAM_EXONERATE_GRAPH_OVERLAP_MAX_COVERAGE) \
	--overlap-min-identity=$(PARAM_EXONERATE_GRAPH_OVERLAP_MIN_IDENTITY) |\
	gzip > $@" < /dev/null
	@touch $@
	$(EPILOG)

step5.split: step5.graph.gz
	$(PRELOG)
	@rm -rf step5.dir
	@mkdir step5.dir
	@ln -s ../Makefile step5.dir/Makefile
	@if test -s patch_step5.graph; then \
		extra_options="--filename-previous=patch_step5.graph"; \
	else \
		extra_options=""; \
	fi; \
	gunzip < $< |\
	grep -v "#" |\
	sort -k4,4n -k1,1n -k2,2n -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	$(PYTHON_OPTIONS) \
	--min-margin=$(PARAM_PREDICTION_MIN_MARGIN) \
	--default-margin=$(PARAM_PREDICTION_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--output-pattern=step5.dir/step5_%05i.chunk \
	--format=chunks \
	--input-format=graph \
	--max-region=$(PARAM_PREDICTION_MAX_REGION) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--no-sequence \
	--chunk=$(PARAM_PREDICTION_CHUNKSIZE) \
	$${extra_options} \
	> $@; \
	detect_pipe_error;
	$(EPILOG)
	@touch $@

##############################################################################
## Step 5.1: run predictions
##############################################################################
step5.run: step5.prepare 
	$(PRELOG)
	@if test -e step5.dir; then \
		$(MAKE) -C step5.dir -k -j $(PARAM_PREDICTION_NUMJOBS) $@-hook; \
	fi
	$(EPILOG)
	@touch $@

step5.run-hook : $(STEP5_TARGETS)

step5_%.matches: step5_%.chunk
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py \
		$(PYTHON_OPTIONS) \
		$(STEP5_PREDICTION_OPTIONS) \
		< step5_$*.chunk > $@

##############################################################################
## Step 5.3: collect data and do quality control
##############################################################################
step5.finish: step5.run step5.matches.gz step5.predictions.gz representatives.transcripts step5.check
	@touch $@
	$(EPILOG)

step%.matches.gz: step%.run
	$(PRELOG)
	@find step$*.dir -name "step$*_*.matches" -exec cat {} \; | gzip > $@
	@if test -s patch_$@; then \
		cat patch_$@ >> $@; \
	fi
	$(EPILOG)

step%.predictions.gz: step%.matches.gz
	$(PRELOG)
	@gunzip < $< |\
	awk ' BEGIN { keep=0; } \
	/^# RESULT:/ { keep=1; } \
	/^# START: / { keep=0}; \
	/^#/ { next; }  \
	/^"/ { next; }  \
	/^\\/ { next; }  \
	{ if (keep) {printf("%i\t%s\n", ++a, $$0);} } ' |\
	gzip > $@

step%.check: step%.matches.gz step%.predictions.gz
	$(PRELOG)
	@echo "## Step$* - prediction of representatives:" $(TOLOG)
	@gunzip < step$*.predictions.gz | grep -v "#" | cut -f 2 | sort | uniq > $@.transcripts
	@perl $(DIR_SCRIPTS_TOOLS)set_rest.pl $@.transcripts representatives.transcripts > $@.missed_transcripts; 
	@gunzip < step$*.matches.gz |\
	awk ' BEGIN { nstarted=0; nfinished=0; nsuccess=0; nfailed=0; } \
		/job started/ {++nstarted; next;} \
		/job finished/ {++nfinished; next;} \
		/no prediction possible/ {++nfailed; next;} \
		/RESULT:/ { ++nsuccess; next;} \
		!/^#/ { if ($$3 == "+") { npositives+=1; } else { nnegatives += 1;} } \
	      END { ntotal=nsuccess+nfailed; nstarted /=2; \
		if (nstarted==0) { printf("$@\tno jobs started.\n"); } \
		else if (ntotal == 0) { printf("$@\t%i jobs started, but no jobs finished.\n", nstarted); }  \
		else { \
		    printf("$@\tnumber of jobs started:      %8i\n", nstarted); \
		    printf("$@\tnumber of jobs completed:    %8i (%5.2f%%)\n", nfinished, nfinished*100/nstarted); \
		    printf("$@\tnumber of tests completed:   %8i\n", ntotal); \
		    printf("$@\tnumber of tests successfull: %8i (%5.2f%%)\n", nsuccess, nsuccess*100/ntotal); \
		    printf("$@\tnumber of tests failed:      %8i (%5.2f%%)\n", nfailed, nfailed*100/ntotal);  \
		    printf("$@\tpositive strand predictions: %8i (%5.2f%%)\n", npositives, npositives*100/(npositives+nnegatives));  \
		    printf("$@\tnegative strand predictions: %8i (%5.2f%%)\n", nnegatives, nnegatives*100/(npositives+nnegatives)); } \
		} \
	    ' \
	$(TOLOG)
	@echo -e "$@\tnumber of aligned pairs: `gunzip < step$*.predictions.gz | grep -v '#' | wc -l`" $(TOLOG)
	@awk -v naligned="`wc -l < $@.transcripts`" -v nmissed="`wc -l < $@.missed_transcripts`" \
		'END { \
			if ((naligned + nmissed) > 0) { \
				printf("$@\tnumber of aligned queries: %8i (%5.2f%%)\n", naligned, naligned*100/(naligned+nmissed)); \
				printf("$@\tnumber of missed  queries: %8i (%5.2f%%)\n", nmissed, nmissed*100/(naligned+nmissed)); \
			} \
	             }' < /dev/null $(TOLOG)
	@touch $@
	$(CMD_LOG) "$@ finished."

##############################################################################
## Step 5: various management targets
##############################################################################
## remove runs that have not finished
step%.remove-unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e step$*.dir ]; then \
	    for file in step$*.dir/step$*_*.matches; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 ]] ; then \
			    echo "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."
	$(EPILOG)

## display runs that have not finished
step%.show-unfinished:
	@for file in step$*.dir/step$*_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

## clean up unnecessary files
step%.clean: 
	$(PRELOG)
	@rm -rf step$*.dir

## show progress report
step%.show-progress:
	@echo "# prediction status at `date`" >> step$*.progress
	@ntotal=`grep "# written [0-9]* regions" step$*.split | perl -p -e "s/\D+//g"`; \
	find step$*.dir -name "step$*_*.matches" -exec grep "GRAPH: region [0-9]*: finished" {} \; |\
	perl -p -e "s/.*finished in //; s/[^0-9\n]//g" |\
	awk -v total=$${ntotal} '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step$*.progress
	@tail step$*.progress

##############################################################################
## patching procedure: redo graph calculation removing regions already tested
## if step8.predictions exits
## 1. move everything downstream to patch
step5.patch:
	$(PRELOG)
	@if test -s step8.predictions; then \
		rename step5 patch_step5 step5*; \
		rename step6 patch_step6 step6*; \
		rename step7 patch_step7 step7*; \
		rename step8 patch_step8 step8*; \
	fi
	@touch $@
	$(EPILOG)

##############################################################################
## Step 5: various statistics targets
##############################################################################
## retrieve execution times
step5.stats: # step5.matches
	@if test ! -e $@; then mkdir $@; fi
	$(CMD_MSG) "summarizing steps per region."
	@echo -e "# regn\tprobe\tprobe\tprobe\tprobe\tprobe\trefine\trefine\trefine\trefine\trefine\tresult\tresult\tresult\tresult\tresult\tgraph\tgraph\tgraph\tgraph" > $@/steps
	@echo -e "# regn\tnsect\tnhits\tcov\tpide\ttime\tnsect\tnhits\tcov\tpide\ttime\tnsect\tnhits\tcov\tpide\ttime\truns\ttotal\ttime\treason" >> $@/steps
	@gunzip < step5.matches.gz |\
	awk ' BEGIN { keep=0; is_graph=0;} \
	/^## GRAPH: region [0-9]+: starting/ \
		{ is_graph=1; keep=1; region=$$4; sub(":","", region); ntotal_runs=$$7; \
			nruns=ntotal_runs; \
			nresults=0; results_time=0; results_nhits=0;\
			best_pide=0; best_coverage=0; \
			nrefines=0; refine_nhits=0;refine_best_pide=0;refine_best_coverage=0;refine_time=0; \
			nprobes=0; probe_nhits=0;probe_best_pide=0;probe_best_coverage=0;probe_time=0;\
			} \
	/^# START:/ { if (!is_graph) \
		{ \
		   if (keep) \
			{ \
			  	time=results_time; \
				printf("%s\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%i\t%s\n", \
				region, \
				nprobes, probe_nhits, probe_best_pide, probe_best_coverage, probe_time, \
				nrefines, refine_nhits, refine_best_pide, refine_best_coverage, refine_time, \
				nresults, results_nhits, best_pide, best_coverage, results_time, \
				nruns, ntotal_runs, time, reason); \
			} \
			keep=1; \
			region+=1; ntotal_runs=+1; \
			nruns=ntotal_runs; \
			nresults=0; results_time=0; results_nhits=0;\
			best_pide=0; best_coverage=0; \
			nrefines=0; refine_nhits=0;refine_best_pide=0;refine_best_coverage=0;refine_time=0; \
			nprobes=0; probe_nhits=0;probe_best_pide=0;probe_best_coverage=0;probe_time=0;\
		} } \
	/^# PROBE: key=/ \
		{ nprobes += 1; \
		  split( substr($$4,1,length($$4)-1), a, "="); \
		  probe_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  probe_best_pide = ( a[2] > probe_best_pide ) ? a[2] : probe_best_pide; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  probe_best_coverage = ( a[2] > probe_best_coverage ) ? a[2] : probe_best_coverage; \
		  split( $$8,a,"="); probe_time += a[2]; \
		} \
	/^# REFINE: running / \
		{ nrefines += $$4; } \
	/^# REFINE: key=/ \
		{ \
		  split( substr($$4,1,length($$4)-1), a, "="); \
		  refine_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  refine_best_pide = ( a[2] > refine_best_pide ) ? a[2] : refine_best_pide; \
		  split( substr($$6,1,length($$6)-1), a, "="); \
		  refine_best_coverage = ( a[2] > refine_best_coverage ) ? a[2] : refine_best_coverage; \
		  split( $$7,a,"="); refine_time += a[2];\
		} \
	/^# REFINEMENT: key=/ \
		{ \
		  split( substr($$4,1,length($$4)-1), a, "="); \
		  refine_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  refine_best_pide = ( a[2] > refine_best_pide ) ? a[2] : refine_best_pide; \
		  split( substr($$6,1,length($$6)-1), a, "="); \
		  refine_best_coverage = ( a[2] > refine_best_coverage ) ? a[2] : refine_best_coverage; \
		  split( $$7,a,"="); refine_time += a[2];\
		} \
	/^# REFINEMENT: searching / \
		{ nrefines += 1; } \
	/^# RESULT: / \
		{ nresults += 1; \
		  split( substr($$4,1,length($$4)-1), a, "="); results_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); best_pide = ( a[2] > best_pide ) ? a[2] : best_pide; \
		  split( substr($$6,1,length($$6)-1), a, "="); best_coverage = ( a[2] > best_coverage ) ? a[2] : best_coverage; \
		  split( $$7,a,"="); results_time += a[2]; \
	 	} \
	/^# EVAL: status=/ \
		{ reason=$$0; sub("# EVAL: status=", "", reason); sub(" is_ok=True", "", reason); } \
	/^## GRAPH: skipping entry/ \
		{ if (keep) \
			{\
				split( substr( $$0, match($$0, "[0-9]")), a, "/"); \
				nruns = a[1]-1; \
			} \
		 keep = 0;} \
	/^## GRAPH: region [0-9]+: finished in [0-9]+ seconds/ \
		{ time=$$7; \
		  printf("%s\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%i\t%s\n", \
			region, \
			nprobes, probe_nhits, probe_best_pide, probe_best_coverage, probe_time, \
			nrefines, refine_nhits, refine_best_pide, refine_best_coverage, refine_time, \
			nresults, results_nhits, best_pide, best_coverage, results_time, \
			nruns, ntotal_runs, time, reason); \
		} \
	' | sort -k1,1n >> $@/steps
	$(CMD_MSG) "calculate summaries"
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --column=6,11 < $@/steps |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --logscale=xy --legend=time,probe,refine
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=6,11,16,19 --headers=probe,refine,result,region < $@/steps | grep -v "#" > $@/times
	$(CMD_LOG) "processing times for step5"
	awk 'BEGIN{ a = 60 * 60; } \
		/sum/ { printf("time spent in\n"); \
                     printf("probing predictions:      %10i seconds = %8i hours (%5.2f%%)\n", $$2, $$2/a, 100*$$2/$$5); \
		     printf("refinement of prediction: %10i seconds = %8i hours (%5.2f%%)\n", $$3, $$3/a, 100*$$3/$$5); \
		     printf("processing of prediction: %10i seconds = %8i hours (%5.2f%%)\n", $$4-($$2+$$3), ($$4-($$2+$$3))/a, 100*($$4 - ($$2 + $$3))/$$5); \
		     printf("prediction:               %10i seconds = %8i hours (%5.2f%%)\n", $$4, $$4/a,  100*$$4/$$5); \
		     printf("processing of regions:    %10i seconds = %8i hours (%5.2f%%)\n", $$5-$$4, ($$5-$$4)/a, 100*($$5-$$4)/$$5); \
		     printf("overall:                  %10i seconds = %8i hours (%5.2f%%)\n", $$5, $$5/a, 100*$$5/$$5); };' \
	< $@/times $(TOLOG)
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2,7,12,17,18 --headers=probe,refine,result,region,total < $@/steps | grep -v "#" > $@/runs
	$(CMD_LOG) "processing steps for step5"
	awk 'BEGIN{ a = 60 * 60; } \
		/count/ { count=$$2; }; \
		/sum/ { printf("number of probes:      %10i\n", $$2); \
			printf("number of refinements: %10i\n", $$3); \
			printf("number of results:     %10i\n", $$4); \
			printf("number of steps:       %10i (%5.2f%% of maximum %i) ", $$5, 100*$$5/$$6, $$6);  \
			printf("(%6.2f%% above minimum %i)\n", 100*$$5/count, count); }' \
	< $@/runs $(TOLOG)
	$(CMD_MSG) "calculate before/after"
	gunzip < step5.graph.gz | grep -v "#" |\
	sort -k4,4n -k1,1n -k2,2n -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--min-margin=$(PARAM_PREDICTION_MIN_MARGIN) \
	--default-margin=$(PARAM_PREDICTION_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--output-pattern=step5.dir/step5_%06i.chunk \
	--format=keys \
	--input-format=graph \
	--max-region=$(PARAM_PREDICTION_MAX_REGION) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--no-sequence \
	--chunk=$(PARAM_PREDICTION_CHUNKSIZE) > $@/before
	@gunzip < step5.matches.gz |\
	awk ' BEGIN { keep=0; } \
	/^# RESULT: / \
		{ nresults += 1; \
		  split( substr($$3,1,length($$3)-1), a, "="); key = a[2]; \
		  split( substr($$4,1,length($$4)-1), a, "="); nhits = a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); pide = a[2]; \
		  split( substr($$6,1,length($$6)-1), a, "="); coverage = a[2]; \
		  keep = 1; \
		} \
	!/^#/ \
		{ if (keep) { printf("%s\t%i\t%i\t%i\t%s\n", key, nhits, pide, coverage, $$0 ); } \
		  keep = 0; \
	 	} \
	' > $@/after
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py $@/before $@/after > $@/before_after
	rm -f $@/after $@/before
	awk 'BEGIN { printf("key\tcov_b\tpide_b\tcov_a\tpide_a\n"); } \
		/^#/ { next; } \
	     { \
		total += 1; if ($$NF == "na") {not_calculated +=1; next; } else { found += 1 } ; \
		printf("%s\t%s\t%s\t%s\t%s\n", $$1, $$13, $$19, $$40, $$46); \
	     }\
	     END { \
		printf("# %i\t%i\t%i\n", total, found, not_calculated); \
	     }' \
	< $@/before_after > $@/before_after_coverage_pide \


.PHONY: step5.stats test

