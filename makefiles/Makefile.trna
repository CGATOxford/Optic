################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.trna 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Makefile for analysing ncRNA sets from the Rfam predictions.
##
## 1. align the predicted sequences to the Rfam model 
## 2. 


SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/
DIR_HISTOGRAMS=$(CURDIR)/histograms/

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=medium_jobs.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

PARAM_PRIORITY?=-10

PARAM_NUMJOBS?=100

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)
################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=

## species tree
PARAM_SPECIES_TREE?=

PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]
################################################
## directories and database schemas
PARAM_DIR_SRC?=../export/export_clustering.dir/

## schemas to get data from
PARAM_SRC_SCHEMAS?=

PARAM_SEPARATOR?=|

## Options for Gblocks
## Here: allow up to half the sequence to have gaps
PARAM_STEP1_GBLOCKS_OPTIONS?=-b5=h


################################################
# Section parameters: end
################################################

FILES_REQUISITES=input.map input.fasta input.cm

################################################
GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`

all: nrdb.fasta reps.fasta \
	input.stk reps.stk \
	input_refined.stk reps_refined.stk

nrdb.fasta: input.fasta
	$(PRELOG)
	@nrdb -o $@ -d";" $^ 2> $@.log
	$(EPILOG)

reps.fasta: nrdb.fasta
	$(PRELOG)
	@perl -p -e "s/;.*//;" < $^ > $@
	$(EPILOG)

## align sequences in fasta file to rfam model in input.cm
## run them through mali2mali, so that they are formatted for
## viewing in emacs
%.stk: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	cmalign -o $@_tmp input.cm $*.fasta < /dev/null >  $@.log 
	@python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--input-format=stockholm --output-format=stockholm --verbose=0 \
	< $@_tmp > $@
	@rm -f $@_tmp
	$(EPILOG)

## Note: while stdin for muscle works, stdout does not.
%_refined.stk: %.stk
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"python $(DIR_SCRIPTS_TOOLS)mali2mali.py -i stockholm -o fasta -v 0 < $^ | \
	muscle -refine -log $@.log -quiet -out $@_tmp; \
	python $(DIR_SCRIPTS_TOOLS)mali2mali.py -i fasta -o stockholm -v 0 --method=map-annotation --parameters=$^ \
	< $@_tmp > $@"
	@rm -f $@_tmp
	$(EPILOG)


###############################################################################
mali.prepare: reps.fasta
	$(MAKE) mali.dir
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.py \
	--map=input.map \
	--output-pattern="mali.dir/cluster_%s.dir/cluster_%s.fasta" \
	< $^ > $@
	@for dir in mali.dir/cluster_*.dir; do \
		ln -s ../Makefile $${dir}/Makefile; \
	done
	$(EPILOG)

mali.run: 
	$(PRELOG)
	$(MAKE) -k -j$(PARAM_NUMJOBS) -C mali.dir $@-hook
	@touch $@
	$(EPILOG)

MALI_TARGETS=$(wildcard cluster*.dir)

.PHONY: $(MALI_TARGETS) mali.run-hook
$(MALI_TARGETS): 
	$(MAKE) -C $@ mali.run-subhook

mali.run-hook: $(MALI_TARGETS)

MALI_SUB_TARGETS=$(wildcard cluster_*.fasta)

mali.run-subhook: $(MALI_SUB_TARGETS:%.fasta=%.tcoffee)

%.tcoffee : %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) t_coffee \
	$*.fasta -output=clustalw,fasta_aln < /dev/null > $@ 2>&1
	$(EPILOG)


include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
CMD_REMOTE_SUBMIT+=-v HOME_4_TCOFFEE=/tmp

