################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step6 2011 2008-07-04 10:40:51Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
# predict transcripts for likely paralogous matches
##############################################################################
step6: step6.prepare step6.run step6.finish
	$(EPILOG)
	@touch $@

##############################################################################
## parallel prediction execution of representatives
## set SKIP_CHECK_PREDICTION, if you want to skip the 
## update of prediction results
STEP6_QUERIES=$(wildcard *.chunk)
ifndef PARAM_SKIP_CHECK_PREDICTION 
STEP6_TARGETS=$(STEP6_QUERIES:%.chunk=%.matches)
endif

STEP6_PREDICTION_OPTIONS=$(PARAM_STEP6_OPTIONS) \
	--genome-file=../$(PARAM_INPUT_GENOME) \
	--exons=../$(PARAM_INPUT_EXONS) \
	--format=graph \
	-

##############################################################################
## roll back to beginning of this step.
step6.rollback:
	$(PRELOG)
	$(MAKE) step6.clean
	@rm -f step6.{prepare,run,finish,matches,predictions,load}
	@rm -f step6*
	$(EPILOG)

##############################################################################
## Step 5.0: prepare representatives alignemnts
##	-> massage boundaries as transcripts do not match completely, add something to the beginning
##		and end $(PARAM_PREDICTION_MARGIN)
##	-> split the peptides files into individual files.
##############################################################################
## for efficient processing, exonerate.predictions should be sorted by genomic region.
## which the output from exonerate.predictions not necessarily is.
step6.prepare: step5 step6.graph.gz step6.split
	$(EPILOG)
	@touch $@

step6.graph.gz: step5
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"gunzip < step4.predictions.gz |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/regions2graph.py \
	$(PYTHON_OPTIONS) \
	--min-score=$(PARAM_STEP6_GRAPH_MIN_SCORE) \
	--join-regions=$(PARAM_STEP6_GRAPH_JOIN_REGIONS) \
	--join-regions-max-coverage=$(PARAM_STEP6_GRAPH_JOIN_REGIONS_MAX_COVERAGE) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--verbose=2 \
	--conserve-memory \
	--log=$@.log \
	--filter-regions=step5.predictions.gz$(PARAM_STEP6_FILTER_REGIONS) \
	--overlap-min-score=$(PARAM_STEP6_GRAPH_OVERLAP_MIN_SCORE) \
	--overlap-min-coverage=$(PARAM_STEP6_GRAPH_OVERLAP_MIN_COVERAGE) \
	--overlap-max-coverage=$(PARAM_STEP6_GRAPH_OVERLAP_MAX_COVERAGE) \
	--overlap-min-identity=$(PARAM_STEP6_GRAPH_OVERLAP_MIN_IDENTITY) |\
	gzip > $@" < /dev/null
	@touch $@
	$(EPILOG)

step6.split: step6.graph.gz
	$(PRELOG)
	@rm -rf step6.dir
	@mkdir step6.dir
	@ln -s ../Makefile step6.dir/Makefile
	@if test -s patch_step6.graph; then \
		extra_options="--filename-previous=patch_step6.graph"; \
	else \
		extra_options=""; \
	fi; \
	gunzip < $< |\
	grep -v "#" |\
	sort -k4,4n -k1,1n -k2,2n -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	$(PYTHON_OPTIONS) \
	--min-margin=$(PARAM_STEP6_MIN_MARGIN) \
	--default-margin=$(PARAM_STEP6_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--output-pattern=step6.dir/step6_%05i.chunk \
	--format=chunks \
	--input-format=graph \
	--max-region=$(PARAM_STEP6_MAX_REGION) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--no-sequence \
	--chunk=$(PARAM_STEP6_CHUNKSIZE) \
	$${extra_options} \
	> $@; \
	detect_pipe_error;
	$(EPILOG)
	@touch $@

##############################################################################
## Step 5.1: run predictions
##############################################################################
step6.run: step6.prepare 
	$(PRELOG)
	@if test -e step6.dir; then \
		$(MAKE) -C step6.dir -k -j $(PARAM_STEP6_NUMJOBS) $@-hook; \
	fi
	@touch $@
	$(EPILOG)

step6.run-hook : $(STEP6_TARGETS)

step6_%.matches: step6_%.chunk
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py \
		$(PYTHON_OPTIONS) \
		$(STEP6_PREDICTION_OPTIONS) \
	< step6_$*.chunk > $@

##############################################################################
## Step 5.3: collect data and do quality control
##############################################################################
step6.finish: step6.run step6.matches.gz step6.predictions.gz representatives.transcripts step6.check
	@touch $@
	$(EPILOG)

##############################################################################
## Step 5: various statistics targets
##############################################################################
## retrieve execution times
step6.stats: step6.matches.gz
	@if test ! -e $@; then mkdir $@; fi
	$(CMD_MSG) "summarizing steps per region."
	@echo -e "# regn\tprobe\tprobe\tprobe\tprobe\tprobe\trefine\trefine\trefine\trefine\trefine\tresult\tresult\tresult\tresult\tresult\tgraph\tgraph\tgraph\tgraph" > $@/steps
	@echo -e "# regn\tnsect\tnhits\tcov\tpide\ttime\tnsect\tnhits\tcov\tpide\ttime\tnsect\tnhits\tcov\tpide\ttime\truns\ttotal\treason\ttime" >> $@/steps
	@gunzip < $< |\
	awk ' BEGIN { keep=0; } \
	/^## GRAPH: region [0-9]+: starting/ \
		{ keep=1; region=$$4; sub(":","", region); ntotal_runs=$$7; \
			nruns=ntotal_runs; \
			nresults=0; results_time=0; results_nhits=0;\
			best_pide=0; best_coverage=0; \
			nrefines=0; refine_nhits=0;refine_best_pide=0;refine_best_coverage=0;refine_time=0; \
			nprobes=0; probe_nhits=0;probe_best_pide=0;probe_best_coverage=0;probe_time=0;\
			} \
	/^# PROBE: key=/ \
		{ nprobes += 1; \
		  split( substr($$4,1,length($$4)-1), a, "="); \
		  probe_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  probe_best_pide = ( a[2] > probe_best_pide ) ? a[2] : probe_best_pide; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  probe_best_coverage = ( a[2] > probe_best_coverage ) ? a[2] : probe_best_coverage; \
		  split( $$8,a,"="); probe_time += a[2]; \
		} \
	/^# REFINE: running / \
		{ nrefines += $$4; } \
	/^# REFINE: key=/ \
		{ \
		  split( substr($$4,1,length($$4)-1), a, "="); \
		  refine_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); \
		  refine_best_pide = ( a[2] > refine_best_pide ) ? a[2] : refine_best_pide; \
		  split( substr($$6,1,length($$6)-1), a, "="); \
		  refine_best_coverage = ( a[2] > refine_best_coverage ) ? a[2] : refine_best_coverage; \
		  split( $$7,a,"="); refine_time += a[2];\
		} \
	/^# RESULT: / \
		{ nresults += 1; \
		  split( substr($$4,1,length($$4)-1), a, "="); results_nhits += a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); best_pide = ( a[2] > best_pide ) ? a[2] : best_pide; \
		  split( substr($$6,1,length($$6)-1), a, "="); best_coverage = ( a[2] > best_coverage ) ? a[2] : best_coverage; \
		  split( $$7,a,"="); results_time += a[2]; \
	 	} \
	/^# EVAL: status=/ \
		{ reason=$$0; sub("# EVAL: status=", "", reason); sub(" is_ok=True", "", reason); } \
	/^## GRAPH: skipping entry/ \
		{ if (keep) \
			{\
				split( substr( $$0, match($$0, "[0-9]")), a, "/"); \
				nruns = a[1]-1; \
			} \
		 keep = 0;} \
	/^## GRAPH: region [0-9]+: finished in [0-9]+ seconds/ \
		{ time=$$7; \
		  printf("%s\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%5.2f\t%5.2f\t%i\t%i\t%i\t%i\t%s\n", \
			region, \
			nprobes, probe_nhits, probe_best_pide, probe_best_coverage, probe_time, \
			nrefines, refine_nhits, refine_best_pide, refine_best_coverage, refine_time, \
			nresults, results_nhits, best_pide, best_coverage, results_time, \
			nruns, ntotal_runs, time, reason); \
		} \
	' |\
	sort -k1,1n >> $@/steps
	$(CMD_MSG) "calculate summaries"
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --column=6,11 < $@/steps |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py --logscale=xy --legend=time,probe,refine
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=6,11,16,19 --headers=probe,refine,result,region < $@/steps | grep -v "#" > $@/times
	$(CMD_LOG) "processing times for step6"
	awk 'BEGIN{ a = 60 * 60; } \
		/sum/ { printf("time spent in\n"); \
                     printf("probing predictions:      %10i seconds = %8i hours (%5.2f%%)\n", $$2, $$2/a, 100*$$2/$$5); \
		     printf("refinement of prediction: %10i seconds = %8i hours (%5.2f%%)\n", $$3, $$3/a, 100*$$3/$$5); \
		     printf("processing of prediction: %10i seconds = %8i hours (%5.2f%%)\n", $$4-($$2+$$3), ($$4-($$2+$$3))/a, 100*($$4 - ($$2 + $$3))/$$5); \
		     printf("prediction:               %10i seconds = %8i hours (%5.2f%%)\n", $$4, $$4/a,  100*$$4/$$5); \
		     printf("processing of regions:    %10i seconds = %8i hours (%5.2f%%)\n", $$5-$$4, ($$5-$$4)/a, 100*($$5-$$4)/$$5); \
		     printf("overall:                  %10i seconds = %8i hours (%5.2f%%)\n", $$5, $$5/a, 100*$$5/$$5); };' \
	< $@/times $(TOLOG)
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2,7,12,17,18 --headers=probe,refine,result,region,total < $@/steps | grep -v "#" > $@/runs
	$(CMD_LOG) "processing steps for step6"
	awk 'BEGIN{ a = 60 * 60; } \
		/count/ { count=$$2; }; \
		/sum/ { printf("number of probes:      %10i\n", $$2); \
			printf("number of refinements: %10i\n", $$3); \
			printf("number of results:     %10i\n", $$4); \
			printf("number of steps:       %10i (%5.2f%% of maximum %i) ", $$5, 100*$$5/$$6, $$6);  \
			printf("(%6.2f%% above minimum %i)\n", 100*$$5/count, count); }' \
	< $@/runs $(TOLOG)
	$(CMD_MSG) "calculate before/after"
	grep -v "#" step6.graph |\
	sort -k4,4n -k1,1n -k2,2n -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--min-margin=$(PARAM_STEP6_MIN_MARGIN) \
	--default-margin=$(PARAM_STEP6_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--output-pattern=step6.dir/step6_%06i.chunk \
	--format=keys \
	--input-format=graph \
	--max-region=$(PARAM_STEP6_MAX_REGION) \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--no-sequence \
	--chunk=$(PARAM_STEP6_CHUNKSIZE) > $@/before
	@awk ' BEGIN { keep=0; } \
	/^# RESULT: / \
		{ nresults += 1; \
		  split( substr($$3,1,length($$3)-1), a, "="); key = a[2]; \
		  split( substr($$4,1,length($$4)-1), a, "="); nhits = a[2]; \
		  split( substr($$5,1,length($$5)-1), a, "="); pide = a[2]; \
		  split( substr($$6,1,length($$6)-1), a, "="); coverage = a[2]; \
		  keep = 1; \
		} \
	!/^#/ \
		{ if (keep) { printf("%s\t%i\t%i\t%i\t%s\n", key, nhits, pide, coverage, $$0 ); } \
		  keep = 0; \
	 	} \
	' < step6.matches > $@/after
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py $@/before $@/after > $@/before_after
	rm -f $@/after $@/before
	awk 'BEGIN { printf("key\tcov_b\tpide_b\tcov_a\tpide_a\n"); } \
		/^#/ { next; } \
	     { \
		total += 1; if ($$NF == "na") {not_calculated +=1; next; } else { found += 1 } ; \
		printf("%s\t%s\t%s\t%s\t%s\n", $$1, $$13, $$19, $$40, $$46); \
	     }\
	     END { \
		printf("# %i\t%i\t%i\n", total, found, not_calculated); \
	     }' \
	< $@/before_after > $@/before_after_coverage_pide \


.PHONY: step6.stats test

