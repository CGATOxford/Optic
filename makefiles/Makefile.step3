################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step3 2167 2008-09-17 14:18:15Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## run exonerate in scanning mode to find putative genic regions.
## Only representative transcripts are used as queries.
##############################################################################
step3: step3.prepare step3.run step3.finish
	$(EPILOG)
	@touch $@

##############################################################################
## parallel exonerate execution
STEP3_QUERIES=$(wildcard step3_*.chunk)
STEP3_TARGETS=$(STEP3_QUERIES:%.chunk=%.matches)

EXONERATE_OPTIONS=$(PARAM_EXONERATE_OPTIONS) \
		-Q protein -T dna --softmasktarget TRUE \
		--showvulgar FALSE --showsugar FALSE \
		--showcigar FALSE --showalignment FALSE \
		--showquerygff FALSE  --showtargetgff FALSE \
		--ryo 'diy\t%S\t%ql\t%r\t%pi\t%ps\t%V\n'
##############################################################################



##############################################################################
## split input file of peptides into chunks and 
##	prepare pairs between peptides and genomic segments for the cluster
##############################################################################
step3.prepare: step2 step3.peptides_split step3.genomes_split
	$(PRELOG)
	-@mkdir step3.dir
	@rm -f step3.dir/Makefile
	@ln -s ../Makefile step3.dir/Makefile
	@(cd step3.dir; \
	rm -f *_vs_*; \
	for peptides in step3_query_*.fasta; do \
		for genome in step3_sbjct_*.fasta; do \
			touch $${peptides}_vs_$${genome}.chunk; \
		done; \
	done) && touch $@;
	$(EPILOG)
	@touch $@

step3.peptides_split: step2
	$(PRELOG)
	-@mkdir step3.dir
	@rm -f step3.dir/step3_query_*.fasta
	@perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
	-p step3.dir/step3_query_ \
	-s .fasta $(PARAM_EXONERATE_PEPTIDES_CHUNKSIZE) \
	< representatives.fasta > $@
	$(EPILOG)

step3.genomes_split: step2
	$(PRELOG)
	-@mkdir step3.dir
	@rm -f step3.dir/step3_sbjct*
	@python $(DIR_SCRIPTS_GENEPREDICTION)split_genomic_fasta_file.py \
		$(PYTHON_OPTIONS) \
		--extend=$(PARAM_EXONERATE_EXTEND) \
		--chunk-size=$(PARAM_EXONERATE_GENOME_CHUNKSIZE) \
		--format=fasta \
		--sequence=$(PARAM_INPUT_GENOME).fasta \
		--output-pattern=step3.dir/step3_sbjct_%06i.fasta > $@ 
	$(EPILOG)

##############################################################################
## Step 3.1: run exonerate to find gene locations
##############################################################################
step3.run: step3.prepare 
	$(PRELOG)
	@if [ -e step3.dir ]; then \
		$(MAKE) -C step3.dir -k -j $(PARAM_EXONERATE_NUMJOBS) $@-hook; \
	fi
	$(EPILOG)
	touch $@

step3.run-hook : $(STEP3_TARGETS)

## run exonerate and convert prediction based format
step3_%.matches: step3_%.chunk 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	$(CMD_BENCHMARK) \
	"exonerate $(EXONERATE_OPTIONS) \
		--query step3_$(CMD_PREFIX_PEPTIDES) \
		--target $(CMD_PREFIX_GENOME) \
	|\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/exonerate2regions.py \
		--force-contiguous \
		--peptides=step3_$(CMD_PREFIX_PEPTIDES) \
		--genome=$(CMD_PREFIX_GENOME) \
		--max-intron=$(PARAM_EXONERATE_MAX_INTRON) \
		--correct-offset \
		--dump" \
	< /dev/null > $@
	$(EPILOG)

##############################################################################
## Step 3.2: combine transcript predictions to give matching regions
##############################################################################
step3.finish: step3.run step3.predictions.gz step3.check
	$(EPILOG)
	@touch $@

step3.predictions.gz: step3.run
	$(PRELOG)
	@find step3.dir -name "step3_*.matches" -exec cat {} \; |\
	awk '!/^#/ { printf("%i\t", ++i); } {print;}' | gzip > $@
	$(EPILOG)

##############################################################################
## Step 3.3: Quality control
##############################################################################
step3.check: step3.predictions.gz representatives.transcripts
	$(PRELOG)
	@gunzip < $< | grep -v "#" | cut -f 2 | sort | uniq > $@.matches_transcripts
	@diff $@.matches_transcripts representatives.transcripts |\
	 grep ">" | perl -pe "s/> //" > $@.missed_transcripts
	@echo "## Step3 - scanning for genic regions" $(TOLOG) 
	@total=`wc -l < representatives.transcripts`; \
	aligned=`wc -l < $@.matches_transcripts` ;\
	missed=`wc -l < $@.missed_transcripts`; \
	printf "number of submitted transcripts: %8i\n" $${total} $(TOLOG); \
	printf "number of aligned   transcripts: %8i (%3i%%)\n" \
		$${aligned} $$((100*aligned/total)) \
		$(TOLOG); \
	printf "number of missed    transcripts: %8i (%3i%%)\n" \
		$${missed} $$((100*missed/total)) $(TOLOG); \
	printf "number of aligned   pairs:       %8i\n" `gunzip < $< | grep -c '#'` $(TOLOG)
	@touch $@
	$(CMD_LOG) "$@ finished."

##############################################################################
## Step 3: various management targets
##############################################################################
## rollback to start of step
step3.rollback:
	$(PRELOG)
	$(MAKE) step3.clean
	rm -f step3.{peptides_split,genomes_split,prepare,matches,predictions.gz}
	rm -f step3*

## recall predictions from exonerate
step3.recall: step3.predictions.gz
	$(PRELOG)
	gunzip < $< | grep "# received" |\
	perl -p -e "s/# received\t//" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/exonerate2regions.py \
	--force-contiguous \
	--peptides=peptides.fasta \
	--max-intron=$(PARAM_EXONERATE_MAX_INTRON) \
	--format=predictions \
	--correct-offset > $@

## display runs that have not finished
step3.show-unfinished:
	@for file in step3.dir/step3_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

## remove runs that have not finished
step3.remove-unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e step3.dir ]; then \
	    for file in step3.dir/step3_*.matches; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 ]] ; then \
			    echo "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."
	$(EPILOG)

## remove dubious runs (execution time of 0 seconds).
step3.remove-dubious:
	$(PRELOG)
	@for file in step3.dir/step3_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished in 0 seconds"; \
		if [[ $$? == 0 ]] ; then \
			echo "recreating $$file"; \
			touch `echo $$file | perl -p -e "s/matches/chunk/"`; \
		fi \
	done

## show progress report
step3.show-progress:
	$(CMD_MSG) "calculating progress..."
	@echo "# scanning status at `date`" >> step3.progress
	@find step3.dir -name "*.matches" -exec tail -n 10 {} \; | grep "finished" |\
	perl -p -e "s/.*time=//; s/seconds.*//g; s/[^0-9\n]//g" |\
	awk -v total="`find step3.dir -name "*.chunk"| wc -l`" '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step3.progress
	@tail step3.progress

##############################################################################
## Step 3: various statistics targets
##############################################################################
## retrieve execution times
step3.stats: step3.predictions.gz
	$(PRELOG)
	@if test ! -e $@; then mkdir $@; fi
	$(CMD_MSG) "summarizing times."
	@gunzip < $< | grep "job finished" | cut -d " " -f 5 > $@/steps
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=1 < $@/steps | grep -v "#" > $@/times
	$(CMD_LOG) "processing times for step3"
	@awk 'BEGIN{ a = 60 * 60; } \
		/sum/ { printf("time spent in\n"); \
                     printf("prediction and parsing  : %10i seconds = %8i hours (%5.2f%%)\n", $$2, $$2/a, 100*$$2/$$2); \
		}' \
	< $@/times $(TOLOG)
	$(EPILOG)

## GFF output of this step.
step3.gff: step3.predictions.gz
	$(PRELOG)
	@gunzip < $< | grep -v "#" |\
	sort -k3,3 -k4,4 |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predictions2cds.py \
	--format=gff-exon --forward-coordinates > $@
	$(EPILOG)

## clean up unnecessary files
step3.clean:
	$(PRELOG)
	@rm -rf step3.dir
	$(EPILOG)

.PHONY: step3.stats

