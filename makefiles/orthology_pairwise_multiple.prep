{{script}}import os, sys, time; datetime = time.asctime(time.localtime(time.time())){{endscript}}
{{script}}
def insert_test():
    return "insert_test"
def insert_file(f):
    return "".join(open(f,"r").readlines())
def insert_table(f):
    l = []
    for x in open(f,"r").readlines():
	if x[0] == "#": continue
	l.append( "| " + " | ".join(x[:-1].split("\t")) + " |" )
    return "\n".join(l)
def __insert_categories_collapsed( categories, header, level, vars, templates = ()):
    l = []
    if len(categories) == 0: return l
    l.append("---" + "+" * level + " " + header + " " + ":".join(vars))
    l.append("<TABLE>")
    if len(categories) == 1:
        l.append("<TR>")
        for a in categories[0]:
            l.append(("<TH>%s</TH>" % a ) * len(templates))
        l.append("</TR><TR>")
        for a in categories[0]:
            for f,s in templates:
                l.append("<TD>\n" + f(s % ((vars) + (a,))) + "\n</TD>")
        l.append("</TR>")
    l.append("</TABLE>")
    return l
def __insert_categories( categories, header, level, vars, templates = (), collapse_level = 1):
    """recursively print subdirectories."""
    l = []
    l.append("---" + "+" * level + " " + header + " " + ":".join(vars))
    if len(categories) == 0:
        l.append("<TABLE>\n<TR>")
        for f,s in templates:
            l.append("<TD>\n" + f(s % (vars)) + "\n</TD>")
        l.append("</TR></TABLE>")	
        return l
    for a in categories[0]:
        if collapse_level <= 1:
            l += __insert_categories_collapsed( categories[1:], header, level + 1, vars + (a,), templates )
        else:
            l += __insert_categories( categories[1:], header, level + 1, vars + (a,), templates, collapse_level - 1 )
    return l
def insert_categories( categories, header, level, templates = (), collapse_last_level = True):
    if collapse_last_level:
        collapse_level = len(categories) - 1
    else:
        collapse_level = len(categories) + 1
    return "\n".join(__insert_categories( categories, header, level, (), templates, collapse_level ) )
{{endscript}}

---+ Pairwise orthology between all species.

Date added at {{datetime}}

%TOC%

---++ Summary

---+++ Kaks results

{{eval}}insert_table( "orthologs.check" ){{endeval}}

---++ Orphans

---+++ Overview

This plot/matrix shows the number of orphans in each pairwise comparison.

Value = number of orphans in col in row<->col comparison.

<TABLE>
<TR><TD>
{{eval}}insert_table( "orphans_counts.matrix" ){{endeval}}
</TD><TD>
%ATTACHURL%/orphans_counts.png
</TD></TR><TABLE>

This plot/matrix shows the number of orphans in each pairwise comparison
normalized by the number genes.
Value = number of orphans in col in row<->col comparison.

<TABLE>
<TR><TD>
{{eval}}insert_table( "orphans_percent.matrix" ){{endeval}}
</TD><TD>
%ATTACHURL%/orphans_percent.png
</TD></TR>
</TABLE>

---+++ Common orphans

Number of shared orphans (with respect to D. melanogaster).

<TABLE>
<TR><TD>
{{eval}}insert_table( "orphans_common_counts.matrix" ){{endeval}}
</TD><TD>
%ATTACHURL%/orphans_common_counts.png
</TD></TR>
</TABLE>

Number of shared orphans (with respect to D. melanogaster).
Normalized by column

<TABLE>
<TR><TD>
{{eval}}insert_table( "analysis.dir/orphans_common_percent.matrix" ){{endeval}}
</TD><TD>
%ATTACHURL%/orphans_common_percent.png
</TD></TR>
</TABLE>

---++ Orthologs 

---+++ 1 to 1s

Number of 1:1 orthologous genes.

{{eval}}insert_table( "1_to_1s_counts.matrix"){{endeval}}

Number of 1:1 orthologous genes normalized by the number of assigned genes.
Normalization is done per row.

{{eval}}insert_table( "1_to_1s_percent_assigned.matrix"){{endeval}}

Number of 1:1 orthologous genes normalized by the number of all genes.
Normalization is done per row.

{{eval}}insert_table( "1_to_1s_percent_all.matrix"){{endeval}} 

---+++ Pairwise ks per transcript/gene

---++++ Summaries

<TABLE>
<TR><TH></TH><TH>Transcripts</TH><TH>Genes</TH></TR>
<TR><TH>Mean</TH><TD>
{{eval}}insert_table( "orthologs_ks.mean.matrix" ){{endeval}}
</TD><TD>
{{eval}}insert_table( "orthologs_ks_genes.mean.matrix" ){{endeval}}
</TD></TR>
<TR><TH>Median</TH><TD>
{{eval}}insert_table( "orthologs_ks.median.matrix" ){{endeval}}
</TD><TD>5A
{{eval}}insert_table( "orthologs_ks_genes.mean.matrix" ){{endeval}}
</TD></TR>
</TABLE>

<TABLE>
<TR><TH></TH><TH>Transcripts</TH><TH>Genes</TH></TR>
<TR><TH>Mean</TH><TD>
%ATTACHURL%/orthologs_ks.mean.png
</TD><TD>
%ATTACHURL%/orthologs_ks_genes.mean.png
</TD></TR>
<TR><TH>Median</TH><TD>
%ATTACHURL%/orthologs_ks.median.png
</TD><TD>
%ATTACHURL%/orthologs_ks_genes.mean.png
</TD></TR>
</TABLE>

---++++ Histograms

| Genome | Transcript bases ks | Gene based ks |
{{for x in genomes.split(",")}}
      {{eval}}
      "| %s | %%ATTACHURL%%/orthologs_ks.hists_%s.hist.png | %%ATTACHURL%%/orthologs_ks_genes.hists_%s.hist.png |\n" % (x,x,x)
      {{endeval}}
{{endfor}}

---++ Duplications

---+++ Counts

{{eval}}insert_categories(
    ( ("ka","ks"),
      locations.split(","),
      categories.split(",")),
    "Counts of duplications",
    3,
    ( (insert_table, 'duplications_counts_%s_%s_%s.matrix',),
      (str, '%%ATTACHURL%%/duplications_counts_%s_%s_%s.matrix.png')),
    True)
{{endeval}}

---+++ Histogram of ks

{{eval}}insert_categories(
    ( ("ka","ks"),
      genomes.split(","),
      locations.split(","),
      categories.split(",") ), 
    "Ks between duplications",
    3,
    ((str, "%%ATTACHURL%%/duplications_counts_%s_%s_%s_%s.hist.png"),),
    True)
{{endeval}}

---+++ GO analysis

---++++ Sample counts

{{eval}}insert_categories(
    ( ("ka","ks"),
      ("nojunk", "withjunk"), 
      ("0","1","2") ),
    "GO sample/background counts",
    3,
    ( (insert_table, 'master_duplications_%s_%s.go.counts_%s'),),
    True)
{{endeval}}

---++++ Images

{{eval}}insert_categories(
    ( ("ka","ks"),
      ("nojunk", "withjunk"), 
      ("0","1","2") ),
    "GO over/underrepresntation",
    3,
    ( (str, '%%ATTACHURL%%/master_duplications_%s_%s.go.ps_%s'),),
    True)
{{endeval}}


