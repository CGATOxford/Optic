################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step1 1170 2007-03-23 08:55:31Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## Step 1: Masking and filtering
##############################################################################

ifdef PARAM_DO_INDEX
STEP1_EXTRA_TARGETS=step1.index
endif

step1: peptides_masked.fasta contig_sizes contig_sizes.load $(STEP1_EXTRA_TARGETS)
	$(CMD_LOG) "$@ completed."
	@touch $@

## Peptide sequences: 
##         mask non-standard amino acids 
##	   mask peptide sequences using seg
## note: seg introduces an empty line after every entry, which I get rid off.
peptides_masked.fasta: $(PARAM_INPUT_PEPTIDES)
	$(CMD_LOG) "$@ started."
	@perl -pe "if (!/^>/) { s/[^\nACDEFGHIKLMNPQRSTVWXYZ]/X/g; }" < $(PARAM_INPUT_PEPTIDES) |\
	perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl -u $(PARAM_FILTER_MAX_SEQUENCE_LENGTH) > $@.tmp; \
	detect_pipe_error
	@seg $@.tmp $(PARAM_SEG_OPTIONS) |\
	perl -pe "s/^\n//;" > $@; \
	detect_pipe_error;
	@rm -f $@.tmp
	$(CMD_LOG) "$@ completed."

## - get a table of genome size
## - if PARAM_CORRECT_GENOME_FILES is set, substitute X for N (exonerate does not tolerate Xs)
contig_sizes: $(PARAM_INPUT_GENOME).fasta
	$(CMD_LOG) "$@ started."
	@echo -e "# contig\tsize" > $@
	@file=$(PARAM_INPUT_GENOME).fasta; \
	if [ -n "$(PARAM_CORRECT_GENOME_FILES)" ]; then \
		echo "masking [Xx] in $${file}" $(TOLOG); \
		perl -p -i -e "if (!/^>/) {tr/Xx/Nn/;}" $$file; \
	fi; \
	awk 'BEGIN {size=0; id=""; offset=0; } \
		/>/ { if (id) { printf("%s\t%i\t%i\n",id,size,offset); } \
			id = substr($$1,2); size = 0; } \
		/range=/ { p=match($$0, "range=[^ ]+"); \
			   r=substr( $$0, RSTART, RLENGTH); \
			   l=match(r, ":.*-"); \
			   offset=substr( r, RSTART+1, RLENGTH-1); } \
		!/>/ { size+=length($$0); } \
	END { if (id) { printf("%s\t%i\t%i\n", id, size,offset); } }' < $$file >> $@
	$(CMD_LOG) "$@ completed."

contig_sizes.load: contig_sizes
	$(CMD_LOG) "$@ started."
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CONTIGS);" > /dev/null
	@grep -v "#" contig_sizes |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_CONTIGS) FROM STDIN WITH NULL AS 'na'";
	@touch $@
	$(CMD_LOG) "$@ completed."

