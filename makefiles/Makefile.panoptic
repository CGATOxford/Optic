################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.panoptic 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
##
## Makefile for running panoptic
## 
## Profile-profile comparison
##
##
################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=panoptic

PARAM_SCHEMAS?=mm_v2 ww_v1 ff_v6 yy_v1

#################################################
## Table names for source data
PARAM_TABLE_NAME_ORTHOLOG_GROUPS?=groups

## table name with multiple alignments
PARAM_TABLE_NAME_MALIS?=malis_genes_aa

## table name with members of orthologous groups
PARAM_TABLE_NAME_ORTHOLOG_GROUPS_MEMBERS?=groups_members

## table name with ancestral sequences
PARAM_TABLE_NAME_ANCESTRAL_SEQUENCES?=ancestral_sequences

PARAM_SEPARATOR?=|

#################################################
#################################################
#################################################
## BLASTP options
#################################################
## number of blast jobs to run
PARAM_STEP1_NUMJOBS?=$(PARAM_NUM_JOBS)

## number of queries per blast job
PARAM_STEP1_CHUNKSIZE?=100

## make sure to turn on filtering: -F T
PARAM_STEP1_BLASTP_OPTIONS?=-e 1e-3 -v 5000 -b 5000 -F T

## add bit scores and sequence lengths
PARAM_STEP1_BLASTP_PARSING?=--ends --table --len --noheader --log --bits
PARAM_STEP1_BLASTP_NUMFIELDS?=14


## number of profile-profile alignments per job
PARAM_STEP2_CHUNKSIZE?=10000

################################################
## profile to use
PARAM_PROFILE_SUFFIX?=pdb
PARAM_PROFILE_GENERATOR?=$(DIR_SCRIPTS)ProfileLibrary.py --weightor=HenikoffKimmen

PARAM_PROFILE_SUFFIX=cdb
PARAM_PROFILE_GENERATOR=$(DIR_SCRIPTS)ProfileLibraryCompass.py

################################################
# Section parameters: end
################################################

################################################
################################################
################################################
## prepare: build profile libraries
################################################
PROFILE_LIBRARIES?=$(PARAM_SCHEMAS:%=%.$(PARAM_PROFILE_SUFFIX))

prepare: $(PROFILE_LIBRARIES)

################################################
################################################
################################################
## get multiple alignments from database
################################################
%.profiles:
	$(PRELOG)
	@$(PSQL_SELECT) \
	"SELECT 1, a.alignment, LENGTH(a.alignment), '$*$(PARAM_SEPARATOR)' || g.group_id \
		FROM \
		$*.$(PARAM_TABLE_NAME_ORTHOLOG_GROUPS) AS g, \
		$*.$(PARAM_TABLE_NAME_ORTHOLOG_GROUPS_MEMBERS) AS m, \
		$*.$(PARAM_TABLE_NAME_MALIS) AS a \
		WHERE \
			m.gene_id = a.gene_id AND \
			m.schema = a.schema AND \
			m.group_id = g.group_id \
		ORDER BY g.group_id" |\
	python $(DIR_SCRIPTS_TOOLS)malis2profiles.py > $@
	$(EPILOG)

################################################
################################################
################################################
## build individual profiles
################################################
%.$(PARAM_PROFILE_SUFFIX): %.profiles
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(PARAM_PROFILE_GENERATOR) \
		--prefix=$* \
		--action=create \
		--verbose=2 \
	< $< > $@.log
	$(EPILOG)

################################################
################################################
################################################
## combine profiles into a single file
################################################
all.$(PARAM_PROFILE_SUFFIX): $(PROFILE_LIBRARIES)
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(PARAM_PROFILE_GENERATOR) \
		--prefix=$(basename $@) \
		--action=merge \
	$(basename $^) \
	< /dev/null > $@.log
	$(EPILOG)

%.counts: %.$(PARAM_PROFILE_SUFFIX)
	$(PRELOG)
	@python $(PARAM_PROFILE_GENERATOR) \
		--prefix=$* \
		--action=stats \
	> $@
	$(EPILOG)

test_%:
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS)profile_vs_profile.py --query=yy_v1 --self-compare --log=$@.log \
	< /dev/null > $@.out

################################################
################################################
################################################
## Step 1: All-vs-all blast of ancestral sequences
################################################
step1.prepare: step1.ancestral.fasta 
	$(PRELOG)
	@rm -rf step1.dir
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
		-m blast \
		-d step1.dir \
		-p $(PARAM_PROJECT_NAME)_blast \
		PARAM_BLASTP_NUMJOBS=$(PARAM_STEP1_NUMJOBS) \
		PARAM_BLASTP_CHUNKSIZE=$(PARAM_STEP1_CHUNKSIZE) \
		PARAM_BLASTP_OPTIONS="$(PARAM_STEP1_BLASTP_OPTIONS)" \
		PARAM_BLASTP_PARSING="$(PARAM_STEP1_BLASTP_PARSING)" \
		PARAM_BLASTP_NUMFIELDS=$(PARAM_STEP1_BLASTP_NUMFIELDS) \
		PARAM_BLASTP_COMPRESS=1 \
		DIR_TMP=./ \
	> $@
	@ln -s ../step1.ancestral.fasta step1.dir/queries.fasta
	@ln -s ../step1.ancestral.fasta step1.dir/sbjcts.fasta
	$(EPILOG)

step1.run: step1.prepare
	$(PRELOG)
	if test -e step1.dir/Makefile; then \
		$(MAKE) -C step1.dir -k blast; \
	fi
	@touch $@
	$(EPILOG)

step1.finish: step1.links.gz
	$(PRELOG)
	$(CMD_LOG) "links after BLAST run"
	@gunzip < step1.links.gz |\
	perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl $(TOLOG)
	$(EPILOG)

step1: step1.prepare step1.run step1.finish

################################################
################################################
################################################
## Ancestral sequences to compare
################################################
step1.ancestral.fasta:
	$(PRELOG)	
	@rm -f $@
	@for schema in $(PARAM_SCHEMAS); do \
		$(PSQL_SELECT) \
		"SELECT '>$${schema}$(PARAM_SEPARATOR)' || group_id || E'\n' || sequence \
		FROM $${schema}.ancestral_sequences" |\
		python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py -v 0 --method=translate >> $@; \
	done
	$(CMD_LOG) "number of sequences per clade in $@"	
	@grep ">" $@ | perl -p -e "s/>//; s/[$(PARAM_SEPARATOR)].*//" | sort | uniq -c $(TOLOG)
	$(EPILOG)

################################################
################################################
################################################
## Pairwise blast links between ancestral sequences
################################################
## Move file in subdirectory up and link from 
## from original.
step1.links.gz: step1.run
	$(PRELOG)
	@if test -s step1.dir/blast.links.gz; then \
		rm -f $@; \
		mv step1.dir/blast.links.gz $@; \
		ln -s ../$@ step1.dir/blast.links.gz; \
	fi
	@touch $@
	$(EPILOG)

################################################
################################################
################################################
## Step 2: checking BLASTP alignments using profiles
################################################
step2.prepare: step2.pairs


################################################
################################################
################################################
## Step 2: pairs to test. 
##
## Symmetrize blastp results and self-self comparisons 
################################################
step2.pairs: step1.links.gz step1.ancestral.fasta
	$(PRELOG)
	@gunzip < $< |\
	awk '$$1 != $$2 {if ($$1<$$2) { printf("%s\t%s\n", $$1, $$2); } else { printf("%s\t%s\n", $$2, $$1); }}' |\
	sort -T $(DIR_TMP) | uniq > $@
	@awk '/^>/ { a=substr($$1,2); printf("%s\t%s\n", a,a ); }' < step1.ancestral.fasta >> $@
	$(CMD_LOG) "links to test with profile-profile comparison"
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $@ $(TOLOG)
	$(EPILOG)

step2.prepare: step2.pairs
	$(PRELOG)
	@rm -rf step2.dir
	@$(MAKE) step2.dir
	@split -d -a 5 -l $(PARAM_STEP2_CHUNKSIZE) $< step2.dir/step2_ 
	@find step2.dir -name "step2_*" -exec mv {} {}.chunk \;
	@touch $@
	$(EPILOG)

step2.run: step2.prepare
	$(PRELOG)
	@if test -e step2.dir/Makefile; then \
		$(MAKE) -C step2.dir -j $(PARAM_NUM_JOBS) -k $@-hook < /dev/null ; \
	fi
	@touch $@
	$(EPILOG)

step2.finish: step2.links.gz
	$(PRELOG)
	$(CMD_LOG) "links after profile-profile run"
	@gunzip < step2.links.gz |\
	perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl $(TOLOG)
	$(EPILOG)

step2: step2.prepare step2.run step2.finish

STEP2_QUERIES=$(wildcard *.chunk)
STEP2_TARGETS=$(STEP2_QUERIES:%.chunk=%.matches)

step2.run-hook: $(STEP2_TARGETS)

step2_%.matches: step2_%.chunk 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS)profile_vs_profile.py \
		--query=../data.dir/all \
		--self-compare \
		--log=$@.log \
		--alignment-mode=compass \
		--filename-pairs=$< \
	< /dev/null > $@
	$(EPILOG)

################################################
################################################
################################################
## Profile scored blastp links between ancestral sequences
################################################
step2.links.gz: step2.run
	$(PRELOG)
	@find step2.dir -name "*.matches" -exec cat {} \; |\
	gzip > $@
	$(EPILOG)

##############################################################################
## create file with links for orthology assignment
## 	contains normalized bitscore
PARAM_STEP2_MIN_MIN_COVERAGE=0
PARAM_STEP2_MIN_MAX_COVERAGE=0
PARAM_STEP2_MIN_SCORE=0.1
step2.scaled.links.gz: step2.links.gz
	$(PRELOG)
	@rm -f $@.log
	@gunzip < $< > $@.tmp
	@cat $@.tmp | awk '\
	BEGIN \
		{ while (getline < "$@.tmp") { if ($$1 == $$2) { a[$$1] = $$3; } } } \
		$$1 == $$2 { next; } \
		{ ninput++; \
		cova=0; covb=0; \
		if (cova > covb) { maxcov = cova; mincov = covb; } \
		else             { maxcov = covb; mincov = cova; } \
		if (!($$1 in a)) { nerrors++;printf("error: %s not found in: %s\n", $$1, $$0) >> "$@.log"; next }; \
		if (!($$2 in a)) { nerrors++;printf("error: %s not found in: %s\n", $$2, $$0) >> "$@.log"; next }; \
		score = (a[$$1] < a[$$2]) ? ($$3 / a[$$1]) : ($$3 / a[$$2]); \
		if ( (mincov < $(PARAM_STEP2_MIN_MIN_COVERAGE)) || (maxcov < $(PARAM_STEP2_MIN_MAX_COVERAGE)) ) \
		{ neliminated_coverage++; next; } \
		if (score < $(PARAM_STEP2_MIN_SCORE)) { neliminated_score++; next; } \
		noutput++; score=1.0-score;\
		if ($$1 < $$2) { \
			printf("%s\t%s\t%8.6f\n",\
			$$1,$$2,score);  \
		} else {\
			printf("%s\t%s\t%8.6f\n",\
			$$2,$$1,score); \
		} \
	      } \
	END \
		{ printf("# ninput=%i, noutput=%i, neliminated_coverage=%i, neliminated_score=%i, nerrors=%i, ", \
			ninput, noutput, neliminated_coverage, neliminated_score, nerrors) >> "$@.log"; } \
	' | sort | uniq |\
	gzip > $@
	$(CMD_LOG) "number of pairs with negative scores: `gunzip < $@ | awk '$$3 < 0' | wc -l`"
	@rm -f $@.tmp
	$(EPILOG)

################################################
## step3: setup tree building
step3: step3.single_linkage.gz

##############################################################################
## Note: seq_pairs_cluster_by_single_linkage has problems with | pipes.
step3.single_linkage.gz: step2.scaled.links.gz
	$(PRELOG)
	@gunzip < $< > $@.tmp
	@seq_pairs_cluster_by_single_linkage \
	    --err_log $@.errors \
            --verbose \
	< $@.tmp 2>$@.log |\
	gzip > $@ 
	@rm -f $@.tmp
	$(EPILOG)


STEP3_QUERIES1=$(wildcard *.ks)
STEP3_TARGETS1=$(STEP3_QUERIES1:%.ks=%.tree)  
STEP3_QUERIES2=$(wildcard *.sub_matrix)
STEP3_TARGETS2=$(STEP3_QUERIES2:%.sub_matrix=%.kitsch)

step3: step3.prepare step3.run step3.finish 
	@touch $@
	$(EPILOG)	

step3.run: step3.prepare
	$(PRELOG)
	@if [ -d step3.dir ]; then \
		$(MAKE) -C step3.dir -k -j $(PARAM_STEP1_NUMJOBS) step3-hook $(TOLOG); \
	fi
	@touch $@
	$(EPILOG)

step3-hook: $(STEP3_TARGETS1)

step3-hook-subtree: $(STEP3_TARGETS2)

step3.finish: step3.run rejoined full_tree

step3.prepare: step3.single_linkage.gz
	$(PRELOG)
	@$(MAKE) step3.dir 
	@if [ -d step3.dir ]; then \
		gunzip < $< |\
		perl -p -e "s/:/@/g" |\
		seq_pairs_split_clusters_by_size.pl \
	    		--path step3.dir/cluster.distances \
			> $@; \
	fi
	$(EPILOG)

%.work: %.distances
	$(PRELOG)
	@rm -rf $(DIR_TMP)$@_tmp
	@mkdir $(DIR_TMP)$@_tmp
	@tree_upgma \
		--matrix_output \
		--input_format p \
		--output_format p \
		--header \
		--err_log $*.upgma.errors \
	< $< > $*.upgma
	@tree_extract_sub_trees_with_matrix \
		--unchanged_tree_file $(DIR_TMP)$@_tmp/$*.nh.unchanged \
		--err_log $(DIR_TMP)$@_tmp/$*.extract_sub_tree.errors \
		--tree_files_path $(DIR_TMP)$@_tmp/$*.orig_sub_tree \
		--sub_matrix_files_path $(DIR_TMP)$@_tmp/$*.sub_matrix \
		--description "$*.after" \
		--input_format p \
		--output_format p  < $*.upgma > $@
	$(MAKE) -C $(DIR_TMP)$@_tmp step3-hook-subtree
	find $(DIR_TMP)$@_tmp -name "*" -mindepth 1 -exec mv {} step3.dir/ \;
	rmdir -rf $(DIR_TMP)$@_tmp
	$(EPILOG)


%.kitsch: %.sub_matrix
	$(CMD_MSG) "refining subtree $* started."
	@tree_kitsch \
		--input_format p \
                --iterations 30 \
                --weighting 3.0 \
                --header \
                --err_log $@.errors \
                        < $*.sub_matrix \
                        > $@
	$(CMD_MSG) "refining subtree $* finished."


##############################################################################
## run upgma to create global tree
%.upgma: %.distances
	$(CMD_MSG) "building upgma-tree for $* started."
	@tree_upgma \
		--matrix_output \
		--input_format p \
		--output_format p \
		--header \
		--err_log $*.upgma.errors < $*.ks > $@
	$(CMD_MSG) "building upgma-tree for $* finished."

##############################################################################
## split global tree into subtrees
%.after: %.upgma
	$(CMD_MSG) "extracting subtrees for $* started."
	@tree_extract_sub_trees_with_matrix \
		--unchanged_tree_file $*.nh.unchanged \
		--err_log $*.extract_sub_tree.errors \
		--tree_files_path $*.orig_sub_tree \
		--sub_matrix_files_path $*.sub_matrix \
		--description "$*.after" \
		--input_format p \
		--output_format p  < $*.upgma > $@
	$(CMD_MSG) "extracting subtrees for $* finished."

##############################################################################
## run kitsch to optimise all large sub-branches
%.kitsch: %.sub_matrix
	$(CMD_MSG) "refining subtree $* started."
	@tree_kitsch \
        --input_format p \
                --iterations 30 \
                --weighting 3.0 \
                --header \
                --err_log $@.errors \
                        < $*.sub_matrix \
                        > $@
	$(CMD_MSG) "refining subtree $* finished."

##############################################################################
## rebuild the complete trees
step3.rejoined: step3.run
	$(PRELOG)
	@cd step3.dir; \
	find . -name "*.kitsch" -exec cat {} \; |\
        tree_rejoin_subbranches \
        --output_path "[FILENAME].rejoined" \
	--err_log ../$@.errors > ../$@
	@touch $@
	$(EPILOG)


step3.full_tree: step3.rejoined
	$(PRELOG)
	@find step3.dir/ -name "*.rejoined" -exec cat {} \; > $@
	@find step3.dir/ -name "*.unchanged" -exec cat {} \; >> $@
	$(EPILOG)

################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
