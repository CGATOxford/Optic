################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_malis 2809 2009-11-04 09:50:35Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction

#########################################################################
## pattern for genome and peptide files. If there is a single file, set to filename

################################################
## Schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table name on where to get the orthologous groups from
PARAM_TABLE_NAME_ORTHOGROUPS?=$(PARAM_PSQL_SCHEMA).clusters_members

## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_GENES_AA?=$(PARAM_PSQL_SCHEMA).malis_genes_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_GENES_NA?=$(PARAM_PSQL_SCHEMA).malis_genes_na
## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_AA?=$(PARAM_PSQL_SCHEMA).malis_transcripts_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_NA?=$(PARAM_PSQL_SCHEMA).malis_transcripts_na

## table with transcripts that are possible spindley genes
PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS?=$(PARAM_PSQL_SCHEMA).removed_transcripts_malis

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]
################################################
## directories and database schemas
PARAM_DIR_SRC?=../export/export_clustering.dir/

## schemas to get data from
PARAM_SRC_SCHEMAS?=

PARAM_SEPARATOR?=|

################################################
# Section parameters: end
################################################

FILES_REQUISITES=input.map

################################################
GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`

####################################################################################
## primary targets
nop:

#########################################################################
create-tables: $(PARAM_TABLE_NAME_MALIS_GENES_AA).create-table-malis-genes \
		$(PARAM_TABLE_NAME_MALIS_GENES_NA).create-table-malis-genes \
		$(PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_AA).create-table-malis-transcripts \
		$(PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_NA).create-table-malis-transcripts \
		$(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS).create-table-removed-transcripts 

prepare: create-tables input.map

####################################################################################
####################################################################################
####################################################################################
## build input.map from a clade genomics pipeline table.
####################################################################################
input.map:
	$(PRELOG)
	@rm -f $@
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) \
		"SELECT DISTINCT '$${x}$(PARAM_SEPARATOR)' || o.prediction_id || '$(PARAM_SEPARATOR)' || o.gene_id || '$(PARAM_SEPARATOR)' || o.class, \
			g.group_id1 \
			FROM $${x}.overview AS o, $(PARAM_TABLE_NAME_ORTHOGROUPS) AS g \
			WHERE g.gene_id = CAST(o.gene_id AS TEXT) AND g.schema = '$${x}' AND o.gene_id != '0' AND g.group_id1 != '0'" \
		$(PSQL_CONNECTION_OPTIONS) >> $@; \
	done
	@$(CMD_LOG) "$@: number of clusters:" `cut -f 2 $@ | sort | uniq | wc -l`
	@$(CMD_LOG) "$@: number of entries :" `wc -l < $@`
	@printf "species\ttranscripts\tgenes\n" $(TOLOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "%s\t%i\t%i\n" $${x} \
			`cut -f 1 $@ | grep $${x} | cut -d "$(PARAM_SEPARATOR)" -f 2 | sort | uniq | wc -l` \
			`cut -f 1 $@ | grep $${x} | cut -d "$(PARAM_SEPARATOR)" -f 3 | sort | uniq | wc -l` \
		$(TOLOG); \
	done
	$(EPILOG)

####################################################################################
## Step1:
## For each cluster
## 1. build multiple alignment
## 2. do the bootstrap
## 3. evaluate multiple alignment quality
## 4. split multiple alignment in sub-components
###################################################################################
## targets for multiple alignment calculation
DATA_TARGETS=$(wildcard cluster_*.dir)
DATA_INPUT=input.map

###################################################################################
## calculating multiple alignments in each group
all: data.prepare data.run data.finish

########################################################################
## building components from a graph. Creates a .map and .sizes file
data.prepare: input.map
	$(PRELOG)
	@$(MAKE) data.dir
	@rm -f $@.tmp
	@$(CMD_LOG) "splitting file for section exons"
	@for schema in $(PARAM_SRC_SCHEMAS); do \
		cat $(PARAM_DIR_SRC)export_clustering_$${schema}.exons >> $@.tmp; \
	done
	@python $(DIR_SCRIPTS_TOOLS)split_file.py \
	--map=input.map \
	--pattern-output="data.dir/cluster_%s.dir/cluster_%s.exons" \
	--column=1 \
	< $@.tmp >> $@
	@for section in cds peptides; do \
		$(CMD_LOG2) "splitting file for section $${section}"; \
		rm -f $@.tmp; \
	    	for schema in $(PARAM_SRC_SCHEMAS); do \
			cat $(PARAM_DIR_SRC)export_clustering_$${schema}_$${section}.fasta >> $@.tmp; \
	    	done; \
	    	perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
	    		-m input.map \
	    		-a "data.dir/cluster_%s.dir/cluster_%s_$${section}.fasta" \
	    	< $@.tmp >> $@; \
	done
	@rm -f $@.tmp
	@for dir in data.dir/cluster_*.dir; do \
		ln -s ../Makefile $${dir}/Makefile; \
	done
	$(EPILOG)

data.run:
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	$(EPILOG)

$(DATA_TARGETS):
	$(PRELOG)
	@$(MAKE) -C $@ data.run-subhook < /dev/null
	$(EPILOG)

data.run-hook: $(DATA_TARGETS)

data.finish: data.run # data.qc data.bs

.PHONY: data.run-hook data.run-subhook $(DATA_TARGETS)

###########################################################################
DATA_SUB_QUERIES=$(wildcard cluster_*[0-9].exons)
DATA_SUB_TARGETS=$(DATA_SUB_QUERIES:%.exons=%.mali) $(DATA_SUB_QUERIES:%.exons=%.filtered)

data.run-subhook: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) mali-analysis-hook < /dev/null
	@touch $@
	$(EPILOG)	

touch: 
	@touch $(DATA_SUB_TARGETS)
	@touch data.run-subhook

mali-analysis-hook: $(DATA_SUB_TARGETS)

data.remove-unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e data.dir ]; then \
	    for file in data.dir/cluster_*.dir/cluster*.mali; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 && -s $${file} ]] ; then \
			    $(CMD_LOG2) "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."
	$(EPILOG)

## display runs that have not finished
data.show-unfinished:
	@for file in data.dir/cluster_*.dir/cluster*.mali; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 && -s $${file} ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done


data.show-progress:
	@echo "# data status at `date`" >> data.progress
	@total=`find data.dir -name '*_peptides.fasta' | wc -l`; \
	printf "%6i/%6i %6i/%6i %6i/%6i malis\t%6i/%6i bootstraps\t%6i/%6i qc\t%6i/%6i kaks\t%6i/%6i bl_kaks\n" \
		`find data.dir -name '*_aligned_aa.fasta' -not -empty | wc -l` $${total} \
		`find data.dir -name '*.raw_mali' -not -empty | wc -l` $${total} \
		`find data.dir -name '*.na_mali' -not -empty | wc -l` $${total} \
		`find data.dir -name '*.bs' | wc -l` $${total} \
		`find data.dir -name '*.qc' | wc -l` $${total} \
		`find data.dir -name '*.kaks' | wc -l` $${total} \
		`find data.dir -name '*.bl_kaks' | wc -l` $${total} >> data.progress
	@tail data.progress

#########################################################################
#########################################################################
#########################################################################
## Multiple alignment command. Write four alignments
## packed and unpacked
## amino acids and nucleic acids
#########################################################################
%.mali: %_peptides.fasta 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)align_transcripts.py \
		--exons=$*.exons \
		--cds=$*_cds.fasta \
		--force-map \
		--verbose=2 \
		--output-filename-pattern=$*_%s.fasta \
		--output=final_aa \
		--output=final_na \
		--output=aligned_aa \
		--output=aligned_na \
		--output-format="plain-fasta" \
	< $< > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Filter mali to remove transcripts that are dubious
## - joining two genes
#########################################################################
%.filtered: %.mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)mali2cleaned_mali.py \
		--filename-exons=$*.exons \
		--mode=joining \
		--verbose=2 \
		--filename-removed=$@.removed \
	< $*_final_aa.fasta > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
##
## Summary targets
#########################################################################

#########################################################################
#########################################################################
#########################################################################
## Tables for multiple alignment sequence information
#########################################################################
%.create-table-malis-transcripts: 
	$(PRELOG)
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " > /dev/null
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	cluster_id INT, \
	schema TEXT, \
	prediction_id TEXT, \
	gene_id TEXT, \
	class CHAR(2), \
	alignment TEXT)" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_cluster_id ON $* (cluster_id);" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema ON $* (schema);" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema_prediction_id ON $* (schema,prediction_id);" > /dev/null
	$(EPILOG)

%.create-table-malis-genes: 
	$(PRELOG)
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " > /dev/null
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	cluster_id INT, \
	schema TEXT, \
	gene_id TEXT, \
	alignment TEXT)" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_cluster_id ON $* (cluster_id);" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema ON $* (schema);" > /dev/null
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema_gene_id ON $* (schema,gene_id);" > /dev/null
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Load multiple alignment information into tables
#########################################################################

SUMMARY_TARGETS=genes_aa genes_na transcripts_aa transcripts_na 

summary: 
	@$(MAKE) -j $(PARAM_NUM_JOBS) -k -C $@.dir $@-hook < /dev/null

summary-hook:	\
	$(SUMMARY_TARGETS:%=malis_%.data.gz) \
	$(SUMMARY_TARGETS:%=malis_%.load) \
	malis_genes_na.fasta \
	removed removed.load

malis_genes_aa.load:       TABLE_NAME=$(PARAM_TABLE_NAME_MALIS_GENES_AA)
malis_genes_na.load:       TABLE_NAME=$(PARAM_TABLE_NAME_MALIS_GENES_NA)
malis_transcripts_aa.load: TABLE_NAME=$(PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_AA)
malis_transcripts_na.load: TABLE_NAME=$(PARAM_TABLE_NAME_MALIS_TRANSCRIPTS_NA)
malis_genes_aa.data.gz:       FILE_NAME=aligned_aa.fasta
malis_genes_na.data.gz:       FILE_NAME=aligned_na.fasta
malis_transcripts_aa.data.gz: FILE_NAME=final_aa.fasta
malis_transcripts_na.data.gz: FILE_NAME=final_na.fasta
malis_genes_na.maf.gz:       FILE_NAME=aligned_na.maf

malis_genes_%.data.gz: CMD_PRINT=gsub(/\s/,"",sequence); printf("%s\t%s\t%s\t%s\n",cluster_id,a[1],a[2],sequence);
malis_transcripts_%.data.gz: CMD_PRINT=gsub(/\s/,"",sequence); printf("%s\t%s\t%s\t%s\t%s\t%s\n",cluster_id,a[1],a[2],a[3],a[4],sequence);

malis_%.data.gz-hook:
	@$(CMD_REMOTE_SUBMIT) $(MAKE) malis_$*.data.gz

.PHONY: malis_%.data.gz-hook

#########################################################################
#########################################################################
#########################################################################
## Create summary of all multiply aligned files.
## Note that this can not be run on the cluster - nfs messes up. 
#########################################################################
malis_%.maf.gz:
	$(PRELOG)
	@for d in ../data.dir/cluster_*.dir; do \
		cluster_id=$${d#../data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}_$(FILE_NAME); \
		if test -s $${file}; then \
			printf ">%i\n" $${cluster_id}; \
			cat $${file}; \
		else \
			printf "# file %s missing\n" $${file} >> $@.err; \
		fi; \
	done | gzip > $@
	$(EPILOG)	

#########################################################################
#########################################################################
#########################################################################
## Create summary of all multiply aligned files.
## Note that this can not be run on the cluster - nfs messes up. 
#########################################################################
malis_%.data.gz:
	$(PRELOG)
	@rm -f $@.tmp
	@for d in ../data.dir/cluster_*.dir; do \
		cluster_id=$${d#../data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}_$(FILE_NAME); \
		if test -s $${file}; then \
			printf "@ %i\n" $${cluster_id} >> $@.tmp; \
			cat $${file} >> $@.tmp; \
		else \
			printf "# file %s missing\n" $${file} >> $@.err; \
		fi; \
	done
	@awk '   /^#/ {next}; \
		/^@/ { if (id) { $(CMD_PRINT); }; id=""; cluster_id=$$2; next; } \
		/^>/ { if (id) { $(CMD_PRINT); } id=$$1; sequence=""; split(substr(id,2),a,"$(PARAM_SEPARATOR)"); next; } \
		{ sequence = sequence $$1; } \
		END { if (id) $(CMD_PRINT) }' \
	< $@.tmp | gzip > $@
	@rm -f $@.tmp
	$(EPILOG)	

#########################################################################
#########################################################################
#########################################################################
## Load multiple alignments into database
#########################################################################
malis_%.load: malis_%.data.gz
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(TABLE_NAME);" > /dev/null
	@gunzip < $< |\
	$(PSQL_CONNECTION) "COPY $(TABLE_NAME) FROM STDIN WITH NULL AS 'na'" > $@ 
	@$(PSQL_CONNECTION) "ANALYSE $(TABLE_NAME)" >> $@ 
	@echo "loaded into $(TABLE_NAME): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(TABLE_NAME);' -t `"  >> $(LOG)
	$(EPILOG)	

#########################################################################
#########################################################################
#########################################################################
## Build a fasta file
#########################################################################
malis_%.fasta: malis_%.data.gz
	$(PRELOG)
	@gunzip < $< |\
	awk '{printf(">%s$(PARAM_SEPARATOR)%s %s\n%s\n", $$2, $$3, $$1, $$4); }' \
	> $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## Table information for removed transcripts
#########################################################################
%.create-table-removed-transcripts: 
	$(PRELOG)
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	cluster_id INT, \
	level TEXT, \
	schema TEXT, \
	prediction_id TEXT, \
	gene_id TEXT, \
	class CHAR(2), \
	rep_schema TEXT, \
	rep_prediction_id TEXT, \
	rep_gene_id TEXT, \
	rep_class CHAR(2), \
	reason TEXT)" $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema ON $* (schema);" $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_schema_prediction_id ON $* (schema,prediction_id);" $(TO_NULL)
	$(EPILOG)

removed: 
	$(PRELOG)
	@for dir in ../data.dir/cluster*.dir; do\
		cluster_id=$${dir#../data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${dir}/cluster_$${cluster_id}.removed; \
		if test -e $${file}; then \
			awk '!/removed/' < $${file} | sort | uniq |\
			awk -v cluster_id=$${cluster_id} \
				'BEGIN {FS="\t"} { split($$1,a,"$(PARAM_SEPARATOR)"); split($$2,b,"$(PARAM_SEPARATOR)"); \
				printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", \
				cluster_id, \
				"spindle",\
				a[1],a[2],a[2],"UK", \
				b[1],b[2],b[2],"UK", \
				$$3);}' >> $@; \
		fi; \
	done
	@touch $@
	$(EPILOG)

removed.load: removed
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS);" $(TO_NULL)
	@$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS) FROM STDIN WITH NULL AS 'na'" < $< > $@ 
	@$(PSQL_CONNECTION) "ANALYSE $(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS)" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REMOVED_TRANSCRIPTS);' -t `"  >> $(LOG)
	$(EPILOG)	


include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

