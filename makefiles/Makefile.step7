################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step7 2011 2008-07-04 10:40:51Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
# predict transcripts for alternative transcripts.
##############################################################################
step7: step6 step7.prepare step7.run step7.finish step7.stats
	$(EPILOG)
	@touch $@

##############################################################################
## parallel prediction execution of members
## set SKIP_CHECK_PREDICTION, if you want to skip the 
## update of prediction results
STEP7_QUERIES=$(wildcard step7_*.chunk)
ifndef PARAM_SKIP_CHECK_PREDICTION 
STEP7_TARGETS=$(STEP7_QUERIES:%.chunk=%.matches)
endif

STEP7_PREDICTION_OPTIONS=$(PARAM_MEMBERS_OPTIONS) \
	--genome-file=../$(PARAM_INPUT_GENOME) \
	--exons=../$(PARAM_INPUT_EXONS) 

##############################################################################
## Step 7.0: prepare representatives alignemnts
##	-> massage boundaries as transcripts do not match completely, add something to the beginning
##		and end $(PARAM_PREDICTION_MARGIN)
##	-> split the peptides files into individual files.
##############################################################################
## for efficient processing, exonerate.predictions should be sorted by genomic region.
## which the output from exonerate.predictions not necessarily is.
step7.prepare: step6 step7.split
	$(PRELOG)
	@touch $@
	$(EPILOG)

step7.split: step6
	$(PRELOG)
	@rm -rf step7.dir
	@mkdir step7.dir
	@ln -s ../Makefile step7.dir/Makefile
	@if test -s patch_step7.graph; then \
		extra_options="--filename-previous=patch_step7.graph"; \
	else \
		extra_options=""; \
	fi; \
	cat step5.predictions.gz step6.predictions.gz |\
	gunzip |\
	sort -k3,3 -t'	' |\
	awk '$$14 > $(PARAM_MEMBERS_MIN_COVERAGE)' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	$(PYTHON_OPTIONS) \
	--default-margin=$(PARAM_MEMBERS_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--prefix=step7.dir/step7_ \
	--suffix=.chunk \
	--format=chunks \
	--peptides=$(PARAM_INPUT_PEPTIDES) \
	--clusters=$(PARAM_INPUT_MAP) \
	--no-sequence \
	--chunk=$(PARAM_MEMBERS_CHUNKSIZE) \
	$${extra_options} \
	> $@; \
	detect_pipe_error;
	$(EPILOG)

##############################################################################
## Step 7.1: run prediction
##############################################################################
step7.run: step7.prepare 
	$(PRELOG)
	@if test -e step7.dir; then \
		$(MAKE) -C step7.dir -k -j $(PARAM_PREDICTION_NUMJOBS) $@-hook; \
	fi
	@touch $@
	$(EPILOG)

step7.run-hook : $(STEP7_TARGETS)

step7_%.matches: step7_%.chunk
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py \
		$(PYTHON_OPTIONS) \
		$(STEP7_PREDICTION_OPTIONS) \
		-\
	< step7_$*.chunk > $@

##############################################################################
## Step 7.2: assemble predictions.
##############################################################################
step7.finish: step7.run step7.matches.gz step7.predictions.gz representatives.transcripts step7.check 
	$(PRELOG)
	@touch $@
	$(EPILOG)


##############################################################################
## Step 7: quality control
##############################################################################
step7.stats: step7.matches.gz
	$(PRELOG)
	@echo "## Step7 - prediction of members:" $(TOLOG) ;
	@gunzip < $< |\
	awk ' BEGIN { nsuccess=0; nfailed=0; } \
		/no prediction possible/ {++nfailed; next;} \
		/RESULT:/ { ++nsuccess; next;} \
	      END { ntotal=nsuccess+nfailed; \
		if (ntotal == 0) { printf("no tests finished.\n"); }\
		else { \
		printf("number of tests total:      %8i\n", ntotal); \
		printf("number of tests successful: %8i (%4.1f%%)\n", nsuccess, nsuccess*100/ntotal); \
		printf("number of tests failed:     %8i (%4.1f%%)\n", nfailed, nfailed*100/ntotal); } \
	    }' \
	$(TOLOG)
	@touch $@
	$(EPILOG)

##############################################################################
## show progress of run
step7.show-progress:
	@echo "# members status at `date`" >> step7.progress
	@find ./step7.dir -name "*.matches" -exec grep "RESULT:" {} \; |\
	perl -p -e "s/.*time=//; s/[^0-9\n]//g" |\
	awk -v total=`grep "# written [0-9]* pairs" step7.split | perl -p -e "s/\D+//g"` '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step7.progress
	@tail step7.progress

##############################################################################
step7.rollback:
	@$(MAKE) step7.clean
	@rm -f step7.{matches,predictions,load}
	@rm -f step7_*
	@rm -f step7*

