################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.gaps 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## This module computes gaps in a collection of genomic sequences.
##
#################################################################################


SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction

#########################################################################
## Input data:
## pattern to find genome files. If there is a single file, set it to the 
## filename. %s is substituted with the contig name (first line of fasta identifier).
PARAM_INPUT_GENOME?=genome_%s.fasta

## input file names with genome data (both .fasta and .idx should exist)
PARAM_INPUT_GENOME=genome

################################################
## Database connection parameters
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with gaps information
PARAM_TABLE_NAME_GAPS_MATCHES?=$(PARAM_PSQL_SCHEMA).gaps
## table with summary of gaps
PARAM_TABLE_NAME_GAPS_SUMMARY?=$(PARAM_PSQL_SCHEMA).gaps_summary

################################################
# Section parameters: end
################################################

## include submakefiles
################################################
################################################
################################################
################################################
################################################
################################################
################################################
################################################
## Requisites
INPUT_GENOME=$(PARAM_INPUT_GENOME).fasta $(PARAM_INPUT_GENOME).idx

FILES_REQUISITES=$(INPUT_GENOME)

CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

##############################################################################
## Primary targets
##############################################################################

gaps: gaps.prepare gaps.run gaps.finish

gaps.prepare:
	$(PRELOG)
	$(MAKE) $(PARAM_TABLE_NAME_GAPS_MATCHES).create-table-gaps-matches
	$(MAKE) $(PARAM_TABLE_NAME_GAPS_SUMMARY).create-table-gaps-summary
	@touch $@
	$(EPILOG)

gaps.run:
	$(PRELOG)
	$(MAKE) -j $(PARAM_NUM_JOBS) -k gaps_matches.data gaps_summary.data < /dev/null
	$(EPILOG)


gaps.finish: gaps_matches.load gaps_summary.load
	$(PRELOG)
	$(EPILOG)

gaps_matches.data: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)fasta2gaps.py \
		--genome-file=$(PARAM_INPUT_GENOME) \
	> $@
	$(EPILOG)

gaps_summary.data: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)fasta2tsv.py \
		--genome-file=$(PARAM_INPUT_GENOME) \
	> $@
	$(EPILOG)

gaps_matches.load: gaps_matches.data
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GAPS_MATCHES);" >/dev/null
	@grep -v -e "^#" -e "\bstart\b" $< |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_GAPS_MATCHES) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GAPS_MATCHES): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GAPS_MATCHES);' -t `"  >> $(LOG)
	$(EPILOG)

gaps_summary.load: gaps_summary.data
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GAPS_SUMMARY);" >/dev/null
	@grep -v -e "^#" -e "\bngaps\b" $< |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_GAPS_SUMMARY) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GAPS_SUMMARY): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GAPS_SUMMARY);' -t `"  >> $(LOG)
	$(EPILOG)


#########################################################################
## Create table with gap information
%.create-table-gaps-matches:
	$(CMD_LOG) "creating table $*"
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE"
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	sbjct_token TEXT, \
	sbjct_genome_from INTEGER, \
	sbjct_genome_to INTEGER DEFAULT '0')"
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_sbjct_token ON $* (sbjct_token);" 
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_sbjct_genome_from ON $* (sbjct_genome_from);" 

#########################################################################
## Create table with gap information
%.create-table-gaps-summary:
	$(CMD_LOG) "creating table $*"
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE"
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	sbjct_token TEXT, \
	nresidues INT, \
	ngaps INT, \
	nseqregions INT, \
	ngapregions INT, \
	nA INT, \
	nC INT, \
	nG INT, \
	nT INT, \
	nN INT, \
	nX INT, \
	nO INT )"
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_sbjct_token ON $* (sbjct_token);" 

clean: 

## delete files on error. Uncomment this option, if you want to keep
## files that have failed, for example, for debugging purposes.
# .DELETE_ON_ERROR:
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
