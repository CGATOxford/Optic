################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.ancestral_repeats 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## Construct ancestral repeats
##
## Usage:
##   1. Preparations
##
##      1. Check out code
##
##        svn co svn://fgu202/andreas/gpipe/trunk src 
##
##      2. Create makefile:
##
##        python src/gpipe/setup.py -m ancestral_repeats -d . > setup.log
##
##      3. Download repeatmasker tracks from the ucsc genome browser (track = rmsk)
##        save the full table in gzip format and name as ucsc_$($PARAM_SPECIES1)_repeats.table.gz
##	  and ucsc_$($PARAM_SPECIES2)_repeats.table.gz
##
##      4. Check if all is there:
##	  
##	  make check-setup
##
##	5. Run the pipeline
##
##	  nice -19 nohup make all
##
##
#################################################################################

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=ancestral_repeats

## species name 1
PARAM_SPECIES_TARGET?=gg3

## species name 2
PARAM_SPECIES_QUERY?=tg1

## genome1
PARAM_GENOME_TARGET?=/net/cpp-mirror/databases/indexed_fasta/gg_galGal3_softmasked

## genome2
PARAM_GENOME_QUERY?=/net/cpp-mirror/databases/indexed_fasta/tg_taeGut1_softmasked

## directory with axt alignments for PARAM_SPECIES_QUERY agains PARAM_SPECIES_TARGET
PARAM_DIR_AXT?=/net/cpp-mirror/ucsc/taeGut1/vsGalGal3/axtNet/

## repeats to accept
PARAM_REPEATS?=DNA LINE SINE LTR

################################################
# Section parameters: end
################################################

FILES_REQUISITES=ucsc_$(PARAM_SPECIES_QUERY)_repeats.table.gz ucsc_$(PARAM_SPECIES_TARGET)_repeats.table.gz

##################################################################
##################################################################
##################################################################
## primary targets
##################################################################
RESULT=$(PARAM_SPECIES_QUERY)_vs_$(PARAM_SPECIES_TARGET)

all: $(RESULT).psl \
	$(PARAM_SPECIES_QUERY)_repeats.gff \
	$(PARAM_SPECIES_TARGET)_repeats.gff \
	$(RESULT)_repeats.psl \
	$(PARAM_SPECIES_QUERY)_repeats_sizes.stats \
	$(PARAM_SPECIES_QUERY)_repeats_counts.stats \
	$(PARAM_SPECIES_TARGET)_repeats_sizes.stats \
	$(PARAM_SPECIES_TARGET)_repeats_counts.stats \
	$(RESULT)_repeats.rates.gz \
	$(RESULT)_repeats.rates_vs_gc.png \
	$(PARAM_SPECIES_QUERY)_repeats_rates.gff \
	$(PARAM_SPECIES_QUERY)_repeats_gc.gff 

########################################################
## build alignments
########################################################
########################################################
########################################################
## reformat axt files of genome/genome alignments
## note that axtToPsl requires first target, then query:
## axtToPsl in.axt tSizes qSizes out.psl
########################################################
$(RESULT).psl: 
	$(PRELOG)
	@rm -f $@
	@awk 'NF == 4 { printf("%s\t%s\n", $$1, $$4); }' < $(PARAM_GENOME_QUERY).idx > $(PARAM_SPECIES_QUERY).sizes
	@awk 'NF == 4 { printf("%s\t%s\n", $$1, $$4); }' < $(PARAM_GENOME_TARGET).idx > $(PARAM_SPECIES_TARGET).sizes
	@for x in $(PARAM_DIR_AXT)/chr*.gz; do \
		$(CMD_LOG2) "adding $${x}"; \
		axtToPsl <(gunzip < $${x}) $(PARAM_SPECIES_QUERY).sizes $(PARAM_SPECIES_TARGET).sizes $@.tmp1; \
		pslSwap $@.tmp1 $@.tmp2; \
		cat $@.tmp2 >> $@; \
	done
	@rm -f $@.tmp*
	$(EPILOG)

########################################################
########################################################
########################################################
## extract repeat information from repeat masker track at ucsc
## and keep only relevant repeats
########################################################
%_repeats.gff: ucsc_%_repeats.table.gz 
	$(PRELOG)
	@gunzip < $< | pe "s/#//" |\
	csv_cut genoName genoStart genoEnd genoLeft strand repName repClass repFamily |\
	python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
		--apply=<(echo $(PARAM_REPEATS) | xargs --max-args 1) \
		--column=7 \
		--log=$@.log |\
	awk '!/genoName/ {printf("%s\trepeat\texon\t%s\t%s\t%s\t%s\t.\tname \"%s\"; class \"%s\"; family \"%s\" \n", $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8);}' |\
	sort -k1,1 -k4,4n |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2gff.py --merge-features=0,10,0,0 --log=$@.log \
	> $@ 
	$(EPILOG)

########################################################
########################################################
########################################################
## extract alignments between repeats
########################################################
$(RESULT)_repeats.psl: $(RESULT).psl $(PARAM_SPECIES_TARGET)_repeats.gff $(PARAM_SPECIES_QUERY)_repeats.gff
	$(PRELOG)
	@$(CMD_SERVER_SUBMIT) \
	"python $(DIR_SCRIPTS_GENEPREDICTION)blat2blat.py \
		--method=test \
		--log=$@.log \
	< $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2blat.py \
		--method=map \
		--filter-query=$(PARAM_SPECIES_QUERY)_repeats.gff \
		--filter-target=$(PARAM_SPECIES_TARGET)_repeats.gff \
		--log=$@.log \
	> $@" < /dev/null
	$(EPILOG)

########################################################
########################################################
########################################################
## extract alignments between repeats
## only use $(PARAM_SPECIES_TARGET) to denote repeat regions
########################################################
$(PARAM_SPECIES_TARGET)_vs_$(PARAM_SPECIES_QUERY)_halfrepeats.psl: $(PARAM_SPECIES_TARGET)_vs_$(PARAM_SPECIES_QUERY).psl $(PARAM_SPECIES_TARGET)_repeats.gff
	$(PRELOG)
	@$(CMD_SERVER_SUBMIT) \
	"python $(DIR_SCRIPTS_GENEPREDICTION)blat2blat.py \
		--method=test \
		--log=$@.log \
	< $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2blat.py \
		--method=map \
		--filter-query=$(PARAM_SPECIES_TARGET)_repeats.gff \
		--log=$@.log \
	> $@" < /dev/null
	$(EPILOG)

########################################################
########################################################
########################################################
## compute coverage statistics for an alignment
########################################################
%.stats: %.psl
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)psl2stats.py \
		--log=$@.log \
	< $< > $@
	$(EPILOG)

########################################################
########################################################
########################################################
# compute rates within repeats
########################################################
%.rates.gz: %.psl
	$(PRELOG)
	@sort -k10,10 -k14,14 -k9,9 -k12,12n < $< |\
	$(CMD_REMOTE_SUBMIT) \
	"python $(DIR_SCRIPTS_GENEPREDICTION)blat2blat.py \
		--log=$@.log \
		--method=add-sequence \
		--filename-queries=$(PARAM_GENOME_QUERY) \
		--filename-target=$(PARAM_GENOME_TARGET)" |\
	farm.py --split-at-lines=10000 --output-header $(CLUSTER_OPTIONS) --log=$@.log \
		"python $(DIR_SCRIPTS_GENEPREDICTION)psl2table.py $(PSL2TABLE_OPTIONS) --method=query-counts --method=baseml --baseml-model=REV" |\
	gzip > $@
	@rm -f $@.tmp*
	$(EPILOG)

########################################################
########################################################
########################################################
# correlation of rate versus G+C 
########################################################
%.rates_vs_gc.png: %.rates.gz
	$(PRELOG)
	@gunzip < $< | csv_cut pgc distance |\
	python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
		--stats=pearson \
		--plot=scatter-regression \
		--hardcopy=$@ \
		--labels="G+C / %, rate" \
		--title="Correlation between G+C and rate" \
	> $@.log
	$(EPILOG)

########################################################
########################################################
########################################################
## compute repeat statistics: counts - group by repeat class
########################################################
%_repeats_counts.stats: ucsc_%_repeats.table.gz
	$(PRELOG)
	@gunzip < $< | pe "s/#//" |\
	csv_cut genoName genoStart genoEnd repName repClass repFamily |\
	awk '/genoName/ {printf("%s\t%s\n", $$5, "length"); next;} {printf("%s\t%i\n", $$5, $$3-$$2); } ' |\
	t2t --group=1 --group-function=stats > $@
	$(EPILOG)

########################################################
########################################################
########################################################
## compute repeat statistics: sizes
########################################################
%_repeats_sizes.stats: %_repeats.gff
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gff2histogram.py \
		--output-filename-pattern="$@.%s" \
		--method=all < $< > $@
	$(EPILOG)

########################################################
########################################################
########################################################
## filter rates and GC by the flag converged
########################################################
TO_GFF=awk '!/qName/ && $$5 {printf("%s\tancestral_repeat\texon\t%s\t%s\t%s\t+\t.\t.\n", $$1, $$2, $$3, $$4);}' 
%_rates.gff: $(RESULT)_repeats.rates.gz
	$(PRELOG)
	@gunzip < $< |\
	csv_cut qName qStart qEnd distance converged | $(TO_GFF) > $@
	$(EPILOG)

%_gc.gff: $(RESULT)_repeats.rates.gz
	$(PRELOG)
	@gunzip < $< |\
	csv_cut qName qStart qEnd pGC converged | $(TO_GFF) > $@
	$(EPILOG)

clean:
	rm -f $(PARAM_SPECIES_QUERY)*  $(PARAM_SPECIES_TARGET)* 

########################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

