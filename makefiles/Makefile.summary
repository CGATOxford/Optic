################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.summary 15 2005-08-09 15:24:35Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#################################################################################
## Summary information
#################################################################################
NUM_QUERIES:=`grep -c ">" peptides.fasta`

SUMMARY=summary

COLUMNS_EXONS_SUMMARY=dubious_exons identical_exons \
	inserted_exons deleted_exons inserted_introns deleted_introns \
	deleted_nexons deleted_cexons inserted_nexons inserted_cexons \
	truncated_nterminus truncated_cterminus

SQL_EXONS_SUMMARY=$(foreach column, $(COLUMNS_EXONS_SUMMARY), ,SUM(CASE WHEN $(column) > 0 THEN 1 ELSE 0 END), ROUND(100.0 * SUM(CASE WHEN $(column) > 0 THEN 1 ELSE 0 END) / COUNT(*),2))


COLUMNS_QUALITY_SUMMARY1=is_best_prediction is_conserved is_partially_conserved has_frameshift has_stopcodon 
COLUMNS_QUALITY_SUMMARY2=nintrons ngaps nframeshifts nsplits nstopcodons

SQL_QUALITY_SUMMARY=$(foreach column, $(COLUMNS_QUALITY_SUMMARY1), ,SUM(CASE WHEN $(column) THEN 1 ELSE 0 END), ROUND(100.0 * SUM(CASE WHEN $(column) THEN 1 ELSE 0 END) / COUNT(*),2)) \
		$(foreach column, $(COLUMNS_QUALITY_SUMMARY2), ,SUM(CASE WHEN $(column) > 0 THEN 1 ELSE 0 END), ROUND(100.0 * SUM(CASE WHEN $(column) > 0 THEN 1 ELSE 0 END) / COUNT(*),2))

summary: classes.summary quality.summary exons.summary contigs.summary

#################################################################################
## Summary of classes: counts of predictions, genes, queries
#################################################################################
classes.summary:
	echo -e "class\tgenes\tpreds\tqueries\t%\tmissed\t%" > $@
	$(CONNECTION) \
	"SELECT class, COUNT(DISTINCT(gene_id)), COUNT(DISTINCT(prediction_id)), \
	COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * COUNT(DISTINCT(query_token)) / $(NUM_QUERIES),2 ),  \
	$(NUM_QUERIES) - COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * ($(NUM_QUERIES) - COUNT(DISTINCT(query_token))) / $(NUM_QUERIES), 2) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) GROUP BY class" \
	$(CONNECTION_OPTIONS) >> $@
	$(CONNECTION) \
	"SELECT 'select', COUNT(DISTINCT(gene_id)), COUNT(DISTINCT(prediction_id)), \
	COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * COUNT(DISTINCT(query_token)) / $(NUM_QUERIES),2 ),  \
	$(NUM_QUERIES) - COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * ($(NUM_QUERIES) - COUNT(DISTINCT(query_token))) / $(NUM_QUERIES), 2) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) WHERE class IN ($(PARAM_QUALITY_SELECTED_CLASSES))" \
	$(CONNECTION_OPTIONS) >> $@
	$(CONNECTION) \
	"SELECT 'total', COUNT(DISTINCT(gene_id)), COUNT(DISTINCT(prediction_id)), \
	COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * COUNT(DISTINCT(query_token)) / $(NUM_QUERIES),2 ),  \
	$(NUM_QUERIES) - COUNT(DISTINCT(query_token)), \
	ROUND(100.0 * ($(NUM_QUERIES) - COUNT(DISTINCT(query_token))) / $(NUM_QUERIES), 2) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW)" \
	$(CONNECTION_OPTIONS) >> $@


#################################################################################
## Summary of quality comparison information
#################################################################################
quality.summary:
	echo -e "class\ttotal\tbest\t\tcons\t\tpcons\t\thas_fs\t\thas_sp\t\tnint\t\tngaps\t\tnfs\t\tnsplit\t\tnstop" > $@
	$(CONNECTION) \
	"SELECT class, COUNT(*) \
	$(SQL_QUALITY_SUMMARY) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p \
	GROUP BY class" \
	$(CONNECTION_OPTIONS) >> $@
	$(CONNECTION) \
	"SELECT 'total', count(*) \
	$(SQL_QUALITY_SUMMARY) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p "\
	$(CONNECTION_OPTIONS) >> $@

#################################################################################
## Summary of exon comparison information
#################################################################################
exons.summary:
	echo -e "class\ttotal\tdub ex\t\tid ex\t\tins ex\t\tdel ex\t\tins in\t\tdel in\t\tdel nex\t\tdel cex\t\tins nex\t\tins cex\t\ttrun nex\t\ttrun cex" > $@
	$(CONNECTION) \
	"SELECT class, COUNT(*) \
	$(SQL_EXONS_SUMMARY) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p, $(PARAM_TABLE_NAME_EXONS_SUMMARY) AS es \
	WHERE es.prediction_id = p.prediction_id \
	GROUP BY class" \
	$(CONNECTION_OPTIONS) >> $@
	$(CONNECTION) \
	"SELECT 'total', count(*) \
	$(SQL_EXONS_SUMMARY) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p, $(PARAM_TABLE_NAME_EXONS_SUMMARY) AS es \
	WHERE es.prediction_id = p.prediction_id "\
	$(CONNECTION_OPTIONS) >> $@

#################################################################################
## Histograms of percent identity per class
#################################################################################
classes_pide.hist: all.load
	for category in $(QUALITY_CLASSES); do \
		$(CONNECTION) "SELECT p.pidentity FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p \
		WHERE class = '$$category'" -A -F"	" |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@_$$category.hist; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py --headers=`echo $@_*.hist | perl -pe "s/$@_//g; s/.hist//g; s/ +/,/g" ` $@_*.hist > $@

#################################################################################
## Histograms of coverage per class
#################################################################################
classes_coverage.hist: all.load
	for category in $(QUALITY_CLASSES); do \
		$(CONNECTION) "SELECT p.query_coverage FROM $(PARAM_TABLE_NAME_OVERVIEW) AS p \
		WHERE class = '$$category'" -A -F"	" |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@_$$category.hist; \
	done
	python $(DIR_SCRIPTS_TOOLS)combine_histograms.py --headers=`echo $@_*.hist | perl -pe "s/$@_//g; s/.hist//g; s/ +/,/g" ` $@_*.hist > $@





contigs.summary:
	echo -e "contig\tstrand\tqueries\tgenes\tpredictions" > $@	
	$(CONNECTION) \
	"SELECT sbjct_token, sbjct_strand, \
	COUNT(DISTINCT(query_token)), COUNT(DISTINCT(gene_id)), COUNT(DISTINCT(prediction_id)) \
	FROM $(PARAM_TABLE_NAME_OVERVIEW) GROUP BY sbjct_token, sbjct_strand" \
	$(CONNECTION_OPTIONS) >> $@
