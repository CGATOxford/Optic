################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.ensembl 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################


#################################################################################
#################################################################################
#################################################################################
#
# Import data from ensembl dumps into OPTIC tables.
#
# Input:
#	reference_peptides.fasta.gz - ENSEMBL pep.all.fa.gz file
#       reference.gtf.gz            - ENSEMBL gtf.gz file
#
# Optional input:
#	reference.predictions: if this file exists, the predictions within it are substituted
#		for the ones in reference.exons. This is useful for pseudogenes.
#
#
# If there is a file called pseudogenes.exons, genes in this file will be added 
# as pseudogenes. The pseudogene identifiers need to be part of reference_peptides.fasta
# and peptides2genes
#
#
#
#################################################################################
#################################################################################
#################################################################################

################################################
## Section parameters: start
################################################
PARAM_PROJECT_NAME?=

################################################
## Database connection parameters
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## contig predictions
PARAM_TABLE_NAME_PREDICTIONS?=$(PARAM_PSQL_SCHEMA).predictions
## contig sizes
PARAM_TABLE_NAME_CONTIGS?=$(PARAM_PSQL_SCHEMA).contigs
## exons table
PARAM_TABLE_NAME_EXONS?=$(PARAM_PSQL_SCHEMA).exons
## quality indices for predictions
PARAM_TABLE_NAME_QUALITY?=$(PARAM_PSQL_SCHEMA).quality
## gene
PARAM_TABLE_NAME_GENES?=$(PARAM_PSQL_SCHEMA).genes
## gene information
PARAM_TABLE_NAME_GENEINFO?=$(PARAM_PSQL_SCHEMA).geneinfo
## quality indices for redundant
PARAM_TABLE_NAME_REDUNDANT?=$(PARAM_PSQL_SCHEMA).redundant
## quality indices for queries
PARAM_TABLE_NAME_QUERIES?=$(PARAM_PSQL_SCHEMA).queries
## transcripts table
PARAM_TABLE_NAME_TRANSCRIPTS?=$(PARAM_PSQL_SCHEMA).transcripts
## overview table
PARAM_TABLE_NAME_OVERVIEW?=$(PARAM_PSQL_SCHEMA).overview
## cds table
PARAM_TABLE_NAME_CDS?=$(PARAM_PSQL_SCHEMA).cds

################################################
PARAM_SEPARATOR?=|

PARAM_GENOME_FILE?=genome

################################################
## set to --no-realignment if you do not want to
## realign transcripts whose ensembl peptide sequence 
## does not match the peptide sequence after parsing
## the gene structure.
PARAM_REALIGNMENT?=

################################################
# Section parameters: end
################################################

PSEUDOGENES_EXONS=$(wildcard pseudogenes.exons)

ifeq ($(wildcard reference.predictions), reference.predictions)
OPTIONS_PREDICTIONS_FILE=--predictions-file=$(wildcard reference.predictions)
else
OPTIONS_PREDICTIONS_FILE=
endif

################################################
TYPE_PREDICTION_ID=TEXT
TYPE_GENE_ID=TEXT

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.tables

#########################################################################
prepare: create-schema create-tables

#########################################################################
#########################################################################
#########################################################################
create-tables: $(PARAM_TABLE_NAME_CONTIGS).create-table-contigs \
		$(PARAM_TABLE_NAME_PREDICTIONS).create-table-predictions \
		$(PARAM_TABLE_NAME_EXONS).create-table-exons \
		$(PARAM_TABLE_NAME_CDS).create-table-cds \
		$(PARAM_TABLE_NAME_QUALITY).create-table-quality \
		$(PARAM_TABLE_NAME_GENES).create-table-genes \
		$(PARAM_TABLE_NAME_GENEINFO).create-table-geneinfo \
		$(PARAM_TABLE_NAME_REDUNDANT).create-table-map \
		$(PARAM_TABLE_NAME_QUERIES).create-table-queries \
		$(PARAM_TABLE_NAME_TRANSCRIPTS).create-table-transcripts \
		$(PARAM_TABLE_NAME_OVERVIEW).create-table-overview

#########################################################################
#########################################################################
#########################################################################
all: contig_sizes contig_sizes.load \
	predictions.load \
	genes.load exons.load \
	redundant.load quality.load \
	transcripts.load cds.load \
	queries.load geneinfo.load \
	predictions.check \
	map_rep2mem \
	cds.check genes.check redundant.check 

#########################################################################
#########################################################################
#########################################################################
# build reference.exons file from ensembl geneset
# This step translates ENSEMBL chromosome ids to UCSC ids
#########################################################################
reference.exons: reference.gtf.gz
	$(PRELOG)
	@zcat reference.gtf.gz |\
	awk '$$2 == "protein_coding" && $$3 == "CDS"' |\
	python $(DIR_SCRIPTS)gff2gff.py \
		--sanitize=genome \
		--genome-file=$(PARAM_GENOME_FILE) \
		--skip-missing |\
	python $(DIR_SCRIPTS)gpipe/gtf2exons.py \
		--extract-id='protein_id \"(\S*)\";' \
		--log=$@.log \
		--forward-coordinates \
	        --genome-file=$(PARAM_GENOME_FILE) \
	> $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
# build peptides2genes file from ensembl geneset
#########################################################################
peptides2genes: reference.gtf.gz
	$(PRELOG)
	@zcat reference.gtf.gz |\
	awk '$$2 == "protein_coding" && $$3 == "CDS"' |\
	python $(DIR_SCRIPTS)gtf2tsv.py --map=peptide2gene --log=$@.log \
	> $@
	$(EPILOG)	

#########################################################################
#########################################################################
#########################################################################
queries.load: reference.exons peptides2genes
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_QUERIES);" > /dev/null
	@grep -v "#" peptides2genes |\
	awk '{printf("%i\t%s\t%s\n", ++a, $$1, $$2); }' |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_QUERIES) (query_id, query_token, rep_token) FROM STDIN WITH NULL AS 'na'" > $@ 
	@$(PSQL_CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUERIES) SET npredictions=1, nr_npredictions=1" >> $@ 
	$(CMD_LOG) "$(PARAM_TABLE_NAME_QUERIES): setting number of exons"
	@cat $< $(PSEUDOGENES_EXONS) |\
	awk -v c="'" '!/^#/ { if ($$1 != last) \
		{ if (last) { printf("UPDATE %s SET nexons=%i WHERE query_token=%s%s%s;\n", \
					"$(PARAM_TABLE_NAME_QUERIES)", n, c, last, c); } \
		  n = 0; last = $$1; }; \
		++n; \
	     } \
		END { printf("UPDATE %s SET nexons=%i WHERE query_token=%s%s%s;\n", \
					"$(PARAM_TABLE_NAME_QUERIES)", n, c, last, c); } ' \
	> $@.tmp
	@$(PSQL_CONNECTION_BATCH) $@.tmp > /dev/null
	@rm -f $@.tmp
	@echo "loaded into $(PARAM_TABLE_NAME_QUERIES): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_PREDICTIONS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## build predictions from reference.exons
#########################################################################
predictions.load: reference.exons reference.pep.fa.gz
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_PREDICTIONS);" > /dev/null
	@cat $< $(PSEUDOGENES_EXONS) |\
	grep -v "#" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/gff2predictions.py \
		--format="exons" \
		--genome-file=$(PARAM_GENOME_FILE) \
		--filename-peptides=reference.pep.fa.gz \
		--remove-unaligned \
		$(PARAM_REALIGNMENT) \
		$(OPTIONS_PREDICTIONS_FILE) \
		--verbose=2 \
		--log=$@ |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_PREDICTIONS) FROM STDIN WITH NULL AS 'na'" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_PREDICTIONS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_PREDICTIONS);' -t `"  >> $(LOG)
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## - get a table of genome size
## - if PARAM_CORRECT_GENOME_FILES is set, substitute X for N (exonerate does not tolerate Xs)
contig_sizes: $(PARAM_GENOME_FILE).idx
	$(PRELOG)
	@echo -e "# contig\tsize" > $@
	@awk 'NF == 4 {printf("%s\t%s\t0\n", $$1, $$4)}' < $< > $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
contig_sizes.load: contig_sizes
	$(PRELOG) 
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CONTIGS);" > /dev/null
	@grep -v "#" contig_sizes |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_CONTIGS) FROM STDIN WITH NULL AS 'na'";
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
genes.load: peptides2genes
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GENES);" > /dev/null
	@awk '!/^#/ {printf("%s\t%s\t%s\n", $$1, $$2, $$2); }' < peptides2genes |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_GENES) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GENES): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
geneinfo.load: genes.load quality.load predictions.load
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GENEINFO);" > /dev/null
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/genes2quality.py \
		--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
		--table-genes=$(PARAM_TABLE_NAME_GENES) \
		--table-quality=$(PARAM_TABLE_NAME_QUALITY) \
		--table-predictions=$(PARAM_TABLE_NAME_PREDICTIONS) \
		--log=$@ |\
	grep -v -e "#" -e "ntranscripts" |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_GENEINFO) FROM STDIN WITH NULL AS 'na'" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GENEINFO): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENEINFO);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
exons.load: reference.exons
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_EXONS);" > /dev/null
	@cat $< $(PSEUDOGENES_EXONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/gff2predictions.py \
		--format="exons" \
		--output-format="exontable" \
		--genome-file=$(PARAM_GENOME_FILE) \
		--log=$@ |\
	grep -v "#" |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_EXONS) FROM STDIN WITH NULL AS 'na'" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_EXONS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_EXONS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
redundant.load: reference.exons
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_REDUNDANT);" > /dev/null
	@cat $< $(PSEUDOGENES_EXONS) | cut -f 1 | sort | uniq |\
	awk '{printf("%s\t%s\t%s\n", $$1, $$1, "m"); } ' |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_REDUNDANT) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_REDUNDANT): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REDUNDANT);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#########################################################################
#########################################################################
#########################################################################
## load quality. If a file peptide2quality exists, than take this, otherwise
## parse from reference.exons
#########################################################################
quality.load: reference.exons
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_QUALITY);" > /dev/null
	@if test -e peptide2quality; then \
		awk '{printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", \
			$$1, "1", "1", "1", "0", "0", "0", "0", $$2); } ' \
		< peptide2quality |\
		$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_QUALITY) FROM STDIN WITH NULL AS 'na'" > $@; \
	else \
		grep -v "#" $< | cut -f 1 | sort | uniq -c |\
		awk '{if ($$1 > 1) { s = "CG" } else {s = "SG" }; printf("%s\t%s\n", $$2, s); }'|\
		awk '{printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", \
			$$1, "1", "1", "1", "0", "0", "0", "0", $$2); } ' |\
		$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_QUALITY) FROM STDIN WITH NULL AS 'na'" > $@; \
		if test -e pseudogenes.exons; then \
			grep -v "#" $(PSEUDOGENES_EXONS) | cut -f 1 | sort | uniq -c |\
			awk '{if ($$1 > 1) { s = "CP" } else {s = "SP" }; printf("%s\t%s\n", $$2, s); }'|\
			awk '{printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", \
				$$1, "1", "1", "1", "0", "0", "0", "0", $$2); } ' |\
			$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_QUALITY) FROM STDIN WITH NULL AS 'na'" > $@; \
		fi; \
	fi
	@echo "loaded into $(PARAM_TABLE_NAME_QUALITY): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_QUALITY);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Build lists of coding sequences and load them into the table $(PARAM_TABLE_NAME_CDS)
##############################################################################
cds.load: reference.exons
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_CDS);" > /dev/null
	@cat $< $(PSEUDOGENES_EXONS) |\
	grep -v "#" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/gff2predictions.py \
		--format="exons" \
		--output-format="cds" \
		--log=$@.log \
		--genome-file="$(PARAM_GENOME_FILE)" |\
	grep -v "#" |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_CDS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_CDS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_CDS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Build lists of transcripts and load then into a table $(PARAM_TABLE_NAME_TRANSCRIPTS)
##############################################################################
transcripts.load: predictions.load
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_TRANSCRIPTS);" > /dev/null
	@$(PSQL_CONNECTION) "INSERT INTO $(PARAM_TABLE_NAME_TRANSCRIPTS) \
		SELECT prediction_id, TRUE, TRUE, 0, 0, sequence, sbjct_genome_from, sbjct_genome_to, map_query2genome \
		FROM $(PARAM_TABLE_NAME_PREDICTIONS)" > $@
	@echo "loaded into $(PARAM_TABLE_NAME_TRANSCRIPTS): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_TRANSCRIPTS);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)

#############################################################################
#############################################################################
#############################################################################
## Build map of members to representative transcripts
##
## The representative transcripts is the longest transcript (largest extent)
#############################################################################
map_rep2mem: reference.exons
	$(PRELOG)
	@cat $< $(PSEUDOGENES_EXONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe_gpipe/exonerate_combine_regions.py \
		--genome-file=genome \
		--verbose=2 \
		--overlap=0 \
		--alignment=0.0 \
		--use-genome-length \
	> $@
	$(EPILOG)


##############################################################################
##############################################################################
##############################################################################
##
## Export of exons in gff format
##
##############################################################################
EXPORT_EXONS_ID='$(PARAM_PROJECT_NAME)' || '$(PARAM_SEPARATOR)' || p.prediction_id || '$(PARAM_SEPARATOR)' || g.gene_id || '$(PARAM_SEPARATOR)' || q.class

EXPORT_EXONS_FROM=$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_CDS) AS e , \
	$(PARAM_TABLE_NAME_CONTIGS) AS c, \
	$(PARAM_TABLE_NAME_QUALITY) AS q, \
	$(PARAM_TABLE_NAME_GENES) AS g 
EXPORT_EXONS_WHERE=e.prediction_id = p.prediction_id AND \
	q.prediction_id = e.prediction_id AND \
	g.prediction_id = e.prediction_id AND \
	g.gene_id > 0 AND \
	c.sbjct_token = p.sbjct_token 
EXPORT_EXONS_SELECT=p.sbjct_token, 'gpipe', 'exon', \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END, \
	100, \
	p.sbjct_strand, e.exon_frame, \
	'Id ' || $(EXPORT_EXONS_ID) || ' ; ' || \
	'Rank ' || e.cds_id || ' ; ' || \
	'Range ' || e.exon_from || '-' || e.exon_to 

EXPORT_EXONS_WHERE_CLEAN=q.class IN ('CG','PG','SG')

## export all predicted cds in gff format using external coordinates
export_exons_all.gff:
	$(PRELOG)
	@$(PSQL_CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM) \
	WHERE $(EXPORT_EXONS_WHERE) \
	ORDER BY e.prediction_id, e.cds_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

## export non-redundant predicted cds in gff format using external coordinates
## formerly known as export_exons_nr.gff
export_exons_filtered.gff:
	$(PRELOG)
	@$(PSQL_CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM), \
	$(PARAM_TABLE_NAME_REDUNDANT) AS m \
	WHERE $(EXPORT_EXONS_WHERE) AND \
	m.rep_prediction_id = p.prediction_id AND \
	m.rep_prediction_id = m.mem_prediction_id \
	ORDER BY e.prediction_id, e.cds_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

## export non-redundant predicted cds in gff format using external coordinates
export_exons_clean.gff:
	$(PRELOG)
	@$(PSQL_CONNECTION) \
	"SELECT $(EXPORT_EXONS_SELECT) \
	FROM $(EXPORT_EXONS_FROM), \
	$(PARAM_TABLE_NAME_REDUNDANT) AS m \
	WHERE $(EXPORT_EXONS_WHERE) AND \
	m.rep_prediction_id = p.prediction_id AND \
	m.rep_prediction_id = m.mem_prediction_id AND \
	$(EXPORT_EXONS_WHERE_CLEAN) \
	ORDER BY e.prediction_id, e.cds_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Dump out a file with all peptides
##############################################################################
peptides.fasta: predictions.load genes.load transcripts.load
	$(PRELOG)
	@$(PSQL_CONNECTION) "SELECT \
		'$(PARAM_PSQL_SCHEMA)' || '$(PARAM_SEPARATOR)' || prediction_id || '$(PARAM_SEPARATOR)' || gene_id || '$(PARAM_SEPARATOR)' || class, \
		sequence \
		FROM $(PARAM_TABLE_NAME_OVERVIEW)" \
		$(PSQL_CONNECTION_OPTIONS) |\
	awk '{printf(">%s\n%s\n", $$1, $$2);}' \
	> $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Check translated peptides
## The identifier pattern is modified to ignore the quality information.
##############################################################################
predictions.check: predictions.load genes.load transcripts.load peptides.fasta reference.pep.fa.gz
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)diff_fasta.py \
		--output=missed --output=seqdiff \
		--pattern1="(\S+)" \
		--pattern2="[^$(PARAM_SEPARATOR)]+[$(PARAM_SEPARATOR)]([^$(PARAM_SEPARATOR)]+)[$(PARAM_SEPARATOR)]" \
		reference.pep.fa.gz \
		peptides.fasta \
	> $@
	@rm -f $@_tmp
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## Check consistency of tables
##############################################################################
cds.check: cds.load
	$(CMD_LOG) "Missing entries in $(PARAM_PSQL_SCHEMA).cds"
	@$(PSQL_CONNECTION) "SELECT COUNT(p.prediction_id) \
		FROM $(PARAM_PSQL_SCHEMA).predictions as p \
		LEFT JOIN $(PARAM_PSQL_SCHEMA).cds as c \
		ON c.prediction_id = p.prediction_id \
		WHERE c.cds_id IS NULL;" $(PSQL_CONNECTION_OPTIONS) $(TOLOG)

genes.check: genes.load
	$(CMD_LOG) "Missing entries in $(PARAM_PSQL_SCHEMA).genes"
	@$(PSQL_CONNECTION) "SELECT COUNT(p.prediction_id) \
		FROM $(PARAM_PSQL_SCHEMA).predictions as p \
		LEFT JOIN $(PARAM_PSQL_SCHEMA).genes as g \
		ON g.prediction_id = p.prediction_id \
		WHERE g.gene_id IS NULL;" $(PSQL_CONNECTION_OPTIONS) $(TOLOG)

redundant.check: redundant.load
	$(CMD_LOG) "Missing entries in $(PARAM_PSQL_SCHEMA).redundant"
	@$(PSQL_CONNECTION) "SELECT COUNT(p.prediction_id) \
		FROM $(PARAM_PSQL_SCHEMA).predictions as p \
		LEFT JOIN $(PARAM_PSQL_SCHEMA).redundant as r \
		ON r.mem_prediction_id = p.prediction_id \
		WHERE r.rep_prediction_id IS NULL;" $(PSQL_CONNECTION_OPTIONS) $(TOLOG)


include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

