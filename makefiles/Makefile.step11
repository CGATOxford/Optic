################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step11 2262 2008-11-17 16:33:28Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

################################################
# Section parameters: start
################################################

## Options to enable in the redundancy filter.
PARAM_STEP11_REDUNDANCY_FILTER?=--remove-spanning \
			--remove-exon-swoppers \
			--remove-gene-spanners \
			--remove-suboptimal

## define, if you want to remove prediction overlapping with the 
## query set. This is usefull, if you are re-predicting genes and
## pseudogenes from a known gene set in the same species.
PARAM_STEP11_REMOVE_QUERY_SET?=

################################################
## number of genes to look at for redundancy removal within
## a chunk.
PARAM_STEP11_CHUNK_SIZE?=1000

################################################
# Section parameters: end
################################################

ifneq ($(PARAM_STEP11_REMOVE_QUERY_SET),)
STEP11_REDUNDANCY_OPTIONS_FILTER=--genome-file=$(PARAM_ASSEMBLY_PATTERN) --filter-transcripts=reference.exons --filter-remove-spanning
endif

##############################################################################
## remove spurious predictions and collect transcripts into genes
##############################################################################
step11:  step10 step11.prepare step11.run step11.finish
	$(PRELOG)
	@touch $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## prepare data for step11
##############################################################################
step11.prepare: step11.split step11.extended_predictions.fasta step11.exons
	$(PRELOG)
	@touch $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## split overlapping regions into chunks
##############################################################################
step11.split: step10 
	$(PRELOG)
	@rm -rf step11.dir
	@mkdir step11.dir
	@ln -s ../Makefile step11.dir/Makefile
	@$(PSQL_CONNECTION) \
	"SELECT sbjct_token, '.', '.', export_sbjct_genome_from, export_sbjct_genome_to, '.', sbjct_strand, '.', \
		'gene_id \"' || overlap_id || '\"; ' ||\
		'transcript_id \"' || prediction_id || '\"; ' ||\
		'qcov ' || query_coverage || '; ' ||\
		'pid ' || pidentity || '; ' ||\
		'xstart ' || extended_sbjct_genome_from || '; ' ||\
		'xend ' || extended_sbjct_genome_to || '; ' ||\
		'class \"' || class || '\"; ' \
		FROM $(PARAM_TABLE_NAME_OVERVIEW) \
	ORDER BY sbjct_token, export_sbjct_genome_from" \
	$(PSQL_CONNECTION_OPTIONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)split_gff.py \
		--output-pattern=step11.dir/step11_%06i.chunk \
		--method=overlap \
		--min-chunk-size=$(PARAM_STEP11_CHUNK_SIZE) \
	> $@
	$(EPILOG)

##############################################################################
##############################################################################
##############################################################################
## create indexed fasta file
##############################################################################
step11.extended_predictions.fasta: step8.transcripts
	$(PRELOG)
	@awk '!/^#/ {printf(">%s\n%s\n", $$1, $$6); }' < $< |\
	python $(DIR_SCRIPTS_TOOLS)index_fasta.py step11.extended_predictions - > $@.log
	$(EPILOG)	

###########################################################################
# create a file with exon boundaries in the same format that is used
# as input to the pipeline.
# This file uses external coordinates.
step11.exons: step10
	$(PRELOG)
	@$(CONNECTION) "SELECT \
	p.prediction_id, \
	p.sbjct_token, p.sbjct_strand, \
	e.exon_frame, e.cds_id, e.exon_from, e.exon_to, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start WHEN sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END, \
	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start   WHEN sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	$(PARAM_TABLE_NAME_CDS) AS e, \
	$(PARAM_TABLE_NAME_CONTIGS) AS c \
	WHERE \
	e.prediction_id = p.prediction_id AND \
	p.sbjct_token = c.sbjct_token \
	ORDER BY query_token, sbjct_token, sbjct_strand, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

##############################################################################
STEP11_QUERIES=$(wildcard *.chunk)
STEP11_TARGETS=$(STEP11_QUERIES:%.chunk=%.result)

##############################################################################
## Step 11: filter transcripts
##############################################################################
step11.run: step11.prepare 
	$(PRELOG)
	@if test -e step11.dir; then \
		$(MAKE) -C step11.dir -k -j $(PARAM_NUM_JOBS) $@-hook; \
	fi
	$(EPILOG)
	@touch $@

step11.run-hook : $(STEP11_TARGETS)

step11_%.result: step11_%.chunk
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/select_transcripts.py \
	$(PYTHON_OPTIONS) \
	--exons=../step11.exons \
	--peptides=../step9.predictions \
	--extended-peptides=../step11.extended_predictions \
	--output-members=$@ \
	--overlap-id \
	--log=$@.log \
	$(STEP11_REDUNDANCY_OPTIONS_FILTER) \
	$(PARAM_STEP11_REDUNDANCY_FILTER) \
	< $< > $@.stats
	$(EPILOG)

## display runs that have not finished
step11.show-unfinished:
	@for file in step11.dir/step11_*.result; do \
		tail -n 1 $$file.log | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

##############################################################################
## Step 5.3: collect data and do quality control
##############################################################################
step11.finish: step11.run step11.redundant.members \
		step11.redundant.load \
		step11.queries.load \
		step11.genes
	$(PRELOG)
	@touch $@
	$(EPILOG)

##############################################################################
step11.redundant.members: step11.run
	$(PRELOG)
	@find ./step11.dir -name "*.result" -exec cat {} \; |\
	awk '/^#/ { next; } NF == 2 { print >> "$@.info"; next; } NF == 3 { print; } ' > $@
	@find ./step11.dir -name "*.result.log" -exec cat {} \; > $@.log
	$(EPILOG)

##############################################################################
## Create a set of non-redundant transcripts:
old_step11.redundant.members: step10 step9.predictions.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/select_transcripts.py \
	$(PYTHON_OPTIONS) \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--table-overview=$(PARAM_TABLE_NAME_OVERVIEW) \
	--table-exons=$(PARAM_TABLE_NAME_EXONS) \
	--peptides=step9.predictions.fasta \
	--output-members=$@ \
	--overlap-id \
	$(STEP11_REDUNDANCY_OPTIONS_FILTER) \
	$(PARAM_STEP11_REDUNDANCY_FILTER) \
	< /dev/null > $@.log 
	$(EPILOG)

step11.redundant.load: step11.redundant.members
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_REDUNDANT)" > /dev/null
	@grep -v "#" $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_REDUNDANT) FROM STDIN WITH NULL AS 'na'" > $@ 
	$(CMD_LOG) "loaded into $(PARAM_TABLE_NAME_REDUNDANT):"
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REDUNDANT);' -t` rows" 
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REDUNDANT) \
	WHERE mem_prediction_id = rep_prediction_id;' \
	-t` representatives" 
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REDUNDANT) \
	WHERE mem_prediction_id != rep_prediction_id;' \
	-t` members" 
	@touch $@
	$(EPILOG)

step11.queries.load: step10.queries.load step11.redundant.members
	$(PRELOG)
	$(CMD_LOG) $(PARAM_TABLE_NAME_QUERIES): setting number of predictions
	@a=`echo CG SG PG RG UG CP SP PP RP UP SF CF PF UF BF | xargs --max-args=1 | awk '{ printf("|| \",\" || COUNT(class = \"%s\" OR NULL)", $$1); }' | perl -pe "s/,//; s/\"/\'/g;" `;\
	b=`echo CG SG PG RG UG CP SP PP RP UP SF CF PF UF BF | xargs --max-args=1 | awk '{ printf("|| \",\" || COUNT((class = \"%s\" AND r.method=\"m\") OR NULL)", $$1); }' | perl -pe "s/,//; s/\"/\'/g;" `;\
	$(CONNECTION) "SELECT q.query_id, q.query_token, q.rep_token, \
		q.nexons, q.length, \
		q.nmasked_residues, q.ortholog_prediction_id, q.nregions, \
		COUNT( o.sbjct_token != '' OR NULL), \
		COUNT( r.method = 'm' OR NULL), \
		'{' $$a || '}', \
		'{' $$b || '}' \
		FROM $(PARAM_TABLE_NAME_QUERIES) AS q \
		LEFT OUTER JOIN $(PARAM_TABLE_NAME_OVERVIEW) AS o \
			ON (o.query_token = q.query_token) \
		LEFT JOIN $(PARAM_TABLE_NAME_REDUNDANT) AS r \
			ON (r.mem_prediction_id = o.prediction_id) \
		GROUP BY query_id, q.query_token, q.rep_token, q.nexons, q.length, q.nmasked_residues, q.ortholog_prediction_id, q.nregions" \
	$(CONNECTION_OPTIONS) > $@_tmp
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_QUERIES)" > /dev/null
	@cat $@_tmp |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_QUERIES) FROM STDIN" > $@ 
	@touch $@
	$(EPILOG)


##############################################################################
## The making of genes
##############################################################################
step11.genes: step8 step9.exons step9.exons.load step11.genes.matches step11.genes.load \
	step11.geneinfo step11.geneinfo.load
	@touch $@
	$(EPILOG)

## Do not select on e.exon_from > 0, because you will miss first exons.
## 1. Genes are defined by exon identity of good exons.
## 2. Only take non-redundant predictions.
step11.genes.matches: step11.redundant.load
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT DISTINCT p.prediction_id, p.sbjct_token, p.sbjct_strand, \
	e.exon_frame, 0, e.exon_from, e.exon_to, e.genome_exon_from, e.genome_exon_to \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
	     $(PARAM_TABLE_NAME_EXONS) AS e, \
	     $(PARAM_TABLE_NAME_REDUNDANT) AS r \
	WHERE p.prediction_id = e.prediction_id AND \
	r.rep_prediction_id = e.prediction_id AND \
	r.mem_prediction_id = r.rep_prediction_id AND \
	e.is_ok = TRUE AND e.exon_to > 0 \
	ORDER BY p.prediction_id, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) |\
	$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe_gpipe/exonerate_combine_regions.py > $@
	$(EPILOG)

## 3. load genes. 
## set gene_id to prediction_id for all not in set.
step11.genes.load: step11.genes.matches
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_GENES) SET gene_id = '0';" > /dev/null
	@grep -v -e "^#" -e "^rep" $< |\
	awk '{printf("UPDATE $(PARAM_TABLE_NAME_GENES) SET gene_id=\47%s\47 WHERE prediction_id=\47%s\47;\n", $$1, $$2);}' > $@.tmp
	@$(CONNECTION_BATCH) $@.tmp > /dev/null
	@rm -f $@.tmp
	$(CMD_LOG) "loaded into $(PARAM_TABLE_NAME_GENES):"
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES) WHERE gene_id != 0;' \
	-t` non-redundant transcripts" 
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES) WHERE gene_id = prediction_id;' \
	-t` genes" 
	$(CMD_LOG) "`$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENES) WHERE gene_id > 0;' \
	-t` transcripts" 
	@touch $@
	$(EPILOG)

step11.geneinfo: step11.genes.load
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/genes2quality.py \
		$(PSQL_PYTHON_OPTIONS) \
		--table-predictions=$(PARAM_TABLE_NAME_PREDICTIONS) \
		--table-genes=$(PARAM_TABLE_NAME_GENES) \
		--table-quality=$(PARAM_TABLE_NAME_QUALITY) > $@
	$(EPILOG)

step11.geneinfo.load: step11.geneinfo
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_GENEINFO);" > /dev/null 
	@grep -v -e "^#" -e "^gene_id" $< |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_GENEINFO) FROM STDIN WITH NULL AS 'na'" > $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_GENEINFO): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_GENEINFO);' -t `"  >> $(LOG)
	@touch $@
	$(EPILOG)
