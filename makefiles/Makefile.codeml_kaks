################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codeml_kaks 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
## Analysis of kaks values using codeml
## 
## Given: 
##	a tree
##
## Statistical significance
##	codeml is run twice, 
##		once, with and once without specifying for w (branch specific ka/ks) to vary.
##
## Use a sample of PARAM_SAMPLE_SIZE genes.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################

################################################
## species to use
PARAM_SRC_SCHEMAS?=

################################################
## tree with species
PARAM_SPECIES_TREE?=

################################################
## Filename with src information using ks
PARAM_DIR_SRC_MALIS?=../malis/

## Number of samples
PARAM_NUM_SAMPLES?=20

## Number of genes per sample
PARAM_SAMPLE_SIZE?=200

## Pattern to find multiple alignments
PARAM_PATTERN_MALIS?=$(PARAM_DIR_SRC_MALIS)summary.dir/malis_genes_na.fasta

## number of jobs toe execute in parallel
PARAM_NUM_JOBS?=100

################################################
## Codon frequencies to use for paml
PARAM_MODEL_CODON_FREQUENCIES?=2

## not an increased threshold. This parameter is very sensitive
## and probably should not be changed.
PARAM_OPTIMIZATION_THRESHOLD?=1e-6

################################################
## Number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## pattern to extract component from component map
PARAM_PATTERN_COMPONENT?=^(\S+)

## pattern to extract species from identifier
PARAM_PATTERN_IDENTIFIER?=^([^|]+)[|]

PARAM_SEPARATOR?=|

################################################
## For computing statistics of branches, ignore the following:
## mininum number of observed non-synonymous substitutions: N * dN
PARAM_MIN_NDN?=1

## minimum number of synonymous substitutions: S * dS
PARAM_MIN_SDS?=5

################################################
## Options for Gblocks
## Here: allow up to half the sequence to have gaps
PARAM_GBLOCKS_OPTIONS?=-b5=h

## Accept Gblocks alignments, if at least 50% of positions are kept,
## otherwise keep the original
PARAM_GBLOCKS_MIN_KEPT?=50

################################################
################################################
################################################
## Parameters for analysing duplications

PARAM_DIR_DATA?=../../../data/

## Tree in njtree format with correct names
PARAM_FILENAME_SPECIES_TREE?=$(PARAM_DIR_DATA)species_tree_sp

## Tree with permutations
PARAM_ANALYSIS_DUPLICATIONS_TREE?=$(PARAM_DIR_DATA)species_tree_permutations

## Map of species names to colours
PARAM_ANALYSIS_DUPLICATIONS_COLOURS?=$(PARAM_DIR_DATA)schema2colour

## Map of species names to urls
PARAM_ANALYSIS_DUPLICATIONS_URLS?=$(PARAM_DIR_DATA)schema2url

## Map of species to names
PARAM_ANALYSIS_DUPLICATIONS_TRANSLATION?=$(PARAM_DIR_DATA)schema2name

################################################
## input table names

## summary information on orthologous groups
PARAM_TABLE_NAME_GROUPS?=$(PARAM_PROJECT_NAME).groups
## members of orthologous groups
PARAM_TABLE_NAME_GROUPS_MEMBERS?=$(PARAM_PROJECT_NAME).groups_members
## table of strict 1:1 ortholog set info
PARAM_TABLE_NAME_ORTHOLOG_SETS?=$(PARAM_PROJECT_NAME).ortholog_sets
## members of strict 1:1 ortholog sets
PARAM_TABLE_NAME_ORTHOLOG_SETS_MEMBERS?=$(PARAM_PROJECT_NAME).ortholog_sets_members

################################################
## output table names
PARAM_TABLE_NAME_PHYLOGENY_TREES?=$(PARAM_PROJECT_NAME).phylogeny

## gene trees of simple 1:1 orthologs
PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES?=$(PARAM_PROJECT_NAME).ortholog_sets_trees

################################################
# Section parameters: end
################################################
REQUISITES=input.species input.tree input.map

GENOMES_COMMA=`grep -v "^\#" input.species | xargs | perl -p -e "s/ +/,/g"`

#######################################################################################
#######################################################################################
#######################################################################################
prepare: input.species input.tree input.map create-tables

create-tables: \
		$(PARAM_TABLE_NAME_PHYLOGENY_TREES).create-table-phylogeny-trees \
		$(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES).create-table-ortholog-sets-trees

all: 
	$(PRELOG)
	$(MAKE) -j $(PARAM_NUM_JOBS) all-hook
	$(EPILOG)

all-hook: samples.prepare data.prepare samples.run data.run

finish: all 
	$(PRELOG)
	$(MAKE) analysis results summary
	$(EPILOG)

.PHONY: all-hook

#######################################################################################
#######################################################################################
#######################################################################################
input.species: 
	$(PRELOG)
	@rm -f $@
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "%s\n" $${x} >> $@; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Create input tree - unroot if necessary
#######################################################################################
input.tree:
	$(PRELOG)
	@echo "$(PARAM_SPECIES_TREE)" |\
	python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--no-branch-lengths \
		--method=unroot \
		--verbose=0 > $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
input.map:
	$(PRELOG)
	@$(PSQL_CONNECTION) \
	"SELECT DISTINCT m.schema || '|' || m.gene_id, o.cluster_id, m.set_id \
	  FROM  $(PARAM_TABLE_NAME_ORTHOLOG_SETS) AS s, \
		$(PARAM_TABLE_NAME_ORTHOLOG_SETS_MEMBERS) AS m, \
		$(PARAM_TABLE_NAME_GROUPS_MEMBERS) AS gm, \
		$(PARAM_TABLE_NAME_GROUPS) AS o \
		WHERE s.set_id = m.set_id AND POSITION('0' IN s.pattern) = 0 AND \
			gm.schema = m.schema AND \
		gm.gene_id = m.gene_id AND \
		o.group_id = gm.group_id" \
	$(PSQL_CONNECTION_OPTIONS) > $@
	@$(CMD_LOG) "$@: number of clusters:" `cut -f 2 $@ | sort | uniq | wc -l`
	@$(CMD_LOG) "$@: number of entries :" `wc -l < $@`
	@printf "species\ttranscripts\tgenes\n" $(TOLOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "%s\t%i\t%i\n" $${x} \
			`cut -f 1 $@ | grep $${x} | cut -d "$(PARAM_SEPARATOR)" -f 2 | sort | uniq | wc -l` \
			`cut -f 1 $@ | grep $${x} | cut -d "$(PARAM_SEPARATOR)" -f 3 | sort | uniq | wc -l` \
		$(TOLOG); \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## preparation of using samples
#######################################################################################
samples.prepare:
	$(PRELOG)
	$(MAKE) samples.dir
	@for (( x = 1; x <= $(PARAM_NUM_SAMPLES); ++x)); do \
		target_dir=samples.dir/sample_$${x}.dir; \
		mkdir $${target_dir}; \
		ln -s ../Makefile $${target_dir}/Makefile; \
		python $(DIR_SCRIPTS_TOOLS)malis2mali.py \
			--filename-components=input.map \
			--pattern-mali=$(PARAM_PATTERN_MALIS) \
	       		--pattern-component="$(PARAM_PATTERN_COMPONENT)" \
			--pattern-identifier="$(PARAM_PATTERN_IDENTIFIER)" \
			--output-format=fasta \
			--filename-identifiers=input.species \
			--sample=$(PARAM_SAMPLE_SIZE) \
			--log=$${target_dir}/input.log \
			--skip-doubles \
			--mask-acgtn \
			--filename-coordinates=$${target_dir}/coordinates |\
		grep -v "#" > $${target_dir}/sample_$${x}.fasta ; \
		ln -fs ../../input.tree $${target_dir}/tree; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--filename-output=../sample_$${x}_variable_w.output \
			--filename-tree=../tree \
			--filename-sequences=../sample_$${x}.phylip \
			--write-control-file \
			--set-optimization-threshold=$(PARAM_OPTIMIZATION_THRESHOLD) \
			--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
			--analysis=branch-specific-kaks |\
		grep -v "#" > $${target_dir}/sample_$${x}_variable_w.ctl; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--filename-output=../sample_$${x}_fixed_w.output \
			--filename-sequences=../sample_$${x}.phylip \
			--filename-tree=../tree \
			--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
			--write-control-file \
			--set-optimization-threshold=$(PARAM_OPTIMIZATION_THRESHOLD) \
			--analysis=branch-fixed-kaks |\
		grep -v "#" > $${target_dir}/sample_$${x}_fixed_w.ctl; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--filename-output=../sample_$${x}_partly_fixed_%02i.output \
			--filename-sequences=../sample_$${x}.phylip \
			--filename-tree=../tree_%02i \
			--filename-output-tree=$${target_dir}/tree_%02i \
			--filename-read-tree=input.tree \
			--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
			--write-control-file \
			--filename-pattern-control="$${target_dir}/sample_$${x}_%02i_partly_fixed.ctl" \
			--set-optimization-threshold=$(PARAM_OPTIMIZATION_THRESHOLD) \
			--analysis=branch-all-but-one-fixed-kaks >> $@; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## run
#######################################################################################
SAMPLES=$(wildcard sample_[0-9]*.dir)

QUERIES_SUBDIR=$(wildcard sample*_fixed_w.ctl) $(wildcard sample*_variable_w.ctl)
TARGETS_SUBDIR=$(QUERIES_SUBDIR:%.ctl=%.paml) 
OUTPUT_FILES=$(wildcard partly_fixed*.output)

samples.run: samples.prepare
	$(PRELOG)
	@$(MAKE) -C samples.dir -k -j $(PARAM_NUM_JOBS) $@-hook < /dev/null
	@touch $@
	$(EPILOG)

$(SAMPLES):
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) -C $@ samples.run-subhook </dev/null
	$(EPILOG)

samples.run-hook: $(SAMPLES)

samples.run-subhook: $(TARGETS_SUBDIR) 
	$(PRELOG)
	@echo "$@ finished sucessfully" > $@
	$(EPILOG)

lrt: $(TARGETS_SUBDIR)
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)codeml2tsv.py \
		--method=lrt \
		--mode=1xn \
		fixed_w.output variable_w.output $(OUTPUT_FILES) > $@
	$(EPILOG)

samples.remove-unfinished:
	$(PRELOG)
	$(CMD_MSG) "starting removal" > $@.log
	@printf "cluster\tfile\n" > $@.log
	@for d in samples.dir/sample_*; do \
		cluster_id=$${d#samples.dir/sample_}; \
		for file in $${d}/*.log; do \
			if [[ -e $${file} && `grep -c "Time used" $${file}` -lt "1" ]]; then \
				let "nlogs=logs+1"; \
				printf "%s\t%s\n" $${cluster_id} $${file} >> $@.log; \
				rm -f $${file}; \
			fi; \
		done; \
	done; \
	$(CMD_LOG2) "removed $${nlogs} files: *.log"
	$(EPILOG)


.PHONY: $(SAMPLES)

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Primary targets for statistics
QUERY_RESULTS=ks.trees ka.trees kaks.trees
TARGET_RESULTS=$(QUERY_RESULTS:%.trees=%_mean.tree) \
		$(QUERY_RESULTS:%.trees=%_median.tree) \
		$(QUERY_RESULTS:%.trees=%_stddev.tree) \
		$(QUERY_RESULTS:%.trees=%_counts.tree) \
		$(QUERY_RESULTS:%.trees=%_terminal.stats ) \
		gc.stats

results:
	$(PRELOG)
	@$(MAKE) $@.dir
	@ln -sf ../input.species $@.dir/input.species
	@if test -e $@.dir; then \
		$(MAKE) -C $@.dir $@-hook; \
	fi
	$(EPILOG)	

results-hook: \
	ks_pairwise.stats ka_pairwise.stats \
	ks_terminal.stats ka_terminal.stats \
	$(TARGET_RESULTS)
	$(PRELOG)
	@touch $@
	$(EPILOG)


#######################################################################################

#######################################################################################
#######################################################################################
#######################################################################################
## summarize data for branch-specific runs
#######################################################################################
ks.trees:
	$(PRELOG)
	@for ((x = 1; x <= $(PARAM_NUM_SAMPLES); ++x)); do \
		cat ../samples.dir/sample_$${x}.dir/sample_$${x}_variable_w.output; \
	done |\
	awk '/^dS tree:/ { keep = 1; next } ; \
	    {if (keep) { print; keep = 0; }; }' > $@
	$(EPILOG)

#######################################################################################
ka.trees:
	$(PRELOG)
	@for ((x = 1; x <= $(PARAM_NUM_SAMPLES); ++x)); do \
		cat ../samples.dir/sample_$${x}.dir/sample_$${x}_variable_w.output; \
	done |\
	awk '/^dN tree:/ { keep = 1; next } ; \
	    {if (keep) { print; keep = 0; }; }' > $@
	$(EPILOG)

#######################################################################################
kaks.trees:
	$(PRELOG)
	@rm -f $@
	@for ((x = 1; x <= $(PARAM_NUM_SAMPLES); ++x)); do \
		$(CMD_MSG2) "processing $${x}."; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--verbose=0 \
			--analysis=branch-specific-kaks \
			--parse-output=kaks-tree \
		< ../samples.dir/sample_$${x}.dir/sample_$${x}_variable_w.output >> $@; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## collect GC compositional bias for sequences
#######################################################################################
gc.stats:
	$(PRELOG)
	@rm -f $@.tmp
	@for ((x = 1; x <= $(PARAM_NUM_SAMPLES); ++x)); do \
		$(CMD_MSG2) "processing $${x}."; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--verbose=0 \
			--analysis=branch-specific-kaks \
			--parse-output=sequences \
		< ../samples.dir/sample_$${x}.dir/sample_$${x}_variable_w.output |\
		python $(DIR_SCRIPTS_GENEPREDICTION)analyze_codonbias_shannon.py \
			--sections=na |\
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py id pGC >> $@.tmp; \
	done
	@python $(DIR_SCRIPTS_TOOLS)table2table.py --group=1 --group-function=stats < $@.tmp > $@
	@rm -f $@.tmp
	$(EPILOG)

#######################################################################################
%_mean.tree: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2tree.py \
		--log=$@.log \
		--error-branchlength=0 \
		--method=mean < $< > $@
	$(EPILOG)

%_stddev.tree: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2tree.py \
		--log=$@.log \
		--error-branchlength=0 \
		--method=stddev < $< > $@
	$(EPILOG)

%_counts.tree: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2tree.py \
		--log=$@.log \
		--error-branchlength=0 \
		--method=counts < $< > $@
	$(EPILOG)

%_median.tree: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2tree.py \
		--log=$@.log \
		--error-branchlength=0 \
		--method=median \
		--write-values=$*.values \
	< $< > $@
	$(EPILOG)

#######################################################################################
%.stats: %.data
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--rows --column="all" --flat --format="%6.4f" \
	< $*.data > $@
	$(EPILOG)

#######################################################################################
%_pairwise.stats: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--table < $*.trees |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--rows --column="all" --flat --format="%6.4f" > $@
	$(EPILOG)

#######################################################################################
%_terminal.stats: %.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)tree2matrix.py \
		--table --pairs=terminals < $*.trees |\
	perl -p -i -e "s/^[0-9]+-//" |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py \
		--rows --column="all" --flat --format="%6.4f" |\
	python $(DIR_SCRIPTS_TOOLS)table2table.py \
		--format="%6.4f" \
		--sort-by-rows=$(GENOMES_COMMA) > $@
	$(EPILOG)

#######################################################################################
lrt.summary:
	$(PRELOG)
	@rm -f $@_tmp
	@for dir in samples.dir/sample_*; do \
		id=$${dir#samples.dir/sample_}; \
		printf "model\t%s\n" $${id} > $@_tmp_$${id}; \
		python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
			--verbose=0 \
			m2 P-value \
		< $${dir}/lrt |\
		grep -v "m2" >> $@_tmp_$${id}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		$@_tmp_* > $@
	@rm -f $@_tmp*
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## preparation of using all sets
#######################################################################################
data.prepare:
	$(PRELOG)
	$(MAKE) data.dir
	$(CMD_LOG) "creating directories and writing malis."
	@python $(DIR_SCRIPTS_TOOLS)malis2malis.py \
		--filename-components=input.map \
		--pattern-mali=$(PARAM_PATTERN_MALIS) \
	       	--pattern-component="$(PARAM_PATTERN_COMPONENT)" \
		--pattern-output="data.dir/cluster_%s.dir/cluster_%s.fasta" \
		--pattern-filter="^([^|]+)[|]" \
		--filename-filter=input.species \
		--output-format=fasta > $@
	$(CMD_LOG) "adding files to directories."
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		ln -fs ../../Makefile $${d}/Makefile; \
		ln -fs ../../input.tree $${d}/tree; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--filename-output=../cluster_$${cluster_id}_variable_w.output \
			--filename-tree=../tree \
			--filename-sequences=../cluster_$${cluster_id}.phylip \
			--write-control-file \
			--set-optimization-threshold=$(PARAM_OPTIMIZATION_THRESHOLD) \
			--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
			--analysis=branch-specific-kaks |\
		grep -v "#" > $${d}/cluster_$${cluster_id}_variable_w.ctl; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
			--filename-output=../cluster_$${cluster_id}_fixed_w.output \
			--filename-sequences=../cluster_$${cluster_id}.phylip \
			--filename-tree=../tree \
			--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
			--write-control-file \
			--set-optimization-threshold=$(PARAM_OPTIMIZATION_THRESHOLD) \
			--analysis=branch-fixed-kaks |\
		grep -v "#" > $${d}/cluster_$${cluster_id}_fixed_w.ctl; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Progress report for data
#######################################################################################
data.show-progress:
	@echo "# prediction status at `date`" >> data.progress
	@nfix=0;nvar=0;nhook=0;nfasta=0; \
	for d in data.dir/cluster*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		if test -s $${d}/cluster_$${cluster_id}.fasta; then let "nfasta=nfasta+1"; fi; \
		if test -s $${d}/cluster_$${cluster_id}_variable_w.paml; then let "nvar=nvar+1"; fi; \
		if test -s $${d}/cluster_$${cluster_id}_fixed_w.paml; then let "nfix=nfix+1"; fi; \
		if test -e $${d}/data.run-subhook; then let "nhook=nhook+1"; fi; \
	done; \
	awk -v nfasta="$${nfasta}" -v nfix="$${nfix}" -v nvar="$${nvar}" -v nhook="$${nhook}" \
	   'END {  printf("# N\tNFIX\tPLEFT\tRSUCC\tNVAR\tPLEFT\tRSUCC\tNHOOK\tPLEFT\tRSUCC\n"); \
		printf("%i\t%i\t%5.2f\t%5.2f\t%i\t%5.2f\t%5.2f\t%i\t%5.2f\t%5.2f\n", \
			nfasta,\
			nfix,((nfasta-nfix)*100)/nfasta,(nfasta > 0) ? 100*nfix/nfasta : 0, \
			nvar,((nfasta-nvar)*100)/nfasta,(nfasta > 0) ? 100*nvar/nfasta : 0 , \
			nhook,((nfasta-nhook)*100)/nfasta,(nfasta > 0) ? 100*nhook/nfasta : 0 ); }' \
	</dev/null >> data.progress
	@tail data.progress

#######################################################################################
#######################################################################################
#######################################################################################
## Show missing files
#######################################################################################
data.show-unfinished:
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}_fixed_w.paml; \
		if test -e $${file} && ! grep -q "Time used:" $${file}; then \
			$(CMD_MSG2)  "unfinished $${file};"; \
		fi; \
		file=$${d}/cluster_$${cluster_id}_fixed_w_ml.tree; \
		if test -e $${file} && ! grep -q ">" $${file}; then \
			$(CMD_MSG2) "unfinished $${file};"; \
		fi; \
		file=$${d}/cluster_$${cluster_id}_variable_w.paml; \
		if test -e $${file} && ! grep -q "Time used:" $${file}; then \
			$(CMD_MSG2)  "unfinished $${file};"; \
		fi; \
		file=$${d}/cluster_$${cluster_id}_variable_w_ml.tree; \
		if test -e $${file} && ! grep -q ">" $${file}; then \
			$(CMD_MSG2) "unfinished $${file};"; \
		fi; \
	done

#######################################################################################
#######################################################################################
#######################################################################################
## Remove debris from aborted runs
#######################################################################################
data.remove-unfinished:
	$(PRELOG)
	@nfixed=0;nvariable=0;\
	for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}_fixed_w.paml; \
		if test -e $${file} && ! grep -q "Time used:" $${file}; then \
			$(CMD_MSG2)  "removing $${file};" >> $@.log; \
			rm -f $${file}; \
			let "nfixed=nfixed+1"; \
		fi; \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}_variable_w.paml; \
		if test -e $${file} && ! grep -q "Time used:" $${file}; then \
			$(CMD_MSG2)  "removing $${file};" >> $@.log; \
			rm -f $${file}; \
			let "nvariable=nvariable+1"; \
		fi; \
	done; \
	$(CMD_LOG2) "removed $${nfixed} files: nfixed.paml"
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Progress report for samples
#######################################################################################
samples.show-progress:
	@echo "# prediction status at `date`" >> samples.progress
	@nfix=0;nvar=0;nhook=0;nfasta=0; \
	for d in samples.dir/sample_*.dir; do \
		sample_id=$${d#samples.dir/sample_}; \
		sample_id=$${sample_id%.dir}; \
		if test -s $${d}/sample_$${sample_id}.fasta; then let "nfasta=nfasta+1"; fi; \
		if test -s $${d}/sample_$${sample_id}_variable_w.paml; then let "nvar=nvar+1"; fi; \
		if test -s $${d}/sample_$${sample_id}_fixed_w.paml; then let "nfix=nfix+1"; fi; \
		if test -e $${d}/data.run-subhook; then let "nhook=nhook+1"; fi; \
	done; \
	awk -v nfasta="$${nfasta}" -v nfix="$${nfix}" -v nvar="$${nvar}" -v nhook="$${nhook}" \
	   'END {  printf("# N\tNFIX\tPLEFT\tRSUCC\tNVAR\tPLEFT\tRSUCC\tNHOOK\tPLEFT\tRSUCC\n"); \
		printf("%i\t%i\t%5.2f\t%5.2f\t%i\t%5.2f\t%5.2f\t%i\t%5.2f\t%5.2f\n", \
			nfasta,\
			nfix,((nfasta-nfix)*100)/nfasta,(nfasta > 0) ? 100*nfix/nfasta : 0, \
			nvar,((nfasta-nvar)*100)/nfasta,(nfasta > 0) ? 100*nvar/nfasta : 0 , \
			nhook,((nfasta-nhook)*100)/nfasta,(nfasta > 0) ? 100*nhook/nfasta : 0 ); }' \
	</dev/null >> samples.progress
	@tail samples.progress



#######################################################################################
#######################################################################################
#######################################################################################
## Build targets in subdirectories
#######################################################################################
DATA=$(wildcard cluster_[0-9]*.dir)

data.run: data.prepare
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	@touch $@
	$(EPILOG)

$(DATA):
	@$(MAKE) -C $@ data.run-subhook 

data.run-hook: $(DATA)

data.run-subhook: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) data-hook < /dev/null 
	@touch $@
	$(EPILOG)

.PHONY: $(DATA)

#################################################################################
#################################################################################
#################################################################################
DATA_QUERIES_SUBDIR=$(wildcard *.ctl)
DATA_TARGETS_SUBDIR=$(DATA_QUERIES_SUBDIR:%.ctl=%.paml) \
			$(DATA_QUERIES_SUBDIR:%.ctl=%.tree )
DATA_OUTPUT_FILES=$(wildcard partly_fixed*.output)

data-hook: $(DATA_TARGETS_SUBDIR)

#################################################################################
#################################################################################
#################################################################################
## Mask sequences for composition and incomplete codons and remove fully gapped 
## columns
#################################################################################
%.masked_mali: %.fasta
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py --method=translate -v 0 < $< |\
	python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py --method=mask-seg -v 0	> $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
		--method=mask-codons \
		--parameters=$@_tmp \
		--method=mask-incomplete-codons \
		--verbose=0 \
	< $*.fasta |\
	python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--method=propagate-masks,remove-all-gaps,remove-empty-sequences \
		--mask-char="n" \
		--verbose=0 \
	> $@
	@rm -f $@_tmp
	$(EPILOG)

#################################################################################
#################################################################################
#################################################################################
## Run Gblocks on mali.
## Note: Gblocks always ends on error code 1, thus ignore it.
## If more than 50% is removed, keep the original alignment
#################################################################################
%.mali: %.masked_mali
	$(PRELOG)
	@rm -f $@.log
	@grep -v "#" $< |\
	perl -p -e "s/ //g" > $@_tmp
	@-Gblocks $@_tmp -t=c $(PARAM_GBLOCKS_OPTIONS) > $@.log
	@nkept=`grep "Gblocks alignment" $@.log | tail -n 1 | perl -p -e "s/.*positions \(//; s/ %\).*//;"`; \
	if [[ $${nkept} -lt "$(PARAM_GBLOCKS_MIN_KEPT)" ]]; then \
		printf "using original alignment\n" >> $@.log; \
		$(CMD_LOG2) "using original alignment"; \
		mv $@_tmp $@; \
	else \
		mv $@_tmp-gb $@; \
	fi; \
	rm -f $@_tmp*
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Prepare data for input
## 1. Convert mali to phylip format and perform the following operations on it:
##    Remove unaligned sequences
##    Rename identifiers in mali and tree to short identifiers
##    Remove alternative transcripts
##    Unroot tree
##    Remove everything but schema from identifier
%.phylip: %.mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--method=remove-unaligned-pairs,remove-all-gaps \
		--output-format=phylip \
		--log=$@.log \
	< $< |\
	perl -p -e "s/[$(PARAM_SEPARATOR)]\S+//" \
	> $@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Running paml on a control file
###########################################################################
%_fixed_w.paml: %_fixed_w.ctl %.phylip
	$(PRELOG)
	@mkdir -p $@.dir
	@cd $@.dir >& /dev/null; codeml ../$< < /dev/null > ../$@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Running paml on a control file
###########################################################################
%_variable_w.paml: %_variable_w.ctl %.phylip
	$(PRELOG)
	@mkdir -p $@.dir
	@cd $@.dir >& /dev/null; codeml ../$< < /dev/null > ../$@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Running paml on a control file
###########################################################################
%_partly_fixed.paml: %_partly_fixed.ctl %.phylip
	$(PRELOG)
	@mkdir -p $@.dir
	@cd $@.dir >& /dev/null; codeml ../$< < /dev/null > ../$@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Running paml on a control file
###########################################################################
%.tree: %.paml 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codeml2tsv.py \
		--prefix=$* \
		--method=write-ks-tree \
		$*.output |\
	python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=midpoint-root \
		--invert \
		--verbose=0 > $@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Collect data
##
## Kaks trees are filtered for a minimum of observed substitutions (ndn and sds).
## All others are not filtered.
###########################################################################
TREES_SECTIONS=fixed_w variable_w
TREES_DISTANCES=ks ka kaks sds ndn
TREES_ANALYSIS=ks ka kaks
TREES_AGGREGATES=mean stddev counts median

trees:
	$(PRELOG)
	@rm -f $@*
	@for section in $(TREES_SECTIONS); do \
		rm -f $@.tmp; \
		for dir in ../data.dir/cluster_*.dir; do \
			cluster_id=$${dir#../data.dir/cluster_}; \
			cluster_id=$${cluster_id%.dir}; \
			fa=$${dir}/cluster_$${cluster_id}_$${section}.paml; \
			fn=$${dir}/cluster_$${cluster_id}_$${section}.output; \
			if test -e $${fn} && grep -q "^Time used" $${fa}; then \
				printf "%s\t%s\n" $${fn} $${cluster_id} >> $@.tmp; \
			else \
				printf "skipped incomplete file %s\n" $${fn} >> $@.err; \
			fi; \
		done; \
		for distance in $(TREES_DISTANCES); do \
			python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
				--verbose=0 \
				--analysis=branch-specific-kaks \
				--parse-batch=$@.tmp \
				--parse-output=$${distance}-tree \
			< /dev/null \
			>> $@_$${section}_$${distance}.trees; \
		done; \
	done
	@rm -f $@.tmp
	@grep -c ">" $@_* > $@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Collect gene trees. These are the same as the species trees but
## have the gene names added.
###########################################################################
gene_trees:
	$(PRELOG)
	@rm -f $@*
	@for section in $(TREES_SECTIONS); do \
		rm -f $@.tmp; \
		for dir in ../data.dir/cluster_*.dir; do \
			cluster_id=$${dir#../data.dir/cluster_}; \
			cluster_id=$${cluster_id%.dir}; \
			fa=$${dir}/cluster_$${cluster_id}_$${section}.paml; \
			fn=$${dir}/cluster_$${cluster_id}_$${section}.output; \
			fm=$${dir}/cluster_$${cluster_id}.fasta; \
			if test -e $${fn} && grep -q "^Time used" $${fa}; then \
				printf "%s\t%s\t""\t""\t%s\n" $${fn} $${cluster_id} $${fm} >> $@.tmp; \
			else \
				printf "skipped incomplete file %s\n" $${fn} >> $@.err; \
			fi; \
		done; \
		for distance in $(TREES_DISTANCES); do \
			python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
				--verbose=0 \
				--analysis=branch-specific-kaks \
				--parse-batch=$@.tmp \
				--parse-output=$${distance}-tree \
			< /dev/null \
			>> $@_$${section}_$${distance}.trees; \
		done; \
	done
	@grep -c ">" $@_* > $@
	$(EPILOG)

analysis: 
	$(PRELOG)
	@$(MAKE) $@.dir
	@ln -sf ../input.species $@.dir/input.species
	@if test -e $@.dir; then \
	$(MAKE) -C $@.dir trees gene_trees $@-hook; \
	fi
	$(EPILOG)	

###########################################################################
###########################################################################
###########################################################################
## Filter and aggregate species tree information.
###########################################################################
%_sds.filter: %_sds.trees
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
		--filter-min-length=$(PARAM_MIN_SDS) \
		--method=filter \
		--log=$@.log \
	< $< >$@
	$(EPILOG)

%_ndn.filter: %_ndn.trees 
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
		--filter-min-length=$(PARAM_MIN_NDN) \
		--method=filter \
		--log=$@.log \
	< $< > $@
	$(EPILOG)

analysis-hook: trees gene_trees
	$(PRELOG)
	@for section in $(TREES_SECTIONS); do \
		if [ ! -e filter_$${section}_ndn.trees ]; then \
		python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
			--filter-min-length=$(PARAM_MIN_NDN) \
			--method=filter \
			--log=$@.log \
			< trees_$${section}_ndn.trees > filter_$${section}_ndn.trees; \
		fi; \
		if [ ! -e filter_$${section}_sds.trees ]; then \
			python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
			--filter-min-length=$(PARAM_MIN_SDS) \
			--method=filter \
			--log=$@.log \
			< trees_$${section}_ndn.trees > filter_$${section}_sds.trees; \
		fi; \
		for analysis in $(TREES_ANALYSIS); do \
			$(CMD_MSG2) "working on $${section} $${analysis}"; \
			if [[ $${analysis} == "kaks" ]]; then \
				$(CMD_MSG2) "filtering data with sds (>=$(PARAM_MIN_SDS) and ndn (>=$(PARAM_MIN_NDN))"; \
				python $(DIR_SCRIPTS_TOOLS)trees2trees.py \
					--filter-by-trees=filter_$${section}_sds.trees \
					--filter-by-trees=filter_$${section}_ndn.trees \
					--method=filter \
					--log=$@.log \
				< trees_$${section}_$${analysis}.trees > trees_$${section}_$${analysis} > $@.trees; \
			else \
				cat < trees_$${section}_$${analysis}.trees > trees_$${section}_$${analysis} > $@.trees; \
			fi ; \
			for type in $(TREES_AGGREGATES); do \
				$(MAKE) $@_$${type}.tree; \
				mv $@_$${type}.tree trees_$${section}_$${analysis}_$${type}.tree; \
				if [ -e $@.values ]; then \
					mv $@.values trees_$${section}_$${analysis}_$${type}.values ; \
				fi; \
			done; \
		done; \
		rm -f $@.tree; \
	done
	@touch $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
summary: summary.dir 
	$(PRELOG)
	if test -e summary.dir; then \
		$(CMD_REMOTE_SUBMIT) $(MAKE) -C summary.dir $@-hook; \
	fi
	$(EPILOG)

summary-hook: phylogeny.trees phylogeny.trees.load \
		ortholog_sets.trees ortholog_sets.trees.load
	$(PRELOG)
	@touch $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Create table for phylogeny trees
#######################################################################################
%.create-table-phylogeny-trees:
	$(CMD_LOG) "creating table $*"
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	method TEXT, \
	section TEXT, \
	distance TEXT, \
	aggregate TEXT, \
	nh TEXT, \
	svg TEXT );" \
	$(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_index1 ON $* (method);" $(TO_NULL) 

#######################################################################################
#######################################################################################
#######################################################################################
## Create a file with all possible trees
#######################################################################################
phylogeny.trees: ../analysis.dir/analysis-hook ../results.dir/results-hook
	$(PRELOG)
	@rm -f $@
	@for section in $(TREES_SECTIONS); do \
		for analysis in $(TREES_ANALYSIS); do \
			for type in $(TREES_AGGREGATES); do \
				printf "%s\t%s\t%s\t%s\t%s\t" \
					"gene_trees" \
					$${section} \
					$${analysis} \
					$${type} \
					`grep -v "#" < ../analysis.dir/trees_$${section}_$${analysis}_$${type}.tree` >> $@; \
				cat ../analysis.dir/trees_$${section}_ks_median.tree \
				    ../analysis.dir/trees_$${section}_$${analysis}_$${type}.tree |\
				python $(DIR_SCRIPTS_TOOLS)tree2svg.py \
					--filename-map=$(PARAM_ANALYSIS_DUPLICATIONS_TRANSLATION) \
					--font-style-tips=italic \
					--annotations=value \
					--verbose=0 |\
				perl -p -e "s/[\n\t]/ /g" \
				>> $@; \
				printf "\n" >> $@; \
			done; \
		done; \
	done
	@for section in variable_w; do \
		for analysis in $(TREES_ANALYSIS); do \
			for type in $(TREES_AGGREGATES); do \
				printf "%s\t%s\t%s\t%s\t%s\t" \
					"samples" \
					$${section} \
					$${analysis} \
					$${type} \
					`grep -v "#" < ../results.dir/$${analysis}_$${type}.tree` \
					>> $@; \
				cat ../results.dir/ks_mean.tree \
				    ../results.dir/$${analysis}_$${type}.tree |\
				python $(DIR_SCRIPTS_TOOLS)tree2svg.py \
					--filename-map=$(PARAM_ANALYSIS_DUPLICATIONS_TRANSLATION) \
					--font-style-tips=italic \
					--annotations=value \
					--verbose=0 |\
				perl -p -e "s/[\n\t]/ /g" \
				>> $@; \
				printf "\n" >> $@; \
			done; \
		done; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Load paralog trees into table.
#######################################################################################
phylogeny.trees.load: phylogeny.trees
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_PHYLOGENY_TREES);" > /dev/null
	@grep -v -e "#" -e "^name" < $< |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_PHYLOGENY_TREES) FROM STDIN WITH NULL AS 'na'" > $@ 
	@$(PSQL_CONNECTION) "ANALYSE $(PARAM_TABLE_NAME_PHYLOGENY_TREES)" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_PHYLOGENY_TREES): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_PHYLOGENY_TREES);' -t `"  >> $(LOG)
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Create table for phylogeny trees
#######################################################################################
%.create-table-ortholog-sets-trees:
	$(CMD_LOG) "creating table $*"
	-@$(PSQL_CONNECTION) "DROP TABLE $* CASCADE " $(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE TABLE $* ( \
	set_id INT, \
	fixed_w_dn TEXT, \
	fixed_w_ds TEXT, \
	fixed_w_dnds TEXT, \
	fixed_w_ndn TEXT, \
	fixed_w_sds TEXT, \
	variable_w_dn TEXT, \
	variable_w_ds TEXT, \
	variable_w_dnds TEXT, \
	variable_w_ndn TEXT, \
	variable_w_sds TEXT)" \
	$(TO_NULL)
	@$(PSQL_CONNECTION) "CREATE INDEX $(CMD_TABLE_PREFIX)_index1 ON $* (set_id);" $(TO_NULL) 

#######################################################################################
#######################################################################################
#######################################################################################
## Combine trees from ortholog sets
#######################################################################################
SETS_SECTIONS=fixed_w_ka fixed_w_ks fixed_w_kaks fixed_w_ndn fixed_w_sds \
	variable_w_ka variable_w_ks variable_w_kaks variable_w_ndn variable_w_sds

ortholog_sets.trees: ../analysis.dir/analysis-hook
	$(PRELOG)
	@for section in $(SETS_SECTIONS); do \
		awk '/^>/ { set_id = substr($$1,2); next; } { printf("%i\t%s\n", set_id, $$1); }' \
			< ../analysis.dir/gene_trees_$${section}.trees > $@.tmp_$${section}; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --no-titles \
		$(SETS_SECTIONS:%=$@.tmp_%) > $@
	@rm -f $@.tmp*
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Load ortholog set trees into table
#######################################################################################
ortholog_sets.trees.load: ortholog_sets.trees
	$(PRELOG)
	@$(PSQL_CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES);" > /dev/null
	@grep -v -e "#" -e "^name" < $< |\
	$(PSQL_CONNECTION) "COPY $(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES) FROM STDIN WITH NULL AS 'na'" > $@ 
	@$(PSQL_CONNECTION) "ANALYSE $(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES)" >> $@ 
	@echo "loaded into $(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES): `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_ORTHOLOG_SETS_TREES);' -t `"  >> $(LOG)
	$(EPILOG)

#######################################################################################
clean-subdir:
	rm -f *.matrix *.stats *.common_clusters 

#######################################################################################
clean:
	$(PRELOG)
	@rm -rf data.{run,dir,prepare,finish} samples.{run,dir,prepare,finish}
	$(EPILOG)

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

