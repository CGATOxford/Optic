################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.mali_rates 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
## Computing pairwise dN and dS rates for multiple alignments
## 
## Given: 
##	a tree
##
## Statistical significance
##	codeml is run twice, 
##		once, with and once without specifying for w (branch specific ka/ks) to vary.
##
## Use a sample of PARAM_SAMPLE_SIZE genes.
#################################################################################

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################

## Filename with src information using ks
PARAM_DIR_SRC_MALIS?=../malis/

## Pattern to find multiple alignments
PARAM_PATTERN_MALIS?=$(PARAM_DIR_SRC_MALIS)data.dir/cluster_%s.dir/cluster_%s.bl_mali

################################################
## Number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

PARAM_SEPARATOR?=|

################################################
## Options for Gblocks
## Here: allow up to half the sequence to have gaps
PARAM_GBLOCKS_OPTIONS?=-b5=h

## Accept Gblocks alignments, if at least 50% of positions are kept,
## otherwise keep the original
PARAM_GBLOCKS_MIN_KEPT?=50

################################################
## method to calculate pairwise dn/ds
## choose between paml and xrate
PARAM_RATE_METHOD?="paml"

################################################
## extra options for rate computation
## --with-rho: add rho values to output
## --with-counts: add counts values to output
## see mali2kaks.py for further options
PARAM_RATE_EXTRA_OPTIONS?=--with-rho --with-counts

################################################
# Section parameters: end
################################################
REQUISITES=input.species input.tree input.map

GENOMES_COMMA=`grep -v "^\#" input.species | xargs | perl -p -e "s/ +/,/g"`

#######################################################################################
#######################################################################################
#######################################################################################
## preparation of using all sets
#######################################################################################
data.prepare:
	$(PRELOG)
	$(MAKE) data.dir
	$(CMD_LOG) "creating directories and writing malis."
	@python $(DIR_SCRIPTS_TOOLS)malis2malis.py \
		--filename-components=input.map \
		--pattern-mali=$(PARAM_PATTERN_MALIS) \
	       	--pattern-component="^(\S+)" \
		--pattern-output="data.dir/cluster_%s.dir/cluster_%s.fasta" \
		--pattern-filter="^([^|]+)[|]" \
		--filename-filter=input.species \
		--output-format=fasta > $@
	$(CMD_LOG) "adding files to directories."
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		ln -fs ../../Makefile $${d}/Makefile; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Progress report
#######################################################################################
data.show-progress:
	@echo "# prediction status at `date`" >> data.progress
	@nhook=0;nfasta=0;nrates=0; \
	for d in data.dir/cluster*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		if test -s $${d}/cluster_$${cluster_id}.fasta; then let "nfasta=nfasta+1"; fi; \
		if test -s $${d}/cluster_$${cluster_id}.rates; then let "nrates=nrates+1"; fi; \
		if test -e $${d}/data.run-subhook; then let "nhook=nhook+1"; fi; \
	done; \
	awk -v nfasta="$${nfasta}" -v nrates="$${nrates}" -v nhook="$${nhook}" \
	   'END {  printf("# N\tNRATES\tPLEFT\tRSUCC\tNHOOK\tPLEFT\tRSUCC\n"); \
		printf("%i\t%i\t%5.2f\t%5.2f\t%i\t%5.2f\t%5.2f\n", \
			nfasta,\
			nrates,((nfasta-nrates)*100)/nfasta,(nfasta > 0) ? 100*nrates/nfasta : 0, \
			nhook,((nfasta-nhook)*100)/nfasta,(nfasta > 0) ? 100*nhook/nfasta : 0 ); }' \
	</dev/null >> data.progress
	@tail data.progress

#######################################################################################
#######################################################################################
#######################################################################################
## Show missing files
#######################################################################################
data.show-unfinished:
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}.rates; \
		if test -e $${file} && ! grep -q "# job finished" $${file}; then \
			$(CMD_MSG2)  "unfinished $${file}"; \
		fi; \
	done

#######################################################################################
#######################################################################################
#######################################################################################
## Remove incomplete files files
#######################################################################################
data.remove-unfinished:
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}.rates; \
		if test -e $${file} && ! grep -q "# job finished" $${file}; then \
			$(CMD_MSG2)  "removing $${file};" >> $@.log; \
			rm -f $${file}; \
		fi; \
	done

#######################################################################################
#######################################################################################
#######################################################################################
## Build targets in subdirectories
#######################################################################################
DATA=$(wildcard cluster_[0-9]*.dir)

data.run: data.prepare
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	$(EPILOG)

$(DATA):
	@$(MAKE) -C $@ data.run-subhook 

data.run-hook: $(DATA)

data.run-subhook: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) data-hook < /dev/null 
	@touch $@
	$(EPILOG)

.PHONY: $(DATA)

#################################################################################
#################################################################################
#################################################################################
DATA_QUERIES_SUBDIR=$(wildcard *.fasta)
DATA_TARGETS_SUBDIR=$(DATA_QUERIES_SUBDIR:%.fasta=%.masked_mali) \
		$(DATA_QUERIES_SUBDIR:%.fasta=%.rates) 

data-hook: $(DATA_TARGETS_SUBDIR)

#################################################################################
#################################################################################
#################################################################################
## Mask sequences for composition and incomplete codons and remove fully gapped 
## columns
#################################################################################
%.masked_mali: %.fasta
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py --method=translate -v 0 < $< |\
	python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py --method=mask-seg -v 0	> $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
		--method=mask-codons \
		--parameters=$@_tmp \
		--method=mask-incomplete-codons \
		--verbose=0 \
	< $*.fasta |\
	python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--method=propagate-masks,remove-all-gaps,remove-empty-sequences \
		--mask-char="n" \
		--verbose=0 \
	> $@
	@rm -f $@_tmp
	$(EPILOG)

#################################################################################
#################################################################################
#################################################################################
## Run Gblocks on mali.
## Note: Gblocks always ends on error code 1, thus ignore it.
## If more than 50% is removed, keep the original alignment
#################################################################################
%.mali: %.masked_mali
	$(PRELOG)
	@rm -f $@.log
	@grep -v "#" $< |\
	perl -p -e "s/ //g" > $@_tmp
	@-Gblocks $@_tmp -t=c $(PARAM_GBLOCKS_OPTIONS) > $@.log
	@nkept=`grep "Gblocks alignment" $@.log | tail -n 1 | perl -p -e "s/.*positions \(//; s/ %\).*//;"`; \
	if [[ $${nkept} -lt "$(PARAM_GBLOCKS_MIN_KEPT)" ]]; then \
		printf "using original alignment\n" >> $@.log; \
		$(CMD_LOG2) "using original alignment"; \
		mv $@_tmp $@; \
	else \
		mv $@_tmp-gb $@; \
	fi; \
	rm -f $@_tmp*
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Compute rates
## 1. Perform the following cleaing operations:
##    Remove unaligned sequences
##    Remove columns that contain just gaps
%.rates: %.mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--method=remove-unaligned-pairs,remove-all-gaps \
		--verbose=0 \
	< $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)mali2kaks.py \
		$(PARAM_RATE_EXTRA_OPTIONS) \
		--pairwise \
		--method=$(PARAM_RATE_METHOD) \
	> $@
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################
## Analysis targets
analysis: analysis.dir

###########################################################################
###########################################################################
###########################################################################
analysis.dir/results.table:
	$(PRELOG)
	@rm -f $@
	@for d in data.dir/cluster*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}.rates; \
		if test -e $${file}; then \
			awk -v cluster_id="$${cluster_id}" \
			'/^#/ { next; } \
			/seq1/ { printf("cluster_id\t%s\n", $$0) > "$@_tmp1" ; next; } \
			{ printf("%i\t%s\n", cluster_id, $$0); }' \
			< $${file} >> $@_tmp2; \
		else \
			$(CMD_MSG2) "file $${file} not present.\n" >> $@.err; \
		fi; \
	done
	@cat $@_tmp1 $@_tmp2 >> $@
	@rm -f $@_tmp*
	$(EPILOG)

###########################################################################
###########################################################################
###########################################################################

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

