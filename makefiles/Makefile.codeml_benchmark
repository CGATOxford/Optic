################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codeml_benchmark 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
## Analysis of kaks values using codeml
## 
## Given: 
##	a tree
##
## Statistical significance
##	codeml is run twice, 
##		once, with and once without specifying for w (branch specific ka/ks) to vary.
##
## Use a sample of PARAM_SAMPLE_SIZE genes.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################

## project name
PARAM_PROJECT_NAME?=codeml_benchmark

## lengths of sequences to simulate
PARAM_BENCHMARK_LENGTHS?=100 200 500 1000 2000 5000 10000

## omegas to benchmark with
PARAM_BENCHMARK_OMEGAS?=0.3

## kappas to benchmark with
PARAM_BENCHMARK_KAPPAS?=2.0

## ds to benchmark with
PARAM_BENCHMARK_DS?=0.1 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0

## methods for ds estimation to benchmark with
PARAM_BENCHMARK_METHODS?=paml xrate

## number of samples per benchmark entry
PARAM_NUM_SAMPLES?=2

## number of replicates per benchmark entry
PARAM_NUM_REPLICATES?=20

ANALYSIS_SECTIONS?=count min max mean median stddev sum
ANALYSIS_VALUES?=dN dS dNdS kappa rN rS rN0 rS0

################################################
## Application specific options
PARAM_XRATE_MODEL?=akaksgc

PARAM_XRATE_OPTIONS?=--xrate-insert-frequencies 
#		--xrate-fix-frequencies


################################################
# Section parameters: end
################################################

data.prepare: 
	$(PRELOG)
	@rm -rf data.dir
	@mkdir data.dir
	@ln -s ../Makefile data.dir/Makefile
	@printf "sample\tomega\tkappa\tds\tlength\tdirectory\n" > data.log
	@n=0; \
	for omega in $(PARAM_BENCHMARK_OMEGAS); do \
	for kappa in $(PARAM_BENCHMARK_KAPPAS); do \
	for ds in $(PARAM_BENCHMARK_DS); do \
	for length in $(PARAM_BENCHMARK_LENGTHS); do \
		let n=$${n}+1; \
		$(CMD_MSG2) "processing sample $${n}"; \
		target_dir=data.dir/sample_$${n}.dir; \
		mkdir $${target_dir}; \
		ln -s ../../Makefile $${target_dir}/Makefile; \
		printf "%i\t%s\t%s\t%s\t%s\t%s\n" $${n} $${omega} $${kappa} $${ds} $${length} $${target_dir}/sample_$${n}.fasta >> data.log; \
		for ((replicate=1;replicate<=$(PARAM_NUM_REPLICATES);replicate+=1)); do \
			python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
				--flavour=evolver \
				--filename-sequences=input.fasta \
				--evolver-replicates=$(PARAM_NUM_SAMPLES) \
				--evolver-length=$${length} \
				--set-omega=$${omega} \
				--set-kappa=$${kappa} \
				--evolver-ds=$${ds} \
				--log=$@ \
			> $${target_dir}/replicate_$${replicate}.fasta; \
		done; \
	done; \
	done; \
	done; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## run target
#######################################################################################
DATA=$(wildcard sample_[0-9]*.dir)

data.run: data.prepare
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	$(EPILOG)

$(DATA):
	@$(MAKE) -C $@ data.run-subhook 

data.run-hook: $(DATA)

data.run-subhook: 
	$(PRELOG)
	@$(MAKE) data-hook data-summary < /dev/null 
	@touch $@
	$(EPILOG)

.PHONY: $(DATA) data-hook data-summary

#######################################################################################
#######################################################################################
#######################################################################################
## targets to execute in the individual directories
#######################################################################################
DATA_QUERIES_SUBDIR=$(wildcard *.fasta)
DATA_TARGETS_SUBDIR=$(DATA_QUERIES_SUBDIR:%.fasta=%.paml) $(DATA_QUERIES_SUBDIR:%.fasta=%.xrate) 

data-hook: $(DATA_TARGETS_SUBDIR) 

%.paml: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)mali2kaks.py \
		--method=paml \
		--pairwise \
		--with-rho \
		--iteration=pairwise \
	< $< > $@
	$(EPILOG)

%.xrate: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)mali2kaks.py \
		--method=xrate \
		--pairwise \
		--with-rho \
		--iteration=pairwise \
		--xrate-model=$(PARAM_XRATE_MODEL) \
		$(PARAM_XRATE_OPTIONS) \
	< $< > $@
	$(EPILOG)

data-summary: $(DATA_TARGETS_SUBDIR)
	$(PRELOG)
	@for x in $(PARAM_BENCHMARK_METHODS); do \
		rm -f $${x}.data; \
		for v in $(ANALYSIS_VALUES); do \
			printf "%s\t" $${v} >> $${x}.data; \
		done; \
		perl -p -i -e "s/\t$$/\n/" $${x}.data; \
		printf "puser\tpsys\tcuser\tcsys\n" > $${x}.times; \
		for y in *.$${x}; do \
			python $(DIR_SCRIPTS_TOOLS)csv_cut.py --verbose=0 \
				$(ANALYSIS_VALUES) \
			< $${y} | grep -v "dN" >> $${x}.data; \
			tail -n 1 $${y} | grep "# job finished" | perl -p -e "s/^.*\-\-\s+//; s/\s+/\t/g" >> $${x}.times; \
			printf "\n" >> $${x}.times; \
		done; \
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--format="%6.4f" \
		< $${x}.times > $${x}.time_stats; \
		python $(DIR_SCRIPTS_TOOLS)data2stats.py \
			--format="%6.4f" \
		< $${x}.data > $${x}.stats; \
	done
	$(EPILOG)

#######################################################################################
## Analysis targets
#######################################################################################

#######################################################################################
#######################################################################################
#######################################################################################
## Build one big table with all benchmark results
#######################################################################################

analysis.dir/table:
	$(PRELOG)
	@rm -f $@.*
	@for section in $(ANALYSIS_SECTIONS); do \
	    for value in $(ANALYSIS_VALUES); do \
	    	printf "sample" > $@.$${section}_$${value}; \
	    	for method in $(PARAM_BENCHMARK_METHODS); do \
			printf "\t%s_%s" $${method} $${value} >> $@.$${section}_$${value}; \
		done; \
		printf "\n" >> $@.$${section}_$${value}; \
	    done; \
	done;
	@for dir in data.dir/sample*.dir; do \
	  x=$${dir#data.dir/sample_}; \
	  id=$${x%.dir}; \
          $(CMD_MSG2) "processing $${id}"; \
	  for section in $(ANALYSIS_SECTIONS); do \
	    for value in $(ANALYSIS_VALUES); do \
		printf "%s" $${id} >> $@.$${section}_$${value}; \
		for method in $(PARAM_BENCHMARK_METHODS); do \
			python $(DIR_SCRIPTS_TOOLS)csv_cut.py category $${value} < $${dir}/$${method}.stats |\
			grep "$${section}" | awk '{printf("\t%s", $$2);}' >> $@.$${section}_$${value}; \
		done; \
	    printf "\n" >> $@.$${section}_$${value}; \
	    done; \
	  done; \
	done
	$(EPILOG)

analysis.dir/table.ext:
	$(PRELOG)
	@rm -f analysis.dir/table*.ext
	@for file in analysis.dir/table.*; do \
          $(CMD_MSG2) $${file}; \
          python $(DIR_SCRIPTS_TOOLS)combine_tables.py -v 0 data.log $${file} > $${file}.ext ; \
	done
	$(EPILOG)

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
