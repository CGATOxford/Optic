################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_malis_bootstrap 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#######################################################################
## Commands for bootstrapping
%.bs: %.mali 
	$(PRELOG)
	$(CMD_MSG) "bootstrapping of cluster $* started." >> $*.log
	@num_sequences=`grep -c ">" $*.fasta`; \
	if [[ $${num_sequences} -gt 3 ]]; then \
		$(CMD_MSG2) "waiting for assignment to cluster node" >> $*.log; \
		$(CMD_REMOTE_SUBMIT) ../bootstrap.bash $* < /dev/null >> $*.log; \
	else \
		$(CMD_MSG2) "$*: no bootstrapping, because only $${num_sequences} sequences." >> $*.log; \
		echo ">cluster# $*_1" > bootstrap_$*.evaluate.components; \
		for s in `grep ">" $*.fasta | perl -p -e "s/>//"`; do \
			printf "%s\t%s_1\n" $${s} $* >> $*.bs_evaluate.components; \
		done; \
	fi
	$(CMD_MSG) "bootstrapping of cluster $* finished." >> $*.log;
	@touch $@
	$(EPLIOG)

#################################################
## bootstrapping using dnadist
%.bs_input: %.na_mali
	$(PRELOG)
	@grep -v "#" < $*.na_mali |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--create=bootstrap_$*.index \
	--regex-token=">(\S+)" \
	--pattern-sub="id%s" |\
	perl -p -e "s/ //g" > $@_tmp;
	@seq_extract \
		--output_format p \
		--sequences $@_tmp > $@
	@rm -f $@_tmp;
	$(EPILOG)

%.bs_samples: %.bs_input
	$(PRELOG)
	@rm -f outfile outtree
	@echo -e "$*.bs_input\n$(OPTIONS_BOOTSTRAP_SAMPLE)Y\n$(OPTIONS_BOOTSTRAP_RANDOM_SEED)\n" |\
	$(CMD_BOOTSTRAP_SAMPLE) > $@.log
	@mv outfile $@
	$(EPILOG)

%.bs_dist: %.bs_samples
	$(PRELOG)
	@rm -f outfile outtree
	@echo -e "$*.bs_samples\n$(OPTIONS_BOOTSTRAP_MATRIX)Y" |\
	$(CMD_BOOTSTRAP_MATRIX) > $@.log
	@mv outfile $@
	$(EPILOG)

%.bs_dnd: %.bs_dist
	$(PRELOG)
	@rm -f outfile outtree
	@echo -e "$*.bs_dist\n$(OPTIONS_BOOTSTRAP_TREE)Y" |\
	$(CMD_BOOTSTRAP_TREE) > $@.log
	@mv outtree $@
	$(EPILOG)

%.bs_partitions: %.bs_dnd
	$(PRELOG)
	@rm -f outfile outtree
	@echo -e "$*.bs_dnd\n$(OPTIONS_BOOTSTRAP_CONSENSUS)Y" |\
	$(CMD_BOOTSTRAP_CONSENSUS) > $@.log
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=bootstrap_$*.index \
	--regex-token="(id\d+)" \
	--invert < outfile >  $@
	@python $(DIR_SCRIPTS_TOOLS)tree_map_leaves.py \
	--apply=bootstrap_$*.index \
	--invert < outtree |\
	grep -v "#" > $@.dnd
	@rm -f outtree outfile
	$(EPILOG)

%.bs_evaluate: %.bs_partitions
	$(PRELOG)
	@rm -f $@.*
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_bootstrap.py \
		--prefix=$* \
		--reference-tree="$(PARAM_SPECIES_TREE)" \
		--file-clusters=$@.components \
		--file-inconsistencies=$@.inconsistencies \
		--file-subtrees=$@.subtrees \
		--verbose=2 \
		--min-report-support=$(PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT) \
		--min-cluster-support=$(PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT) \
		< $*.bs_partitions > $@ 
	$(EPILOG)

####################################################################
## evalulate multiple alignment to create good subsets.
## use the bootstrap split as an initial partition
%.qc: %.mali %.bs 
	$(CMD_MSG) "quality controlling of cluster $* started." >> $*.log
	@$(CMD_REMOTE_SUBMIT) \
		python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_mali.py \
		--components=$*.bs_evaluate.components \
		--prefix= \
		--cluster \
		--exons=$*.exons \
		--master-pattern='$(PARAM_INPUT_GENOME_MASTER)' \
		--remove-fragments \
		--verbose=2 \
		--file-bootstrap=$*.bs_partitions \
		--file-tree=../reference_tree \
		--min-report-support=$(PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT) \
		--min-cluster-support=$(PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT) \
	< $*.raw_mali > $@
	$(CMD_MSG) "quality controlling of cluster $* finished." >> $*.log

