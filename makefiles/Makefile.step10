################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step10 2011 2008-07-04 10:40:51Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## assign a quality index to each prediction.
##############################################################################
step10:  step9 step10.queries.load step10.quality
	$(EPILOG)
	@touch $@

#############################################################################
## command abbreviations for quality SQL statements
CMD_QUALITY_CLASSES=WHERE prediction_id IN (SELECT a.prediction_id FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS a, $(PARAM_TABLE_NAME_QUALITY) AS q WHERE a.prediction_id = q.prediction_id AND 
CMD_QUALITY_EXON_CLASSES=WHERE prediction_id IN ( SELECT a.prediction_id FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS a, $(PARAM_TABLE_NAME_QUALITY) AS q, $(PARAM_TABLE_NAME_EXONS) AS e, $(PARAM_TABLE_NAME_QUERIES) AS u, $(PARAM_TABLE_NAME_EXONS_SUMMARY) AS s WHERE a.prediction_id = q.prediction_id AND e.prediction_id = a.prediction_id AND u.query_token = a.query_token AND s.prediction_id = a.prediction_id AND
CMD_QUALITY_IS_PSEUDO=(q.has_stopcodon=TRUE OR q.has_frameshift=TRUE)
CMD_QUALITY_ISNOT_PSEUDO=q.has_stopcodon=FALSE AND q.has_frameshift=FALSE
CMD_QUALITY_IS_FULL=a.query_coverage >= $(PARAM_QUALITY_MIN_COVERAGE)
CMD_QUALITY_ISNOT_FULL=a.query_coverage < $(PARAM_QUALITY_MIN_COVERAGE)
CMD_QUALITY_UNCLASSIFIED=q.class = 'UK'

## Check whether prediction is a single exon gene: no introns and no missed exons of prediction
CMD_QUALITY_SINGLE_EXON=a.nintrons = 0 AND (s.deleted_exons + s.deleted_cexons + s.deleted_nexons) = 0

CMD_QUALITY_MULTI_EXON=a.nintrons > 0
CMD_QUALITY_QUERY_SINGLE_EXON=u.nexons = 1
CMD_QUALITY_QUERY_MULTI_EXON=u.nexons > 1
CMD_QUALITY_IS_CONSERVED=q.is_conserved = TRUE
CMD_QUALITY_IS_PARTIALLY_CONSERVED=q.is_conserved = FALSE AND q.is_partially_conserved = TRUE
CMD_QUALITY_IS_UNCONSERVED=q.is_conserved = FALSE AND q.is_partially_conserved = FALSE

step10.queries.load: step9 $(PARAM_INPUT_MAP)
	$(PRELOG)
	$(CMD_LOG) "$(PARAM_TABLE_NAME_QUERIES): setting members/representatives"
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_QUERIES)" > /dev/null
	@grep -v -e "#" -e "^rep" $(PARAM_INPUT_MAP) | cut -f 1,2 |\
	awk 'BEGIN { n = 0; a = "0"; for(x=0; x < $(QUALITY_NUM_CLASSES)-1; ++x) {a = (a ",0")};} \
	{printf("%i\t%s\t%s\t0\t0\t0\t0\t0\t0\t0\t{%s}\t{%s}\n", ++n, $$2, $$1, a, a);}' |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_QUERIES) FROM STDIN WITH NULL AS 'na'" > $@ 
	$(CMD_LOG) $(PARAM_TABLE_NAME_QUERIES): setting number of exons
	@awk -v c="'" '{ if ($$1 != last) \
		{ if (last) { printf("UPDATE %s SET nexons=%i WHERE query_token=%s%s%s;\n", \
					"$(PARAM_TABLE_NAME_QUERIES)", n, c, last, c); } \
		  n = 0; last = $$1; }; \
		++n; \
	     } \
		END { printf("UPDATE %s SET nexons=%i WHERE query_token=%s%s%s;\n", \
					"$(PARAM_TABLE_NAME_QUERIES)", n, c, last, c); } ' \
	< $(PARAM_INPUT_EXONS) > $@.tmp
	@$(CONNECTION_BATCH) $@.tmp > /dev/null
	@rm -f $@.tmp
	@touch $@
	$(EPILOG)

##############################################################################
## Create quality information
step10.quality: step10.quality_init step10.quality_set_best step10.quality_set_frameshift step10.quality_set_stopcodon \
	step10.quality_set_conserved step10.quality_set_partially_conserved \
	step10.quality_set_class step10.quality_set_range
	$(EPILOG)
	@touch $@

##############################################################################
## initialize quality index table
step10.quality_init: step9 step10.queries.load
	$(PRELOG)
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_QUALITY)" > $@
	@$(CONNECTION) "INSERT INTO $(PARAM_TABLE_NAME_QUALITY) SELECT prediction_id FROM $(PARAM_TABLE_NAME_PREDICTIONS)" >> $@
	$(EPILOG)

##############################################################################
## set best prediction flag
## the best prediction for a given query is decided in the following order:
## highest coverage, highest percent identity
step10.quality_set_best: step10.quality_init
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_best_prediction = FALSE" > /dev/null
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_best_prediction = TRUE \
	WHERE prediction_id IN (\
	SELECT a.prediction_id \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS a \
	WHERE a.prediction_id = \
	(SELECT b.prediction_id \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS b \
	WHERE a.query_token = b.query_token \
	ORDER BY b.query_coverage DESC, b.pidentity DESC \
	LIMIT 1))" > $@
	$(EPILOG)

##############################################################################
## set frameshifts
## Check, if predicted gene has frameshifts. Only use well predicted exons 
## (pidentity of exon within x% of pidentity of whole gene)
step10.quality_set_frameshift: step10.quality_init
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET has_frameshift = FALSE" > /dev/null
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET has_frameshift = TRUE \
	WHERE prediction_id IN (\
	SELECT a.prediction_id \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS a, \
	$(PARAM_TABLE_NAME_EXONS) AS e \
	WHERE a.prediction_id = e.prediction_id AND \
	e.pidentity >= $(PARAM_QUALITY_GOOD_EXON_THRESHOLD) * a.pidentity / 100 \
	GROUP BY a.prediction_id \
	HAVING SUM(e.nframeshifts) > 0)" > $@
	$(EPILOG)

##############################################################################
## set stopcodons
## Check, if predicted gene has in-frame stopcodons. Only use well predicted exons 
## (pidentity of exon within x% of pidentity of whole gene)
step10.quality_set_stopcodon: step10.quality_init
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET has_stopcodon = FALSE" > /dev/null
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET has_stopcodon = TRUE \
	WHERE prediction_id IN (\
	SELECT a.prediction_id \
	FROM $(PARAM_TABLE_NAME_PREDICTIONS) AS a, \
	$(PARAM_TABLE_NAME_EXONS) AS e \
	WHERE a.prediction_id = e.prediction_id AND \
	e.pidentity >= $(PARAM_QUALITY_GOOD_EXON_THRESHOLD) * a.pidentity / 100 \
	GROUP BY a.prediction_id \
	HAVING SUM(e.nstopcodons) > 0)" > $@
	$(EPILOG)

##############################################################################
## set flag for conserved gene structure
## 
step10.quality_set_conserved: step10.quality_init 
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_conserved = FALSE" > /dev/null
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_conserved = TRUE \
	WHERE prediction_id IN (\
	SELECT e.prediction_id FROM $(PARAM_TABLE_NAME_EXONS_SUMMARY) AS e \
	WHERE \
	e.number = 0 AND \
	e.dubious_exons = 0 AND \
	e.boundaries_max <= 10 AND \
	e.identical_exons > 0 AND e.inserted_exons = 0 AND \
	e.deleted_exons = 0 AND e.inserted_introns = 0 AND \
	e.deleted_introns = 0)" > $@
	$(EPILOG)

step10.quality_set_partially_conserved: step10.quality_set_conserved
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_partially_conserved = FALSE" > /dev/null
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET is_partially_conserved = TRUE \
	WHERE prediction_id IN (\
	SELECT e.prediction_id \
		FROM $(PARAM_TABLE_NAME_EXONS_SUMMARY) AS e,  \
		     $(PARAM_TABLE_NAME_PREDICTIONS) AS a \
	WHERE \
	a.prediction_id = e.prediction_id AND \
	(e.identical_exons > 0 OR \
	 ( a.query_coverage >= $(PARAM_QUALITY_MIN_COVERAGE) AND \
	   ( (e.deleted_introns = 1 AND a.nintrons = 0) OR \
	     (e.inserted_introns = 1 AND a.nintrons = 1) ) ) \
	 ) )" > $@
	$(EPILOG)

## set quality classification for genes. The codes are:
## frag: is_fragment
## pseudo: is pseudogene
## cons: is_conserved
## pcons: is_partially_conserved
## nint: number of introns in prediction
## qnint: number of introns in query
##                                    	frag	pseudo	cons	pcons	nint	qnint	comment
## Genes
## 'CG': conserved gene		      	N	N	Y	Y	>0	?	likely ortholog assignment
## 'SG': single exon gene		N	N	?	?	0	0	single exon prediction for single exon query
## 'PG': partially conserved gene	N	N	N	Y	>0	?	dubious ortholog assignment, maybe paralog
## 'RG': retrotransposed gene		N	N	?	?	0	>1	retrotransposed gene (identical copy, all introns lost, no missed exons)
## 'UG': unconserved gene		N	N	?	?	?	?	other full length predictions
## Pseudogenes
## 'CP': duplicated pseudogene		N	Y	Y	?	>0	?	pseudogene with identical gene structure as query
## 'SP': single exon pseudogene		N	Y	?	?	0	0	single exon pseudogene, derived from a single exon query
## 'PP': partially conserved pseudo	N	Y	N	Y	>0	?	partially conserved pseudogene
## 'RP': processed pseudogene		N	Y	?	?	0	>1	retrotransposed pseudogene (identical copy, all introns lost, no missed exons)
## 'UP': unconserved pseudogene 	N	Y	?	?	?	?	other full length pseudogenes
## Fragments
## 'SF': single exon fragment		Y	N	?	?	0	0	fragment of single exon from single exon gene
## 'CF': conserved fragment		Y	N	Y	?	?	?	conserved fragment
## 'PF': partially conserved fragment	Y	N	N	Y	?	?	partially conserved fragment
## 'UF': unconserved fragment		Y	N	?	?	?	?	other fragments
## 'BF': pseudogenic fragment		Y	Y	?	?	?	?	pseudogenic fragments

step10.quality_set_class: step10.quality_init \
	step10.quality_set_conserved step10.quality_set_partially_conserved \
	step10.quality_set_stopcodon step10.quality_set_frameshift
	$(PRELOG)
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'UK'" > $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'CG' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_IS_CONSERVED) AND \
	$(CMD_QUALITY_MULTI_EXON) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'SG' $(CMD_QUALITY_EXON_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_SINGLE_EXON) AND \
	$(CMD_QUALITY_IS_FULL) AND \
	$(CMD_QUALITY_QUERY_SINGLE_EXON) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'PG' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_IS_PARTIALLY_CONSERVED) AND \
	$(CMD_QUALITY_MULTI_EXON) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'RG' $(CMD_QUALITY_EXON_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_SINGLE_EXON) AND \
	$(CMD_QUALITY_IS_FULL) AND \
	$(CMD_QUALITY_QUERY_MULTI_EXON) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'UG' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'CP' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_MULTI_EXON) AND \
	$(CMD_QUALITY_IS_CONSERVED) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'SP' $(CMD_QUALITY_EXON_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_SINGLE_EXON) AND \
	$(CMD_QUALITY_IS_FULL) AND \
	$(CMD_QUALITY_QUERY_SINGLE_EXON) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'PP' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_IS_PARTIALLY_CONSERVED) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'RP' $(CMD_QUALITY_EXON_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_SINGLE_EXON) AND \
	$(CMD_QUALITY_IS_FULL) AND \
	$(CMD_QUALITY_QUERY_MULTI_EXON) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'UP' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_IS_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'SF' $(CMD_QUALITY_EXON_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_SINGLE_EXON) AND \
	$(CMD_QUALITY_ISNOT_FULL) AND \
	$(CMD_QUALITY_QUERY_SINGLE_EXON) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'CF' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_IS_CONSERVED) AND \
	$(CMD_QUALITY_ISNOT_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'PF' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_IS_PARTIALLY_CONSERVED) AND \
	$(CMD_QUALITY_ISNOT_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'UF' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_ISNOT_PSEUDO) AND \
	$(CMD_QUALITY_ISNOT_FULL) )" >> $@
	@$(CONNECTION) "UPDATE $(PARAM_TABLE_NAME_QUALITY) SET class = 'BF' $(CMD_QUALITY_CLASSES) \
	$(CMD_QUALITY_UNCLASSIFIED) AND \
	$(CMD_QUALITY_IS_PSEUDO) AND \
	$(CMD_QUALITY_ISNOT_FULL) )" >> $@
	@echo "# Quality: set classes of genes" >> $(LOG)
	@$(CONNECTION) "SELECT class, COUNT(*) FROM $(PARAM_TABLE_NAME_QUALITY) GROUP BY class" >> $(LOG)
	$(EPILOG)

##############################################################################
## set genomic region
## take minimum/maximum of genomic range of exons, that are good.
step10.quality_set_range: step10.quality_init
	$(PRELOG)
	@$(CONNECTION) "SELECT \
		e.prediction_id, MIN(e.genome_exon_from), MAX(e.genome_exon_to) \
		FROM $(PARAM_TABLE_NAME_EXONS) AS e \
		WHERE \
		e.is_ok = TRUE AND \
		e.genome_exon_to <> 0 \
		GROUP BY e.prediction_id" $(CONNECTION_OPTIONS) |\
	awk '{printf("UPDATE $(PARAM_TABLE_NAME_QUALITY) \
		SET sbjct_genome_from = %i, sbjct_genome_to = %i \
		WHERE prediction_id = %i;\n", $$2, $$3, $$1); }' > $@_tmp 
	@$(CONNECTION_BATCH) $@_tmp > $@ 2> /dev/null
	@rm -f $@_tmp
	@touch $@
	$(EPILOG)

