################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.sites_slr 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## Calculating site-specific ka/ks values.
## 
## This pipeline follows the recipe of Leo's
##
## 1. Build pairwise ka/ks
## 2. Build tree with fitch
## 3. Run site-specific mode with PAML using three initial values for omega:
##    0.03, 0.3, 1.3
## 4  Parse results
##
## The input is obtained from a directory of multiple alignments and a file
## of components/sequences to take.
##
#################################################################################
SHELL=/bin/bash --login

LOG=log

## priority on the cluster
PARAM_PRIORITY?=-10

## queue to use
PARAM_QUEUE?=medium_jobs.q

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=codeml_sites
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

## Filename with src information using ks
PARAM_DIR_SRC_MALIS?=../../orthology_malis/

## Number of samples
PARAM_NUM_SAMPLES?=20

## Number of genes per sample
PARAM_SAMPLE_SIZE?=200

################################################
## species tree
PARAM_SPECIES_TREE?=

################################################
## directories and database schemas
PARAM_SRC_SCHEMAS?=

## Number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## Pattern for translation
PARAM_PATTERN_TRANSLATION?=s/_vs_dmel\d+//g

PARAM_SRC_NAMES=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "$(PARAM_PATTERN_TRANSLATION)"`

################################################
## Mask sequences - leave empty if not desired
PARAM_MASK_MALI?=1

################################################
## Restrict positive sites to those with an omega 
## larger than this
PARAM_FILTER_SITES_OMEGA?=1.0

################################################
## Restrict positive sites to those with a probability
## larger than this:
PARAM_FILTER_SITES_PROBABILITY?=0.90

################################################
## Use the following models:
## 2: nested models 1 and 2
## 3: nested models 0 and 3
## 8: nested models 7 and 8
PARAM_FILTER_MODELS?=2 8

################################################
## Use the following methods:
## beb: bayesian empirical bayes
## neb: naive empirical bayes
PARAM_FILTER_METHOD?=beb

################################################
## Significance threshold for log-likelihood test
PARAM_SIGNIFICANCE_THRESHOLD?=0.05

################################################
## Initial value for kappa [Slr default: 2.0]
PARAM_INITIAL_KAPPA?=2.0

## Initial value for omega [Slr default: 0.1]
PARAM_INITIAL_OMEGA?=0.1

## Set this to one, if you only want sites under
## positive selection
PARAM_POSITIVE_ONLY?=0

################################################
## Significance threshold for over-representation test
PARAM_ANALYSIS_SIGNIFICANCE_THRESHOLD?=0.01

################################################
## Options for analysis
PARAM_ANALYSIS_MASTER_SCHEMA?=dmel_vs_dmel4

################################################
## number of samples for GO zscore calculation.
PARAM_ANALYSIS_GO_SAMPLES?=1000
PARAM_ANALYSIS_GO_SLIMS?=/net/cpp-data/backup/andreas/projects/flies/data_1v5/go2goslim.map
PARAM_ANALYSIS_GO_THRESHOLD=0.05
PARAM_ANALYSIS_GO_CATEGORIES=biol_process cell_location mol_function

PARAM_ANALYSIS_ENSEMBL_HOST?=ensembldb.ensembl.org
PARAM_ANALYSIS_ENSEMBL_USER?=anonymous
PARAM_ANALYSIS_ENSEMBL_PASSWORD?=
## database on where to get GO assignments from.
# For flies: used to be version 37
# PARAM_ANALYSIS_ENSEMBL_DATABASE?=ensembl_mart_37
PARAM_ANALYSIS_ENSEMBL_DATABASE?=ensembl_mart_41

## Number of sites to output 0=all
PARAM_TRUNCATE_SITE_LIST?=5

################################################
# Section parameters: end
################################################
REQUISITES=input.species input.tree input.map

#####################################################################################
#####################################################################################
#####################################################################################
## Translate branch designations into terminal codes
CMD_MY_TRANSLATE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=my_translation --column=1

GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.sites_run

data.show-progress:
	@echo "# prediction status at `date`" >> data.progress
	@find data.dir -name "cluster*[0-9].sites" -not -empty |\
	awk -v ntotal=`find data.dir -name "*.fasta" | wc -l` \
	'{ nfinished+=1; } \
	END {   printf("# NFIN\tNSTART\tNLEFT\tPLEFT\n"); \
		printf("%i\t%i\t%i\t%5.2f\n", nfinished,ntotal,ntotal-nfinished,((ntotal-nfinished)*100)/ntotal); }' \
	>> data.progress
	@tail data.progress

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Targets to execute in subdirectory
#######################################################################################
QUERY_SUBDIR=$(wildcard cluster_*.fasta)
TARGET_SUBDIR=$(QUERY_SUBDIR:%.fasta=%.sites) $(QUERY_SUBDIR:%.fasta=%_null.sites)

sites.run-hook: $(TARGET_SUBDIR)

## include rules for pre-processing sequence for site
## specific analysis
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.sites_preparation

## Add prefix to tree file.
%.sites: %.phylip %.ptree
	$(PRELOG)
	@touch slr.ctl
	@num_sequences=`grep -c ">" $*.fasta`; \
	Slr \
	-seqfile $*.phylip \
	-treefile <(echo "$${num_sequences} 1"; cat $*.ptree) \
	-outfile $*.slr \
	-reoptimize 1 \
	-positive_only $(PARAM_POSITIVE_ONLY) \
	-kappa $(PARAM_INITIAL_KAPPA) \
	-omega $(PARAM_INITIAL_OMEGA) \
	> $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Mask positively selected sites in mali
#######################################################################################
%_null.phylip: %.phylip %.sites
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--method=mask-columns \
		--parameter=slr,$*.slr \
		--input-format=phylip \
		--output-format=phylip \
		--verbose=0 \
	< $< > $@
	$(EPILOG)

%_null.sites: %_null.phylip %.ptree
	$(PRELOG)
	@touch slr.ctl
	@num_sequences=`grep -c ">" $*.fasta`; \
	Slr \
	-seqfile $*_null.phylip \
	-treefile <(echo "$${num_sequences} 1"; cat $*.ptree) \
	-outfile $*_null.slr \
	-reoptimize 1 \
	-positive_only $(PARAM_POSITIVE_ONLY) \
	-kappa $(PARAM_INITIAL_KAPPA) \
	-omega $(PARAM_INITIAL_OMEGA) \
	> $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Primary targets for statistics

TARGET_STATS=$(QUERY_SUBDIR:%.fasta=%.stats)
OUTPUT_FILES=$(PARAM_OMEGA_VALUES:%=$*_%.output)

stats: $(TARGET_STATS)

%.stats: %.counts
	$(EPILOG)

%.counts:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codemls2tsv.py \
		--filter-probability=$(PARAM_FILTER_SITES_PROBABILITY) \
		--filter-omega=$(PARAM_FILTER_SITES_OMEGA) \
		--models=`echo $(PARAM_FILTER_MODELS) | perl -p -e "chop; s/\s+/,/g"` \
		--analysis=`echo $(PARAM_FILTER_METHOD) | perl -p -e "chop; s/\s+/,/g"` \
		--method=summary-numbers \
		--significance-threshold=$(PARAM_SIGNIFICANCE_THRESHOLD) \
		--prefix=$* \
		$(OUTPUT_FILES) > $@
	$(EPILOG)

.PRECIOUS: %.counts

#######################################################################################

analysis.dir/counts.table:
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
			--method=summary-slr \
			--only-header \
			--prefix=test \
			--verbose=0 > $@; \
	for dir in data.dir/cluster_*.dir; do \
		echo $${dir}; \
		cluster_id=$${dir#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
			--filename-log=data.dir/cluster_$${cluster_id}.dir/cluster_$${cluster_id}.sites \
			--filename-sites=data.dir/cluster_$${cluster_id}.dir/cluster_$${cluster_id}.slr \
			--filename-mali=data.dir/cluster_$${cluster_id}.dir/cluster_$${cluster_id}.cleaned_fasta \
			--method=summary-slr \
			--no-header \
			--prefix=cluster_$${cluster_id} \
			--verbose=0 >> $@; \
	done



analysis.dir/filtered_counts.table:
	$(PREPLOG)
	@grep -v "#" input.map | cut -f 2  | perl -p -e "s/_.*//" | sort -k1,1n | uniq |\
	awk 'BEGIN {printf("prefix\n"); } {print;}' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
		--filename-log=data.dir/cluster_%s.dir/cluster_%s.sites \
		--filename-sites=data.dir/cluster_%s.dir/cluster_%s.slr \
		--filename-mali=data.dir/cluster_%s.dir/cluster_%s.cleaned_fasta \
		--log=$@.log \
		--method=summary-filtered \
	> $@
	$(EPILOG)


analysis.dir/filtered_null_counts.table:
	$(PREPLOG)
	@grep -v "#" input.map | cut -f 2  | perl -p -e "s/_.*//" | sort -k1,1n | uniq |\
	awk 'BEGIN {printf("prefix\n"); } {print;}' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
		--filename-log=data.dir/cluster_%s.dir/cluster_%s_null.sites \
		--filename-sites=data.dir/cluster_%s.dir/cluster_%s_null.slr \
		--filename-mali=data.dir/cluster_%s.dir/cluster_%s.cleaned_fasta \
		--log=$@.log \
		--method=summary-filtered \
	> $@
	$(EPILOG)

analysis.dir/filtered_overrepresented.table: analysis.dir/filtered_counts.table
	$(PREPLOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
		--method=over-representation \
		--significance-threshold=$(PARAM_ANALYSIS_SIGNIFICANCE_THRESHOLD) \
	< $< > $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## Table with positively evolving sites by master sequence
#######################################################################################
analysis.dir/positive_sites.table: analysis.dir/filtered_overrepresented.table
	$(PREPLOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_sites_slr.py \
		--method=positive-site-table \
		--filename-log=data.dir/cluster_%s.dir/cluster_%s.sites \
		--filename-sites=data.dir/cluster_%s.dir/cluster_%s.slr \
		--filename-mali=data.dir/cluster_%s.dir/cluster_%s.cleaned_fasta \
		--truncate-sites-list=$(PARAM_TRUNCATE_SITE_LIST) \
		< $< > $@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## GO analysis for genes in table
##
## Foreground set: genes with positive sites
## Background set: all genes for which positive site analysis has been performed
#######################################################################################
analysis.dir/%.go: analysis.dir/%.table
	$(PRELOG)
	@mkdir -p $@.dir
	@if ! test -e $@.dir/fg; then \
		for x in `grep -v "#" $< | cut -f 1`; do \
			grep "$(PARAM_ANALYSIS_MASTER_SCHEMA)" data.dir/cluster_$${x}.dir/cluster_$${x}.fasta; \
		done |\
		perl -p -e "s/>$(PARAM_ANALYSIS_MASTER_SCHEMA).[^|]+[|]//; s/[|].*//; s/\-.*//" > $@.dir/fg; \
	fi
	@if ! test -e $@.dir/bg; then \
		for dir in data.dir/cluster_*.dir; do \
			cluster_id=$${dir#data.dir/cluster_}; \
			cluster_id=$${cluster_id%.dir}; \
			grep "$(PARAM_ANALYSIS_MASTER_SCHEMA)" $${dir}/cluster_$${cluster_id}.fasta; \
		done |\
		perl -p -e "s/>$(PARAM_ANALYSIS_MASTER_SCHEMA).[^|]+[|]//; s/[|].*//; s/\-.*//" > $@.dir/bg; \
	fi
	@if ! test -e $@.dir/go; then \
		python $(DIR_SCRIPTS_GENEPREDICTION)runGO.py \
		    --user=$(PARAM_ANALYSIS_ENSEMBL_USER) \
		    --password=$(PARAM_ANALYSIS_ENSEMBL_PASSWORD) \
		    --host=$(PARAM_ANALYSIS_ENSEMBL_HOST) \
		    --database=$(PARAM_ANALYSIS_ENSEMBL_DATABASE) \
		    --filename-dump=$@.dir/go > /dev/null; \
	fi
	python $(DIR_SCRIPTS_GENEPREDICTION)runGO.py \
		    --genes=$@.dir/fg \
		    --background=$@.dir/bg \
		    --user=$(PARAM_ANALYSIS_ENSEMBL_USER) \
		    --password=$(PARAM_ANALYSIS_ENSEMBL_PASSWORD) \
		    --host=$(PARAM_ANALYSIS_ENSEMBL_HOST) \
		    --database=$(PARAM_ANALYSIS_ENSEMBL_DATABASE) \
		    --threshold=$(PARAM_ANALYSIS_GO_THRESHOLD) \
		    --filename-input=$@.dir/go \
		    --fdr \
		    --sample=$(PARAM_ANALYSIS_GO_SAMPLES) \
		    --slims=$(PARAM_ANALYSIS_GO_SLIMS)  \
		    --filename-output-pattern="$@.dir/%(go)s.%(section)s" \
	> $@
	@for category in $(PARAM_ANALYSIS_GO_CATEGORIES); do \
	    $(YT)go2svg.py \
	    --verbose=0 \
	    --headers \
	    --title="$(PARAM_PROJECT_NAME): [$${category}]" \
	    --footer="$@.svg" \
	    $@.dir/$${category}.results > $@.dir/$${category}.svg ; \
	done
	$(EPILOG)

#######################################################################################
clean:
	rm -rf *.output *.ctl *.dir *.log *.map *.phylip *.tree

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

