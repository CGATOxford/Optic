################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.step4 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## run tblastn for transcripts that failed to match with exonerate [optional].
##############################################################################
step4: step3 step4.predictions.gz
	$(PRELOG)
	@touch $@
	$(EPILOG)

## target executed if tblastn is to be run.
xstep4: step3 $(TBLASTN_PREREQUISITES)
	@touch tblastn.predictions
	@echo "`date`: $@ completed." $(TOLOG); 
	@touch $@

## conditional execution of tblastn
ifeq ($(PARAM_DO_TBLASTN),)
	TBLASTN_PREREQUISITES=
else
	TBLASTN_PREREQUISITES=step4.0 step4.1 step4.2
endif

##############################################################################
## parallel tblastn execution
STEP4_QUERIES=$(wildcard step4_*.chunk)
STEP4_TARGETS=$(STEP4_QUERIES:%.chunk=%.matches)
STEP4_INDICES=$(PARAM_INPUT_GENOME:%.fasta=%.nhr)
##############################################################################

step4.prepare: step3 step4.peptides_split step4.genomes_split
	$(PRELOG)
	@cd step4.dir; \
	for peptide in step4_query_*.fasta; do \
		for genome in step4_sbjct_*.fasta; do \
			touch $${peptide}_vs_$${genome}.chunk; \
		done; \
	done
	@for genome in step4.dir/step4_sbjct_*.*; do \
		$(PARAM_CMD_COPY)$${genome} $(DIR_TMP_SHARED_LOCAL); \
	done
	@touch $@
	$(EPILOG)

%.nhr: %.fasta
	@formatdb -p F -n $* -i $*.fasta

## use masked sequences for the search
step4.peptides_split: step3 
	$(PRELOG)
	-@mkdir step4.dir
	@rm -f step4.dir/step4_query_*.fasta
	@perl $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl step3.check.missed_transcripts \
	< representatives.fasta |\
	perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
	-p step4.dir/step4_query_ \
	-s .fasta $(PARAM_STEP4_PEPTIDES_CHUNKSIZE) > $@
	@touch $@
	$(EPILOG)

## Note: large files might be split up into several volumes! The code
## for these is hardcoded relative to the directory from where formatdb
## was called. Thus work in the subdirectory step4.dir
step4.genomes_split: step3 
	$(PRELOG)
	-@mkdir step4.dir
	@rm -f step4.dir/step4_sbjct*
	@for genome in $(PARAM_INPUT_GENOME); do \
		ln -s ../$${genome} step4.dir/step4_sbjct_$${genome}; \
		(cd step4.dir; formatdb -p F -n step4_sbjct_`echo $${genome} | perl -p -e "s/.fasta//"` -i step4_sbjct_$${genome}); \
	done
	@touch $@
	$(EPILOG)

step4.rollback: step4.clean
	@rm -f tblastn.{peptides_split,genomes_split,prepare,matches,predictions}
	@rm -f step4*

##############################################################################
## Step 4.1: run tblastn (per genome)
##############################################################################
step4.run: step4.prepare step4.matches
	$(PRELOG)
	@$(PARAM_CMD_COPY)step4.dir/step4_sbjct*.fasta $(DIR_TMP_SHARED_LOCAL)
	@$(PARAM_CMD_COPY)step4.dir/step4_query*.fasta $(DIR_TMP_SHARED_LOCAL)
	@if [ -e step4.dir ]; then \
		$(MAKE) -C step4.dir -k -j $(PARAM_STEP4_NUMJOBS) $@-hook; \
	fi
	@rm -f $(DIR_TMP_SHARED_LOCAL)step4_genome*.fasta
	$(EPILOG)
	touch $@

step4.run-hook : $(STEP4_TARGETS)

step4_%.matches: step4_%.chunk 
	@printf "# job started on host `hostname` at `date`\n" > $@
	@$(CMD_REMOTE_SUBMIT) blastall -p tblastn $(PARAM_STEP4_OPTIONS) \
		-d $(DIR_TMP_SHARED_REMOTE)$(CMD_PREFIX_GENOME_STEM) \
		-i $(DIR_TMP_SHARED_REMOTE)step4_$(CMD_PREFIX_PEPTIDES_STEM).fasta \
	< /dev/null |\
	perl $(DIR_SCRIPTS_GENEPREDICTION)psiblastparser.pl \
	--tblastn --ends --noheader --table --log --len --bits >> $@; \
	printf "# job finished on host `hostname` at `date`\n" >> $@ 

##############################################################################
## Step 4.2: combine transcript predictions to give matching regions
##############################################################################
step4.finish: step4.run step4.matches step4.predictions step4.check
	$(EPILOG)
	@touch $@

xstep4.predictions: step4.run
	$(PRELOG)
	@find step4.dir -name "step4_*.matches" -exec cat {} \; |\
	awk '!/^#/ { printf("%i\t", ++i); } {print;}' > $@
	$(EPILOG)

step4.matches:
	$(PRELOG)
	@find step4.dir -name "*.matches" -exec cat {} \; | grep -v "#" > $@
	$(EPILOG)

##############################################################################
## Step 4: various management targets
##############################################################################
## remove runs that have not finished
step4.remove_unfinished:
	$(PRELOG)
	@n=0; \
	if [ -e step4.dir ]; then \
	    for file in step4.dir/step4_*.matches; do \
		    tail -n 1 $$file | grep -q "# job finished"; \
		    if [[ $$? == 1 ]] ; then \
			    echo "deleting $$file"; \
			    let n=n+1; \
			    rm -f $$file; \
		    fi;  \
	    done; \
	fi; \
	$(CMD_LOG2) "$@ deleted $${n} files."
	$(EPILOG)

## display runs that have not finished
step4.show_unfinished:
	@for file in step4.dir/step4_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

## clean up unnecessary files
step4.clean: 
	$(CMD_LOG) "$@ started."
	@rm -rf step4.dir


##############################################################################
## Step 4.2: build predictions from matches
##############################################################################
step4.2: step4.1 tblastn.predictions
	echo "`date`: step4.2 completed." $(TOLOG); 
	touch $@

tblastn.predictions: step4.1
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/regions2predictions.py \
	--min-score=$(PARAM_STEP4_MIN_SCORE) \
	--max-percent-overlap=$(PARAM_STEP4_MAX_PERCENT_OVERLAP) \
	--min-coverage-query=$(PARAM_STEP4_MIN_COVERAGE_QUERY) \
	--max-matches=$(PARAM_STEP4_MAX_MATCHES) \
	--peptides=peptides.fasta \
	< tblastn.matches > $@; \
	grep -v "#" tblastn.predictions | cut -f 1 | sort | uniq > tblastn_predictions_transcripts; \
	grep -v "#" tblastn.matches | cut -f 1 | sort | uniq > tblastn_matches_transcripts; \
	diff tblastn_predictions_transcripts tblastn_matches_transcripts |\
	 grep ">" | perl -pe "s/> //" > tblastn_eliminated_transcripts; \
	diff tblastn_predictions_transcripts exonerate_missed_transcripts |\
	 grep ">" | perl -pe "s/> //" > tblastn_missed_transcripts; \
	echo "## TBLASTN:" $(TOLOG) ;\
	grep -e '# pairs' -e '# trans' tblastn.predictions $(TOLOG); \
	echo "number of aligned pairs: `grep -v '#' tblastn.matches | wc -l`" $(TOLOG); \
	echo "number of aligned transcripts: `wc -l tblastn_matches_transcripts`" $(TOLOG); \
	echo "number of accepted pairs: `grep -v '#' tblastn.predictions | wc -l`"  $(TOLOG); \
	echo "number of accepted transcripts: `wc -l tblastn_predictions_transcripts`" $(TOLOG); \
	echo "number of missed transcripts: `wc -l tblastn_missed_transcripts`" $(TOLOG); \

regions.predictions: step3
	$(CMD_LOG) "$@ started."
	@cat exonerate.predictions tblastn.predictions > $@
	$(CMD_LOG) "$@ completed."

regions.load: regions.predictions
	$(CMD_LOG) "$@ started."
	@$(CONNECTION) "DELETE FROM $(PARAM_TABLE_NAME_REGIONS);" 
	@grep -v "#" regions.predictions |\
	$(CONNECTION) "COPY $(PARAM_TABLE_NAME_REGIONS) FROM STDIN WITH NULL AS 'na'" > $@ 
	@touch $@
	@echo "loaded into $(PARAM_TABLE_NAME_REGIONS): `$(CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_TABLE_NAME_REGIONS);' -t `"  $(TOLOG)
	$(CMD_LOG) "$@ completed."

regions.graph: step3
	$(CMD_LOG) "$@ started."
	-@rm -f $@
	@cp exonerate.graph $@
	$(CMD_LOG) "$@ completed."

## A gff file for matches
## Note: tblastn uses reverse-coordinates like exonerate.
step4.gff: step4.matches contig_sizes
	awk '{\
		printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\tTarget \"%s\" %i %i; E_value %6.4f ; bits %5.2f\n", \
		$$2, "tblastn", "similarity", $$8, $$9, $$12, $$3, ".", $$1, $$5, $$6, $$4, $$15); }' \
	< step4.matches |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2gff.py \
	--forward-coordinates \
	--contigs=contig_sizes > step4.gff

##############################################################################
## Step 4: combine outputs from step3 and 4
##############################################################################

step4.predictions.gz:
	@ln -f -s step3.predictions.gz $@

