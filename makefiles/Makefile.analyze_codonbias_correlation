################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.analyze_codonbias_correlation 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Analyse correlation of codon bias between species

SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=analyze_codonbias_duplications
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

## Directory to upload summary pages.
PARAM_DIR_UPLOAD?=/home/andreas/uploads/

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks

################################################
## genome parameters

## number of genomes to use
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## id of master genome
PARAM_GENOME_MASTER?=dmel_vs_dmel3

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=^$(PARAM_GENOME_MASTER)

## pattern to extract genome from identifier
PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]

################################################
## directories and database schemas
## IMPORTANT: Add new entries to the end for update to work

## schemas in input
PARAM_SRC_SCHEMAS?=

## These should be sorted in the same way.
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## separator in identifier
PARAM_SEPARATOR?=|

## names of genomes (for export)
PARAM_SRC_NAMES?=$(shell echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/_vs_dmel\d+//g")

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

################################################
PARAM_METHOD?=cai

################################################
## number of samples for GO zscore calculation.
PARAM_ANALYSIS_GO_SAMPLES?=1000
PARAM_ANALYSIS_GO_SLIMS?=/net/cpp-data/backup/andreas/projects/flies/data_1v3/goslim_generic.obo
PARAM_ANALYSIS_GO_THRESHOLD=0.05
PARAM_ANALYSIS_GO_CATEGORIES=biol_process cell_location mol_function

################################################
# Section parameters: end
################################################

## Required file list
FILES_REQUISITES?=

GENOMES_COMMA=`echo '$(PARAM_SRC_SCHEMAS)' | perl -p -e 's/ +/,/g'`
NAMES_COMMA=`echo '$(PARAM_SRC_NAMES)' | perl -p -e 's/ +/,/g'`

################################################################################################
## Command to substitute schema names with export names
CMD_SUBSTITUTE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all
CMD_TRANSLATE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation

all: pearson.pairs spearman.pairs

###########################################################################
## Build a list of orthologous gene pairs together with their codonbias
## Only 1:1 orthologs, the mean CAI is taken between predictions within
## genes.
prepare: check-setup create-log map
	$(PRELOG)
	$(EPILOG)

map:
	$(PRELOG)
	@-mkdir $@.dir
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = $$x+1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
		$(PSQL_CONNECTION) "SELECT \
					l.schema1, l.gene_id1, AVG(c1.$(PARAM_METHOD)), \
					l.schema2, l.gene_id2, AVG(c2.$(PARAM_METHOD)) \
					FROM $${genome1}.codonbias AS c1, \
					     $${genome2}.codonbias AS c2, \
					     $(PARAM_TABLE_NAME_ORTHOLOGLINKS)	AS l\
					WHERE l.schema1 = '$${genome1}' AND \
					      l.schema2 = '$${genome2}' AND \
					      l.prediction_id1 = c1.prediction_id AND \
					      l.prediction_id2 = c2.prediction_id AND \
					      l.gd1 = '1' AND l.gd2 = '1' \
					GROUP BY l.schema1, l.gene_id1, \
						l.schema2, l.gene_id2" \
				$(PSQL_CONNECTION_OPTIONS) > map.dir/map_$${genome1}-$${genome2}; \
		done; \
	done
	@touch $@
	$(EPILOG)

###########################################################################
pearson.pairs: map
	$(PRELOG)
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = $$x+1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			printf "%s\t%s\n" $${genome1} $${genome2} > $@_tmp1; \
			cut -f 3,6 map.dir/map_$${genome1}-$${genome2} >> $@_tmp1; \
			python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
				--file=$@_tmp1 \
				--stats=pearson | grep -v "#" >> $@; \
		done; \
	done
	@rm -f $@_tmp1
	$(EPILOG)

###########################################################################
spearman.pairs: map
	$(PRELOG)
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES) - 1; ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = $$x+1; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			printf "%s\t%s\n" $${genome1} $${genome2} > $@_tmp1; \
			cut -f 3,6 map.dir/map_$${genome1}-$${genome2} >> $@_tmp1; \
			python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
				--file=$@_tmp1 \
				--stats=spearman | grep -v "#" >> $@; \
		done; \
	done
	@rm -f $@_tmp1
	$(EPILOG)

##########################################################################
## mapping of long names to short names.
translation:
	$(PRELOG)
	@rm -f @
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	names=( $(PARAM_SRC_NAMES) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		printf "%s\t%s\n" $${genomes[$$x]} $${names[$$x]} >> $@; \
	done
	$(EPILOG)

##########################################################################
## Overlap between selected subset (1% highest scoring CAIs)
## strict: only 1:1 orthologs where both are dominant
## all:    all orthologs where both are dominant
## counts: all orthologs where first is dominant
dominant_sets_strict.pairs:   ANALYSIS_FILTER=l.gd1 = '1' AND l.gd2 = '1' AND c1.is_dominant = True AND c2.is_dominant = True
dominant_sets_all.pairs:      ANALYSIS_FILTER=c1.is_dominant = True AND c2.is_dominant = True
dominant_sets_counts.pairs:   ANALYSIS_FILTER=c1.is_dominant = True 

dominant_sets_%.pairs:
	$(PRELOG)	
	@rm -f $@
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		for (( y = 0; y < $(PARAM_NUM_GENOMES); ++y )); do \
			genome2=$${genomes[$$y]}; \
			printf "%s\t%s\t%s\n" $${genome1} $${genome2} \
			`$(PSQL_CONNECTION) "SELECT COUNT(DISTINCT cluster_id) \
					FROM $${genome1}.codonbias AS c1, \
					     $${genome2}.codonbias AS c2, \
					     $(PARAM_TABLE_NAME_ORTHOLOGLINKS)	AS l\
					WHERE l.schema1 = '$${genome1}' AND \
					      l.schema2 = '$${genome2}' AND \
					      l.prediction_id1 = c1.prediction_id AND \
					      l.prediction_id2 = c2.prediction_id AND \
					      $(ANALYSIS_FILTER)" \
				$(PSQL_CONNECTION_OPTIONS)` >> $@; \
		done; \
	done
	$(EPILOG)

##########################################################################
## Size of dominant sets
dominant_sets.sizes:
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome1=$${genomes[$$x]}; \
		$(PSQL_CONNECTION) \
			"SELECT '$${genome1}', COUNT(*) \
			 FROM $${genome1}.codonbias AS c1 \
			 WHERE c1.is_dominant = True" \
		$(PSQL_CONNECTION_OPTIONS) >> $@; \
	done
	$(EPILOG)

##########################################################################
## Normalize by minimum set size
dominant_sets_normalized_%.matrix: dominant_sets_counts.matrix dominant_sets_%.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
	--headers \
	--method=normalize-by-matrix \
	--parameters=dominant_sets_counts.matrix \
	< dominant_sets_$*.matrix |\
	$(CMD_TRANSLATE) > $@
	$(EPILOG)

##########################################################################
## Normalize orthologs in dominant sets with dominant set sizes. This
## gives the proportion of the dominant sets, which could maximally be common.
dominant_sets_max_overlap.matrix: dominant_sets_counts.pairs dominant_sets.sizes
	$(PRELOG)
	@cat \
	<(grep -v "#" dominant_sets_counts.pairs) \
	<(awk '{printf("%s\t%s\t%i\n", $$1, $$1, $$2)}' < dominant_sets.sizes) |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	--asymmetric \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) |\
	python $(DIR_SCRIPTS_TOOLS)matrix2matrix.py \
	--headers \
	--method=normalize-by-row > $@
	$(EPILOG)

##########################################################################
pearson.matrix: MATRIX_OPTIONS=
spearman.matrix: MATRIX_OPTIONS=

%.matrix: %.pairs
	$(PRELOG)
	@cut -f 1,2,3 $*.pairs |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	$(MATRIX_OPTIONS) \
	--row-names=$(GENOMES_COMMA) \
	--col-names=$(GENOMES_COMMA) |\
	$(CMD_TRANSLATE) > $@
	$(EPILOG)

##########################################################################
%.png: %.matrix
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)plot_matrix.py \
	--headers --labels="Genomes","Codons" \
	--hardcopy=$@ \
	< $*.matrix > /dev/null
	$(EPILOG)

##########################################################################
## Build tree based on pairs
%.tree: %.pairs
	$(PRELOG)
	@awk '{ printf("%s\t%s\t%f\n", $$1, $$2, 1.0 - $$3);} '< $*.pairs |\
	tree_kitsch -i p > $@
	$(EPILOG)

##########################################################################
%.svg: %.tree
	$(PRELOG)	
	@python $(DIR_SCRIPTS_TOOLS)tree2plot.py < $*.tree |\
	grep -v "^#" > $@
	$(EPILOG)

%.png: %.tree


##########################################################################
##########################################################################
##########################################################################
##########################################################################
## GO analysis: dominant sets in each species mapped onto master's GO 
## categories. For the master, no mapping is necessary and all genes in the
## dominant set are taken.
##########################################################################
## only 1:1 orthologs
dominant_sets_strict.go:   ANALYSIS_FILTER=l.gd1 = '1' AND l.gd2 = '1'
## all orthologs
dominant_sets_all.go:      ANALYSIS_FILTER=True

dominant_sets_%.go:
	$(PRELOG)	
	@rm -f $@
	@-mkdir $@.dir
	@if ! test -e $@_go; then \
	    python $(DIR_SCRIPTS_GENEPREDICTION)GO.py \
				--user=andreas \
				--password=HeinBloed \
				--database=ensembl_mart_31 \
				--filename-dump=$@_go > /dev/null; \
	fi
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	genome1=$(PARAM_GENOME_MASTER);  \
	for (( x = 0; x < $(PARAM_NUM_GENOMES); ++x )); do \
		genome2=$${genomes[$$x]}; \
		if ! test -e $@.dir/$${genome2}.fg; then \
			if [ "$${genome1}" == "$${genome2}" ]; then \
				$(PSQL_CONNECTION) "SELECT g1.gene_id, g1.gene_id, \
							AVG(c1.$(PARAM_METHOD)), AVG(c1.$(PARAM_METHOD))\
						FROM $${genome1}.codonbias AS c1, \
						     $${genome1}.genes AS g1 \
						WHERE \
						      g1.prediction_id = c1.prediction_id AND \
						      c1.is_dominant = True \
						GROUP BY g1.gene_id" \
				$(PSQL_CONNECTION_OPTIONS) > $@.dir/$${genome2}.fg; \
			else \
				$(PSQL_CONNECTION) "SELECT l.gene_id1, l.gene_id2, \
							AVG(c1.$(PARAM_METHOD)), AVG(c2.$(PARAM_METHOD))\
						FROM $${genome1}.codonbias AS c1, \
						     $${genome2}.codonbias AS c2, \
						     $(PARAM_TABLE_NAME_ORTHOLOGLINKS) AS l\
						WHERE $(ANALYSIS_FILTER) AND \
						      l.schema1 = '$${genome1}' AND \
						      l.schema2 = '$${genome2}' AND \
						      l.prediction_id1 = c1.prediction_id AND \
						      l.prediction_id2 = c2.prediction_id AND \
						      c2.is_dominant = True \
						GROUP BY l.schema1, l.gene_id1, \
							l.schema2, l.gene_id2" \
				$(PSQL_CONNECTION_OPTIONS) > $@.dir/$${genome2}.fg; \
			fi; \
		fi; \
		if ! test -e $@.dir/$${genome2}.bg; then \
			if [ "$${genome1}" == "$${genome2}" ]; then \
				$(PSQL_CONNECTION) "SELECT g1.gene_id, g1.gene_id, \
							AVG(c1.$(PARAM_METHOD)), AVG(c1.$(PARAM_METHOD))\
						FROM $${genome1}.codonbias AS c1, \
						     $${genome1}.genes AS g1 \
						WHERE \
						      g1.prediction_id = c1.prediction_id \
						GROUP BY g1.gene_id" \
				$(PSQL_CONNECTION_OPTIONS) > $@.dir/$${genome2}.bg; \
			else \
			    $(PSQL_CONNECTION) "SELECT l.gene_id1, l.gene_id2, \
						    AVG(c1.$(PARAM_METHOD)), AVG(c2.$(PARAM_METHOD)) \
					    FROM $${genome1}.codonbias AS c1, \
						 $${genome2}.codonbias AS c2, \
						 $(PARAM_TABLE_NAME_ORTHOLOGLINKS) AS l\
					    WHERE $(ANALYSIS_FILTER) AND \
						  l.schema1 = '$${genome1}' AND \
						  l.schema2 = '$${genome2}' AND \
						  l.prediction_id1 = c1.prediction_id AND \
						  l.prediction_id2 = c2.prediction_id \
					    GROUP BY l.schema1, l.gene_id1, \
						    l.schema2, l.gene_id2" \
			    $(PSQL_CONNECTION_OPTIONS) > $@.dir/$${genome2}.bg; \
			fi; \
		fi; \
		if ! test -e $@.dir/$${genome2}.log; then \
		    python $(DIR_SCRIPTS_GENEPREDICTION)GO.py \
				--genes=$@.dir/$${genome2}.fg \
				--background=$@.dir/$${genome2}.bg \
				--user=andreas \
				--password=HeinBloed \
				--database=ensembl_mart_31 \
				--threshold=$(PARAM_ANALYSIS_GO_THRESHOLD) \
				--filename-input=$@_go \
				--fdr \
				--sample=$(PARAM_ANALYSIS_GO_SAMPLES) \
				--slims=$(PARAM_ANALYSIS_GO_SLIMS)  \
				--filename-output-pattern="$@.dir/$${genome2}_%(go)s_%(section)s" \
				--gene-pattern="^([^\-]+)" \
				> $@.dir/$${genome2}.log; \
		fi; \
	done
	@touch $@
	$(EPILOG)

################################################################################################
## build postscript files
dominant_sets_%.go.eps: dominant_sets_%.go
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for category in $(PARAM_ANALYSIS_GO_CATEGORIES); do \
	    python $(DIR_SCRIPTS_TOOLS)go2plot.py \
	    --verbose=0 \
	    --headers \
	    --pattern-filename="dominant_sets_$*.go.dir/%s_$${category}_results" \
	    --title="$(PARAM_PROJECT_NAME): over/under-represented GO-categories [$${category}]" \
	    --footer="$@" \
	    $(PARAM_SRC_SCHEMAS) > dominant_sets_$*.go.dir/$${category}.eps; \
	    rm -f $@_tmp*; \
	done
	@touch $@
	$(EPILOG)

dominant_sets_%.go.svg: dominant_sets_%.go
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for category in $(PARAM_ANALYSIS_GO_CATEGORIES); do \
	    python $(DIR_SCRIPTS_TOOLS)go2svg.py \
	    --verbose=0 \
	    --headers \
	    --pattern-filename="dominant_sets_$*.go.dir/%s_$${category}_results" \
	    --title="$(PARAM_PROJECT_NAME): $*: [$${category}]" \
	    --footer="$@" \
	    $(PARAM_SRC_SCHEMAS) > dominant_sets_$*.go.dir/$${category}.svg; \
	    rm -f $@_tmp*; \
	done
	@touch $@
	$(EPILOG)

################################################################################################
## extract the GO counting information for all runs in order to check, if the sample sizes
## are similar and large enough
dominant_sets_%.go.counts: dominant_sets_%.go
	$(PRELOG)
	@genomes=( $(PARAM_SRC_SCHEMAS) ); \
	for category in $(PARAM_ANALYSIS_GO_CATEGORIES); do \
	    rm -f $@_tmp; \
	    for genome in $(PARAM_SRC_SCHEMAS) all; do \
		    if test -e dominant_sets_$*.go.dir/$${genome}_$${category}_parameters; then \
		    	cat dominant_sets_$*.go.dir/$${genome}_$${category}_parameters |\
		    	awk -v genome=$${genome} 'BEGIN { FS="\t"; } !/^#/ { printf("%s\t%s\t%s\n", genome, $$2, $$1); }' \
		    	>> $@_tmp; \
		    fi; \
	    done; \
	    grep -v "parameter" < $@_tmp |\
	    python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
	   	--row-names=$(GENOMES_COMMA) --asymmetric |\
	    $(CMD_SUBSTITUTE) |\
	    python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
		"" \
		"genes in sample with GO assignments" \
		"genes in sample" \
		"percent genes in sample with GO assignments" \
		"genes in background with GO assignments"\
		"input background"\
		"percent genes background with GO assignments" \
		"significant results reported" \
		> dominant_sets_$*.go.dir/$${category}.counts; \
	done
	@touch $@
	@rm -f $@_tmp;
	$(EPILOG)

################################################################################################
## one pdf file with all postscript files
################################################################################################
all.pdf: 
	gs -dEPSCrop -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=$@ -dBATCH */*.eps

##########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
