#########################################################
#########################################################
#########################################################
## addititional Makefile for Makefile.compare_transcripts
##
## Annotator based analyses
#########################################################

annotator-workspaces: genome.workspace intergenic.workspace intronic.workspace unknown.workspace territories.workspace

annotator-annotations: all.annotations architecture.annotations unknown_sets.annotations \
		allgo_territories.annotations allgoslim_territories.annotations \
		intronicgo_territories.annotations intronicgoslim_territories.annotations \
		intergenicgo_territories.annotations intergenicgoslim_territories.annotations 

###############################################
###############################################
###############################################
## create annotator workspaces
###############################################
## workspace is the full genome
genome.workspace: $(PARAM_FILENAME_GENOME).idx
	$(PRELOG)
	@awk 'NF==4 && $$1 !~ /random/{printf("##Work\t%s\t(0,%s)\n", $$1, $$4);}' < $< > $@
	$(EPILOG)

###############################################
###############################################
###############################################
## workspace are intergenic regions
###############################################
intergenic.workspace: $(PARAM_GENOME_REGIONS)
	$(PRELOG)
	@awk '$$1 !~ /random/ && $$3 == "intergenic" \
		{if ($$1!=l) {printf("\n##Work\t%s", $$1); l=$$1;} \
		printf("\t(%i,%i)", $$4-1,$$5); }; \
		END {printf ("\n");}'\
	< $< > $@
	$(EPILOG)

###############################################
###############################################
###############################################
## workspace are intronic regions
###############################################
intronic.workspace: $(PARAM_GENOME_REGIONS)
	$(PRELOG)
	@awk '$$1 !~ /random/ && $$3 == "intronic" \
		{if ($$1!=l) {printf("\n##Work\t%s", $$1); l=$$1;} \
		printf("\t(%i,%i)", $$4-1,$$5); }; \
	 END {printf ("\n");}'\
	 < $< > $@
	 $(EPILOG)

###############################################
###############################################
###############################################
## workspace are intronic and intergenic regions
## and the flank (excluding exons and UTRs)
###############################################
unknown.workspace: $(PARAM_GENOME_REGIONS)
	$(PRELOG)
	@awk '$$1 !~ /random/ && ($$3 == "intronic" || $$3 == "intergenic" || $$3 ~ /flank/) \
		{if ($$1!=l) {printf("\n##Work\t%s", $$1); l=$$1;} \
		printf("\t(%i,%i)", $$4-1,$$5); }; \
	 END {printf ("\n");}'\
	 < $< > $@
	 $(EPILOG)

###############################################
###############################################
###############################################
## workspace are gene territories
###############################################
territories.workspace: $(PARAM_FILENAME_TERRITORIES)
	$(PRELOG)
	@sort -k1,1 < $< |\
	awk '$$1 !~ /random/ && $$9 !~ /ambiguous/ \
		{if ($$1!=l) {printf("\n##Work\t%s", $$1); l=$$1;} \
		printf("\t(%i,%i)", $$4-1,$$5); }; \
	END {printf ("\n");}'\
	> $@
	$(EPILOG)

###############################################
###############################################
###############################################
## workspace are segments that are aligned
## to the reference species
###############################################
alignable.workspace: alignment_filtered.psl
	$(PRELOG)
	@sort -k10,10 < $< |\
	awk '$$10 !~ /random/ \
		{if ($$10!=l) {printf("\n##Work\t%s", $$10); l=$$10;} \
		printf("\t(%i,%i)", $$12,$$13); }; \
	END {printf ("\n");}'\
	> $@
	$(EPILOG)

###############################################
###############################################
###############################################
## workspace are intergenic and intronic segments
###############################################
non_exonic.workspace: $(PARAM_GENOME_REGIONS)
	$(PRELOG)
	@awk '$$1 !~ /random/ && ($$3 == "intronic" || $$3 == "intergenic" || $$3 == "telomeric" ) \
		{if ($$1!=l) {printf("\n##Work\t%s", $$1); l=$$1;} \
		printf("\t(%i,%i)", $$4-1,$$5); }; \
	END {printf ("\n");}'\
	< $< > $@
	$(EPILOG)

###############################################
###############################################
###############################################
## run annotator to compare two sequence sets
## The syntax is <segments>_vs_<annotation>:<section>.annotator
## Section referst to the segment set and can be either one
## of all, known, unknown, pc, etc.
###############################################
%.annotator: $(PARAM_ANNOTATOR_WORKSPACE)
	$(PRELOG)
	@set_segments=`echo $* | pe "s/_vs_.*//"`.gtf; \
	filename_segments=$${set_segments}}.gtf; \
	filename_annotation=`echo $* | pe "s/.*_vs_//; s/:.*//g"`.gtf; \
	subset=`echo $* | pe "s/.*://g"`; \
	if [[ "$${subset}}" == "all" ]]; then where="1"; else where="is_$${subset}}"; fi; \
	$(CMD_REMOTE_SUBMIT) -l mem_free=4000M \
	"java -Xmx1000M -cp $(PARAM_DIR_ANNOTATOR)commons-cli-1.0.jar:$(PARAM_DIR_ANNOTATOR)Annotator.jar app.Annotator \
			-verbose 4 -iterations $(PARAM_ANNOTATOR_ITERATIONS) \
			-annotation <( python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py --log=$@.log --section=annotations --annotations=$${filename_annotation} < $${filename_annotation}) \
			-segments <( python $(DIR_SCRIPTS_GENEPREDICTION)gtf2gtf.py --log=$@.log --filter=gene \
					--apply=<( s3 $(PARAM_DATABASE) \"SELECT gene_id FROM $${set_segments}_annotations WHERE $${where}\") < $${filename_segments} |  
				     python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py --log=$@.log --section=segments) \
			-workspace $(PARAM_ANNOTATOR_WORKSPACE)" \
	< /dev/null >& $@
	$(EPILOG)

###############################################
###############################################
###############################################
## build annotations of all sets
###############################################
all.annotations: $(INPUT)  
	$(PRELOG)
	@options=""; \
	for d in $(DATA); do \
		for c in $(PARAM_CATEGORIES); do \
			if [[ "$${c}" == "all" ]]; then where="1"; else where="is_$${c}"; fi; \
			s3v $(PARAM_DATABASE) "SELECT gene_id FROM $${d}_annotation as a WHERE $${where}" >> $@.tmp.$${d}:$${c}; \
			options="$${options} --subset=$${d}.gtf,$${d}:$${c},$@.tmp.$${d}:$${c}"; \
		done; \
	done; \
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-genes \
		--log=$@.log \
		$${options} \
		$(INPUT) \
	> $@
	@rm -f $@.tmp.*
	$(EPILOG)

###############################################
###############################################
###############################################
## build architecture annotation
## These are segments according to annotations.gff
###############################################
architecture.annotations:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-gff \
		--log=$@.log \
	< $(PARAM_GENOME_REGIONS) > $@
	@$(EPILOG)

###############################################
###############################################
###############################################
## build annotations of all sets
###############################################
%_sets.annotations: $(INPUT)  
	$(PRELOG)
	@options=""; \
	for d in $(DATA); do \
		c="$*"; \
		if [[ "$${c}" == "all" ]]; then where="1"; else where="is_$${c}"; fi; \
		s3v $(PARAM_DATABASE) "SELECT gene_id FROM $${d}_annotation as a WHERE $${where}" >> $@.tmp.$${d}:$${c}; \
		options="$${options} --subset=$${d}.gtf,$${d}:$${c},$@.tmp.$${d}:$${c}"; \
	done; \
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-genes \
		--log=$@.log \
		$${options} \
		$(INPUT) \
	> $@
	@rm -f $@.tmp.*
	$(EPILOG)

###############################################
###############################################
###############################################
## build annotations for GO genes
###############################################
go_genes.annotations:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-go \
		--input-filename-map=<(tawk '{printf("%s\t%s\n", $$2, $$4); }' < $(PARAM_FILENAME_GO)) \
		--log=$@.log \
	< $(PARAM_MASTER_SET_GENES).gtf > $@
	$(EPILOG)

###############################################
###############################################
###############################################
## build annotations for GO territories
###############################################
allgo_territories.annotations: $(PARAM_FILENAME_GO)
allgoslim_territories.annotations: $(PARAM_FILENAME_GOSLIM)

all%_territories.annotations:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-go \
		--input-filename-map=<(tawk '{printf("%s\t%s\n", $$2, $$4); }' < $< ) \
		--log=$@.log \
	< $(PARAM_FILENAME_TERRITORIES) > $@
	$(EPILOG)

###############################################
###############################################
###############################################
## build annotations for GO territories, but
## only the introns.
###############################################
intronicgo_territories.annotations: $(PARAM_FILENAME_GO)
intronicgoslim_territories.annotations: $(PARAM_FILENAME_GOSLIM)

intronic%_territories.annotations:
	$(PRELOG)
	@grep "intronic" $(PARAM_GENOME_REGIONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-go \
		--input-filename-map=<(tawk '{printf("%s\t%s\n", $$2, $$4); }' < $<) \
		--log=$@.log \
	> $@
	$(EPILOG)

###############################################
###############################################
###############################################
## build annotations for GO territories, but
## only the intergenic regions
###############################################
intergenicgo_territories.annotations: $(PARAM_FILENAME_GO)
intergenicgoslim_territories.annotations: $(PARAM_FILENAME_GOSLIM)

intergenic%_territories.annotations:
	$(PRELOG)
	@grep "intergenic" $(PARAM_GENOME_REGIONS) |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py \
		--section=annotations-go \
		--input-filename-map=<(tawk '{printf("%s\t%s\n", $$2, $$4); }' < $<) \
		--log=$@.log \
	> $@
	$(EPILOG)

###############################################
###############################################
###############################################
## create an svg image of GO analysis
###############################################
go_results_%.svg: 
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)go2svg.py \
		--Annotator \
		--maxQ=0.05 --log=$@.log \
		--sort-columns=similarity \
		--annotator-fdr \
		*_$*.annotators \
	> $@
	@inkscape --export-area-drawing --export-dpi=10 --export-png=$@.png $@
	$(EPILOG)

###############################################
###############################################
###############################################
## create an svg image of GO analysis
###############################################
%sets_results.svg: 
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)go2svg.py \
		--Annotator --maxQ=$(PARAM_ANNOTATOR_FDR) --log=$@.log \
		--annotator-fdr \
		*_$*sets.annotators \
	> $@
	@inkscape --export-area-drawing --export-dpi=10 --export-png=$@.png $@
	$(EPILOG)

###############################################
###############################################
###############################################
## run annotator against all annotations
## The syntax is track:subset:subtable:workspace1:workspace2_annotation.annotators
## For example
## tissue1:known::workspace_gogenes.annotators
##
## Possible values for <subset> are:
##     all,known,unknown,pc,intronic,intergenic,associated
##
## Possible values for <workspace> are:
##     genome, intronic, intergenic territories
## A corresponding file <workspace>.workspace needs to exist
##
## <subtable> should denote an existing table in the database from
## which genes are selected by gene_id
##
## Possible values for annotation are:
##  sets: compare against other sets
##  gogenes: compare against go annotations, overlap by exons
##  goterritoties: compare against go annotations, overlap by gene
##     territories.
###############################################
%_allsets.annotators: ANNOTATIONS=all_sets.annotations
%_allsets.annotators: %.gtf all_sets.annotations
%_unknownsets.annotators: ANNOTATIONS=unknown_sets.annotations
%_unknownsets.annotators: %.gtf unknown_sets.annotations
%_intergenicsets.annotators: ANNOTATIONS=intergenic_sets.annotations
%_intergenicsets.annotators: %.gtf intergenic_sets.annotations
%_intronicsets.annotators: ANNOTATIONS=intronic_sets.annotations
%_intronicsets.annotators: %.gtf intronic_sets.annotations
%_architecture.annotators: ANNOTATIONS=architecture.annotations
%_architecture.annotators: %.gtf architecture.annotations

%_gogenes.annotators: ANNOTATIONS=go_genes.annotations
%_gogenes.annotators: %.gtf go_genes.annotations

%_goterritories.annotators: ANNOTATIONS=allgo_territories.annotations
%_goterritories.annotators: %.gtf allgo_territories.annotations
%_goslimterritories.annotators: ANNOTATIONS=allgoslim_territories.annotations
%_goslimterritories.annotators: %.gtf allgoslim_territories.annotations

%_intronicgoterritories.annotators: ANNOTATIONS=intronicgo_territories.annotations
%_intronicgoterritories.annotators: %.gtf intronicgo_territories.annotations
%_intronicgoslimterritories.annotators: ANNOTATIONS=intronicgoslim_territories.annotations
%_intronicgoslimterritories.annotators: intronicgoslim_territories.annotations

%_intergenicgoterritories.annotators: ANNOTATIONS=intergenicgo_territories.annotations
%_intergenicgoterritories.annotators: %.gtf intergenicgo_territories.annotations
%_intergenicgoslimterritories.annotators: ANNOTATIONS=intergenicgoslim_territories.annotations
%_intergenicgoslimterritories.annotators: %.gtf intergenicgoslim_territories.annotations

%.annotators: 
	$(PRELOG)
	@set=`echo $* | pe "s/_[^_]+$$//; s/:.*//"` ;\
	subset=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/:.*//"`; \
	subtable=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	workspace=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	workspace2=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/.*://"`; \
	if [[ "$${subset}" == "all" || "$${subset}" == "$${set}" ]]; then where="1"; else where="is_$${subset}"; fi; \
	if [[ "$${workspace2}" == "all" ]]; then workspace2_option=""; else workspace2_option="-workspace2 $${workspace2}.workspace"; fi; \
	if [[ "$${subtable}" == "all" ]]; then \
		s3 $(PARAM_DATABASE) "SELECT gene_id FROM $${set}_annotation WHERE $${where}" > $@.tmp; \
	else \
		s3 $(PARAM_DATABASE) "SELECT a.gene_id FROM $${set}_annotation AS a, $${subtable} as b WHERE a.gene_id = b.gene_id AND $${where}" > $@.tmp; \
	fi; \
	$(CMD_LOG2) set=$${set} subset=$${subset} subtable=$${subtable} workspace=$${workspace} workspace2=$${workspace2} `wc -l < $@.tmp`; \
	$(CMD_REMOTE_SUBMIT) -l mem_free=4000M \
	"java -Xmx4000M -cp $(PARAM_DIR_ANNOTATOR)commons-cli-1.0.jar:$(PARAM_DIR_ANNOTATOR)Annotator.jar app.Annotator \
			-verbose 4 -iterations $(PARAM_ANNOTATOR_ITERATIONS) \
			-annotation $(ANNOTATIONS) \
			-segments <( python $(DIR_SCRIPTS_GENEPREDICTION)gtf2gtf.py --log=$@.log --filter=gene --apply=$@.tmp < $${set}.gtf |\
				     python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py --log=$@.log --section=segments) \
			-workspace $${workspace}.workspace \
			$${workspace2_option} \
			$(EXTRA_ANNOTATOR_OPTIONS)" \
	< /dev/null >& $@
	@rm -f $@.tmp
	$(EPILOG)

##################################################
##################################################
##################################################
## compute overlap between transcripts in all sets
##################################################
annotators-unknown-sets: WORKSPACE=genome
annotators-intergenic-sets: WORKSPACE=intergenic
annotators-intronic-sets: WORKSPACE=intronic

annotators-%-sets: %_sets.annotations
	$(PRELOG)
	$(MAKE) -j $(PARAM_NUM_JOBS) $(DATA_NOT_REFERENCE:%=%:$*:all:$(WORKSPACE)_$*sets.annotators)
	$(EPILOG)

########################################################
########################################################
########################################################
## redo all annotator analysis (if changed)
########################################################
redo-annotators:
	$(MAKE) -j $(PARAM_NUM_JOBS) $(wildcard *.annotators)

########################################################
########################################################
########################################################
## create segments file for an annotator run
## This is an utility function for debugging
########################################################
%_goterritories.annotator_overlap: ANNOTATIONS=go_territories.annotations
%_goterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)

%_unknownsets.annotator_overlap: ANNOTATIONS=unknown_sets.annotations
%_unknownsets.annotator_overlap: ANNOTATIONS_GTF=

%_goterritories.annotator_overlap: ANNOTATIONS=allgo_territories.annotations
%_goterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)
%_goslimterritories.annotator_overlap: ANNOTATIONS=allgoslim_territories.annotations
%_goslimterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)

%_intronicgoterritories.annotator_overlap: ANNOTATIONS=intronicgo_territories.annotations
%_intronicgoterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)
%_intronicgoslimterritories.annotator_overlap: ANNOTATIONS=intronicgoslim_territories.annotations
%_intronicgoslimterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)

%_intergenicgoterritories.annotator_overlap: ANNOTATIONS=intergenicgo_territories.annotations
%_intergenicgoterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)
%_intergenicgoslimterritories.annotator_overlap: ANNOTATIONS=intergenicgoslim_territories.annotations
%_intergenicgoslimterritories.annotator_overlap: ANNOTATIONS_GTF=$(PARAM_FILENAME_TERRITORIES)

%.annotator_overlap:
	$(PRELOG)
	@set=`echo $* | pe "s/_[^_]+$$//; s/:.*//"` ;\
	subset=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/:.*//"`; \
	subtable=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	workspace=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	workspace2=`echo $* | pe "s/_[^_]+$$//; s/[^:]*://; s/.*://"`; \
	if [[ "$${subset}" == "all" || "$${subset}" == "$${set}" ]]; then where="1"; else where="is_$${subset}"; fi; \
	if [[ "$${workspace2}" == "all" ]]; then workspace2_option=""; else workspace2_option="-workspace2 $${workspace2}.workspace"; fi; \
	if [[ "$${subtable}" == "all" ]]; then \
		s3 $(PARAM_DATABASE) "SELECT gene_id FROM $${set}_annotation WHERE $${where}" > $@.tmp; \
	else \
		s3 $(PARAM_DATABASE) "SELECT a.gene_id FROM $${set}_annotation AS a, $${subtable} as b WHERE a.gene_id = b.gene_id AND $${where}" > $@.tmp; \
	fi; \
	python $(DIR_SCRIPTS_GENEPREDICTION)gtf2gtf.py --log=$@.log --filter=gene --apply=$@.tmp < $${set}.gtf |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2annotator2tsv.py --log=$@.log --section=segments > $@.segments; \
	python $(DIR_SCRIPTS_GENEPREDICTION)annotator2tsv.py \
		--segments=$@.segments \
		--segments-gtf=$${set}.gtf \
		--annotations=$(ANNOTATIONS) \
		--annotations-gtf=$(ANNOTATIONS_GTF) \
		--workspace $${workspace}.workspace \
		--method=query \
		--log=$@.log \
		"all" > $@
	@rm -f $@.tmp
	$(EPILOG)

########################################################
########################################################
########################################################
## import annotator results
########################################################
%_annotators.import: $(wildcard *_%.annotators)
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)annotator2tsv.py \
		--method=fdr-table \
		--fdr-qvalue=0.05 \
		--fdr-method=annotator \
		--log=$@ \
		*_$*.annotators |\
	tawk '/^id/ { $$1 = "track\tslice\tsubset\tworkspace\tworkspace2\tannotations"; print; next; } \
	      { gsub( ".annotators", "", $$1); split($$1,a,"[:]"); split(a[5],b,"[_]"); $$1=sprintf("%s\t%s\t%s\t%s\t%s\t%s", a[1],a[2],a[3],a[4],b[1],b[2]); print; } ' |\
	csv2db.py -b sqlite --table=$*_annotators > $@	
	$(EPILOG)

