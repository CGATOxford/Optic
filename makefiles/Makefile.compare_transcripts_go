#########################################################
#########################################################
#########################################################
## addititional Makefile for Makefile.compare_transcripts
##
## GO analyses
#########################################################

PARAM_FILENAME_GOSLIMS?=$(PARAM_DIR_DATA)go2goslim.map
PARAM_FILENAME_ONTOLOGY=$(PARAM_DIR_DATA)gene_ontology.obo

########################################################
########################################################
########################################################
## import GO assignments of reference genes
########################################################
go.import: $(PARAM_FILENAME_GO)
	$(PRELOG)
	@csv2db.py --map gene_id:str -b sqlite --index=gene_id --table=go < $< > $@
	$(EPILOG)

########################################################
########################################################
########################################################
## import GOSlim assignments of reference genes
########################################################
goslim.import: $(PARAM_FILENAME_GOSLIM)
	$(PRELOG)
	@csv2db.py --map gene_id:str -b sqlite --index=gene_id --table=goslim < $< > $@
	$(EPILOG)

###############################################################################
###############################################################################
###############################################################################
## perform a GO test on transcript models.
## 
## GO categories are assigned via territories and only transcript models with 
## GO assignments can be part of the foreground/background sets.
##
## The comparison is based on gene-lists using the transcript models and
## not the GO territories themselves. For example, if within GOTerritory GOT1
## there are transcript models TM1,TM2,TM3,TM4 and transcript models TM3,TM4 are in the
## foreground, then the foreground/background sets are:
##
## fg: TM3,TM4
## bg: TM1,TM2,TM3,TM4
##
## with all having the same GO annotations associated with them.
###############################################################################
%.go.goanalysis: TABLE_GO=go
%.goslim.goanalysis: TABLE_GO=goslim

%.goanalysis: 
	$(PRELOG)
	@-mkdir $@.dir
	@set=`echo $* | pe "s/:.*//"` ;\
	subset=`echo $* | pe "s/[^:]*://; s/:.*//"`; \
	subtable=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	background=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/[^:]*://; s/[.].*//"`; \
	if [[ "$${subset}" == "all" || "$${subset}" == "$${set}" ]]; then where="1"; else where="is_$${subset}"; fi; \
	if [[ "$${subtable}" == "all" ]]; then \
		s3v $(PARAM_DATABASE) "SELECT DISTINCT a.gene_id FROM $${set}_annotation AS a, $${set}_territories AS t, $(TABLE_GO) AS go \
			WHERE t.gene_id = a.gene_id AND t.territories = go.gene_id AND $${where}" > $@.dir/foreground; \
	else \
		s3v $(PARAM_DATABASE) "SELECT DISTINCT a.gene_id FROM $${set}_annotation AS a, $${subtable} as b, $${set}_territories AS t, $(TABLE_GO) AS go \
			WHERE t.gene_id = a.gene_id AND t.territories = go.gene_id AND a.gene_id = b.gene_id AND $${where}" > $@.dir/foreground; \
	fi; \
	s3v $(PARAM_DATABASE) "SELECT DISTINCT t.gene_id \
		FROM $(TABLE_GO) AS go, $${background}_territories AS t WHERE t.territories = go.gene_id" > $@.dir/background; \
	s3 $(PARAM_DATABASE) "SELECT DISTINCT go_type, t.gene_id, go_id, description, evidence \
		FROM $(TABLE_GO) AS go, $${background}_territories AS t WHERE t.territories = go.gene_id" > $@.dir/goa; \
	$(CMD_LOG2) set=$${set} subset=$${subset} subtable=$${subtable} background=$${background} foreground=`wc -l < $@.dir/foreground` background=`wc -l < $@.dir/background`; \
	$(CMD_REMOTE_SUBMIT) \
	"python $(DIR_SCRIPTS_GENEPREDICTION)runGO.py \
		--filename-input=$@.dir/goa \
		--genes=$@.dir/foreground \
		--background=$@.dir/background \
		--sample=1000 \
		--fdr \
		--filename-ontology=$(PARAM_FILENAME_ONTOLOGY) \
		--output-filename-pattern='$@.dir/%(go)s.%(section)s'" \
	< /dev/null > $@
	$(EPILOG)


###############################################################################
###############################################################################
###############################################################################
## perform a GO test on go territories
## 
## The comparison is based on go territories hit by transcript models.
## For example, if within GOTerritory GOT1
## there are transcript models TM1,TM2,TM3,TM4 and transcript models TM3,TM4 are in the
## foreground, then the foreground/background sets are:
##
## fg: GOT1;
## bg: GOT1
## 
###############################################################################
%.go.territorygoanalysis: TABLE_GO=go
%.goslim.territorygoanalysis: TABLE_GO=goslim

%.territorygoanalysis: 
	$(PRELOG)
	@-mkdir $@.dir
	@set=`echo $* | pe "s/:.*//"` ;\
	subset=`echo $* | pe "s/[^:]*://; s/:.*//"`; \
	subtable=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/:.*//"`; \
	background=`echo $* | pe "s/[^:]*://; s/[^:]*://; s/[^:]*://; s/[.].*//"`; \
	if [[ "$${subset}" == "all" || "$${subset}" == "$${set}" ]]; then where="1"; else where="is_$${subset}"; fi; \
	if [[ "$${subtable}" == "all" ]]; then \
		s3v $(PARAM_DATABASE) "SELECT DISTINCT t.territories \
			FROM $${set}_annotation AS a, \
			$${set}_territories AS t, \
			$(TABLE_GO) AS go \
			WHERE a.gene_id = t.gene_id \
			AND t.status = 'U' \
			AND go.gene_id = t.territories \
			AND $${where}" > $@.dir/foreground; \
	else \
		s3v $(PARAM_DATABASE) "SELECT DISTINCT t.territories \
			FROM $${set}_annotation AS a, \
			$${set}_territories AS t, \
			$${subtable} AS b, \
			$(TABLE_GO) AS go \
			WHERE b.gene_id = a.gene_id \
			AND a.gene_id = t.gene_id \
			AND t.status = 'U' \
			AND go.gene_id = t.territories \
			AND $${where}" > $@.dir/foreground; \
	fi; \
	s3v $(PARAM_DATABASE) "SELECT DISTINCT t.territories \
		FROM $(TABLE_GO) AS go, $${background}_territories AS t WHERE t.territories = go.gene_id AND t.status = 'U'" > $@.dir/background; \
	s3 $(PARAM_DATABASE) "SELECT DISTINCT go_type, go.gene_id, go_id, description, evidence \
		FROM $(TABLE_GO) AS go, $${background}_territories AS t WHERE t.territories = go.gene_id" > $@.dir/goa; \
	$(CMD_LOG2) set=$${set} subset=$${subset} subtable=$${subtable} background=$${background} foreground=`wc -l < $@.dir/foreground` background=`wc -l < $@.dir/background`; \
	$(CMD_REMOTE_SUBMIT) \
	"python $(DIR_SCRIPTS_GENEPREDICTION)runGO.py \
		--filename-input=$@.dir/goa \
		--genes=$@.dir/foreground \
		--background=$@.dir/background \
		--sample=1000 \
		--fdr \
		--filename-ontology=$(PARAM_FILENAME_ONTOLOGY) \
		--output-filename-pattern='$@.dir/%(go)s.%(section)s'" \
	< /dev/null > $@
	$(EPILOG)

##############################################################
##############################################################
##############################################################
##
## import all GO analyses into a single table
##
##############################################################
go_results.import: PATTERN=go.goanalysis
territorygo_results.import: PATTERN=go.territorygoanalysis
goslim_results.import: PATTERN=goslim.goanalysis
territorygoslim_results.import: PATTERN=goslim.territorygoanalysis

%_results.import: 
	$(PRELOG)
	@for x in $(wildcard *.$(PATTERN)); do \
		set=`echo $${x} | pe "s/_[^_]+$$//; s/:.*//"` ;\
		subset=`echo $${x} | pe "s/_[^_]+$$//; s/[^:]*://; s/:.*//"`; \
		subtable=`echo $${x} | pe "s/_[^_]+$$//; s/[^:]*://; s/[^:]*://; s/:.*//;"`; \
		background=`echo $${x} | pe "s/_[^_]+$$//;s/[^:]*://; s/[^:]*://; s/[^:]*://; s/[.].*//"`; \
		cat $${x}.dir/*.overall |\
		awk -v track=$${set} -v slice=$${subset} -v subset=$${subtable} -v background=$${background} \
		'/^code/ && a {next;} \
		{if (!a) { printf ("track\tslice\tsubset\tbackground\t"); a=1} \
		else { printf( "%s\t%s\t%s\t%s\t",track,slice,subset,background); } \
		print }'; \
	done |\
	awk '/^track/ && a {next;} {a=1; print};' |\
	csv2db.py -b sqlite --table=$(PATTERN)results --index=track > $@	
	$(EPILOG)


goresults-import: go_results.import territorygo_results.import goslim_results.import territorygoslim_results.import
