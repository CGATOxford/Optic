################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.gbrowser 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#############################################################################
## export statements for the genome browser
EXPORT_GBROWSER_PREFIX=export_gbrowser
EXPORT_GBROWSER_COMPONENTS=sequence cleaned filtered full

## Targets to build for loading into genome browser
EXPORT_GBROWSER_TARGETS=$(EXPORT_GBROWSER_COMPONENTS:%=$(EXPORT_GBROWSER_PREFIX)_%.gff)

export_gbrowser: 
	@$(MAKE) $@.dir 
	@$(MAKE) -C $@.dir $(EXPORT_GBROWSER_TARGETS) export_gbrowser.load

#############################################################################

EXPORT_GBROWSER_CLEANED='CG','PG','SG'
EXPORT_GBROWSER_SEPARATOR=_

EXPORT_GBROWSER_PREDICTION_ID='ox_$(PARAM_PROJECT_NAME)' || '$(EXPORT_GBROWSER_SEPARATOR)' || p.prediction_id || q.class

export_gbrowser_sequence.gff: EXPORT_GBROWSER_METHOD='gpipe'
export_gbrowser_cleaned.gff: EXPORT_GBROWSER_GENE=g.gene_id
export_gbrowser_cleaned.gff: EXPORT_GBROWSER_METHOD='gpipe'
export_gbrowser_filtered.gff: EXPORT_GBROWSER_GENE=g.gene_id
export_gbrowser_filtered.gff: EXPORT_GBROWSER_METHOD='gpipe_filtered'
export_gbrowser_full.gff: EXPORT_GBROWSER_GENE=g.overlap_id 
export_gbrowser_full.gff: EXPORT_GBROWSER_METHOD='gpipe_prediction'

EXPORT_GBROWSER_GENE_ID='ox_$(PARAM_PROJECT_NAME)' || '$(EXPORT_GBROWSER_SEPARATOR)' || $(EXPORT_GBROWSER_GENE)

EXPORT_GBROWSER_REFERENCE=Contig

#############################################################################
## Track components (the fields part of the select statements)
EXPORT_GBROWSER_CONTIG_TRACK=	c.sbjct_token, \
				$(EXPORT_GBROWSER_METHOD), \
				'$(EXPORT_GBROWSER_REFERENCE)', \
				1, \
				c.size, \
				'.', \
				'.', \
				'.', \
				'$(EXPORT_GBROWSER_REFERENCE) ' || c.sbjct_token  

EXPORT_GBROWSER_GENE_TRACK=	p.sbjct_token, \
			   	$(EXPORT_GBROWSER_METHOD), \
			   	'gene', \
			   	MIN(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	MAX(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END), \
				'.', \
				p.sbjct_strand, \
				'.', \
				'Gene ' || $(EXPORT_GBROWSER_GENE_ID)

EXPORT_GBROWSER_MRNA_TRACK=	p.sbjct_token, \
			   	$(EXPORT_GBROWSER_METHOD), \
			   	'mRNA', \
			   	MIN(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	MAX(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END), \
				p.pidentity, \
				p.sbjct_strand, \
				'.', \
				'mRNA ' || $(EXPORT_GBROWSER_GENE_ID) || '.' || p.prediction_id || ' ; ' || \
				'Gene ' || $(EXPORT_GBROWSER_GENE_ID) || ' ; ' || \
				'Status ' || q.class || ' ; ' 


EXPORT_GBROWSER_CDS_TRACK=	p.sbjct_token, \
			   	$(EXPORT_GBROWSER_METHOD), \
			   	'CDS', \
			   	(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END, \
				e.pidentity, \
				p.sbjct_strand, \
				e.exon_frame, \
				'mRNA ' || $(EXPORT_GBROWSER_GENE_ID) || '.' || p.prediction_id || ' ; ' || \
				'isOk ' || CASE WHEN e.is_ok THEN '1' ELSE '0' END

EXPORT_GBROWSER_FULL_MRNA_TRACK=p.sbjct_token, \
			   	$(EXPORT_GBROWSER_METHOD), \
			   	'mRNA', \
			   	MIN(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_from+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_to+c.start END)+1, \
			   	MAX(CASE WHEN p.sbjct_strand = '+' THEN e.genome_exon_to+c.start \
	     				WHEN p.sbjct_strand = '-' THEN c.size-e.genome_exon_from+c.start END), \
				p.pidentity, \
				p.sbjct_strand, \
				'.', \
				'mRNA ' || $(EXPORT_GBROWSER_GENE_ID) || '.' || p.prediction_id || ' ; ' || \
				'Gene ' || $(EXPORT_GBROWSER_GENE_ID) || ' ; ' || \
				p.query_token || ':' || \
				p.query_coverage || ':' || \
				p.pidentity || ':' || \
				p.nframeshifts || ':' || \
				p.nstopcodons || ' ; ' || \
				'Status ' || q.class || ' ; ' 

##################################################################################################
export_gbrowser_sequence.gff:
	$(PRELOG)
	$(CMD_MSG) "dumping sequence data"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_CONTIG_TRACK) \
		FROM $(PARAM_TABLE_NAME_CONTIGS) AS c" \
	$(CONNECTION_OPTIONS) > $@
	$(EPILOG)

##################################################################################################
## non-redundant annotation track, only genes
EXPORT_GBROWSER_CLEANED_TRACK_FROM=	$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$(PARAM_TABLE_NAME_EXONS) AS e , \
				$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$(PARAM_TABLE_NAME_GENES) AS g, \
				$(PARAM_TABLE_NAME_REDUNDANT) AS m

EXPORT_GBROWSER_CLEANED_TRACK_WHERE=	e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				$(EXPORT_GBROWSER_GENE) > 0 AND \
				q.class IN ($(EXPORT_GBROWSER_CLEANED)) AND \
				c.sbjct_token = p.sbjct_token AND \
				m.rep_prediction_id = p.prediction_id AND \
				m.rep_prediction_id = m.mem_prediction_id AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

export_gbrowser_cleaned.gff: 
	$(PRELOG)
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_GENE_TRACK) \
	FROM $(EXPORT_GBROWSER_CLEANED_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_CLEANED_TRACK_WHERE) \
	GROUP BY $(EXPORT_GBROWSER_GENE), p.sbjct_strand, p.sbjct_token" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping transcript information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_MRNA_TRACK) \
	FROM  $(EXPORT_GBROWSER_CLEANED_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_CLEANED_TRACK_WHERE) \
	GROUP BY p.prediction_id, $(EXPORT_GBROWSER_GENE), p.pidentity, q.class, p.sbjct_strand, p.sbjct_token" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping CDS information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_CDS_TRACK) \
	FROM  $(EXPORT_GBROWSER_CLEANED_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_CLEANED_TRACK_WHERE) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) >> $@
	$(EPILOG)

##################################################################################################
## non-redundant annotation track
EXPORT_GBROWSER_TRACK_FROM=	$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$(PARAM_TABLE_NAME_EXONS) AS e , \
				$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$(PARAM_TABLE_NAME_GENES) AS g, \
				$(PARAM_TABLE_NAME_REDUNDANT) AS m

EXPORT_GBROWSER_TRACK_WHERE=	e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				$(EXPORT_GBROWSER_GENE) > 0 AND \
				c.sbjct_token = p.sbjct_token AND \
				m.rep_prediction_id = p.prediction_id AND \
				m.rep_prediction_id = m.mem_prediction_id AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

export_gbrowser_filtered.gff: 
	$(PRELOG)
	$(CMD_MSG) "dumping gene information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_GENE_TRACK) \
	FROM $(EXPORT_GBROWSER_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_TRACK_WHERE) \
	GROUP BY $(EXPORT_GBROWSER_GENE), p.sbjct_strand, p.sbjct_token" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping transcript information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_MRNA_TRACK) \
	FROM  $(EXPORT_GBROWSER_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_TRACK_WHERE) \
	GROUP BY p.prediction_id, $(EXPORT_GBROWSER_GENE), p.pidentity, q.class, p.sbjct_strand, p.sbjct_token" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping CDS information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_CDS_TRACK) \
	FROM  $(EXPORT_GBROWSER_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_TRACK_WHERE) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) >> $@
	$(EPILOG)

#################################################################################
## redundant annotation track (full results)
EXPORT_GBROWSER_FULL_TRACK_FROM=	$(PARAM_TABLE_NAME_PREDICTIONS) AS p, \
				$(PARAM_TABLE_NAME_EXONS) AS e , \
				$(PARAM_TABLE_NAME_CONTIGS) AS c, \
				$(PARAM_TABLE_NAME_QUALITY) AS q, \
				$(PARAM_TABLE_NAME_GENES) AS g

EXPORT_GBROWSER_FULL_TRACK_WHERE=	e.prediction_id = p.prediction_id AND \
				q.prediction_id = e.prediction_id AND \
				g.prediction_id = e.prediction_id AND \
				c.sbjct_token = p.sbjct_token AND \
				e.genome_exon_from > 0 AND e.genome_exon_to > 0 

## Export the full track
export_gbrowser_full.gff:
	$(PRELOG)
	$(CMD_MSG) "dumping gene information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_GENE_TRACK) \
	FROM $(EXPORT_GBROWSER_FULL_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_FULL_TRACK_WHERE) \
	GROUP BY $(EXPORT_GBROWSER_GENE), p.sbjct_strand, p.sbjct_token" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping prediction information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_FULL_MRNA_TRACK) \
	FROM  $(EXPORT_GBROWSER_FULL_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_FULL_TRACK_WHERE) \
	GROUP BY p.prediction_id, $(EXPORT_GBROWSER_GENE), \
		p.pidentity, q.class, p.sbjct_strand, p.sbjct_token, \
		p.query_token, p.pidentity, p.query_coverage, \
		p.nframeshifts, p.nstopcodons" \
	$(CONNECTION_OPTIONS) >> $@
	$(CMD_MSG) "dumping CDS information"
	@$(CONNECTION) \
	"SELECT $(EXPORT_GBROWSER_CDS_TRACK) \
	FROM  $(EXPORT_GBROWSER_FULL_TRACK_FROM) \
	WHERE $(EXPORT_GBROWSER_FULL_TRACK_WHERE) \
	ORDER BY e.prediction_id, e.genome_exon_from" \
	$(CONNECTION_OPTIONS) >> $@
	$(EPILOG)

##########################################################################
## execute this on fgu203
export_gbrowser.load: $(EXPORT_GBROWSER_TARGETS)
	$(PRELOG)
	-@$(GBROWSER_CMD_MYSQL) -e \
	"CREATE DATABASE $(PARAM_EXPORT_GBROWSER_DATABASE)"
	-@$(GBROWSER_CMD_MYSQL) -e \
	"GRANT SELECT ON $(PARAM_EXPORT_GBROWSER_DATABASE).* TO nobody@localhost"
	@bp_fast_load_gff.pl \
	--user $(PARAM_EXPORT_GBROWSER_USERNAME) \
	--pass $(PARAM_EXPORT_GBROWSER_PASSWORD) \
	-c \
	-d $(PARAM_EXPORT_GBROWSER_DATABASE) \
	../genome.fasta $(EXPORT_GBROWSER_TARGETS) 2> $@
	@touch $@
	$(EPILOG)
