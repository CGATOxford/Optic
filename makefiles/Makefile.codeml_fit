################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codeml_fit 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## Fitting branch lengths on a tree.
## 
## The input is a file of sequence and a list of components/sequences to take.
##
## * includeds re-alignment of sequences
##
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=codeml_fit
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

################################################
## Codeml codon frequencies model
PARAM_IDENTIFIER_PATTERN?=^(\S+)

################################################
## Codeml codon frequencies model
PARAM_MODEL_CODON_FREQUENCIES?=2

################################################
## Multiple alignment options

PARAM_DIALIGN_OPTIONS?=-nt -o

## maximum number of sequences to multiply align with dialign
PARAM_MALI_SIZE1?=50

## maximum number of sequences to multiply align with muscle
PARAM_MALI_SIZE2?=500

######################################################
## Pattern for sequences that are assumed to be master
##(i.e. Frame-shift-free)
PARAM_INPUT_GENOME_MASTER?=

################################################
# Section parameters: end
################################################

REQUISITES=input.species input.trees input.map input.fasta

#######################################################################################
## preparation of run
##
##
#######################################################################################
data.prepare: 
	$(PRELOG)
	$(MAKE) data.dir
	$(CMD_LOG) "creating directories and writing malis."
	@python $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.py \
		--map=input.map \
		--output-pattern="data.dir/cluster_%s.dir/cluster_%s.fasta" \
		--input-pattern="$(PARAM_IDENTIFIER_PATTERN)" \
	< input.fasta > $@
	$(CMD_LOG) "writing trees."
	@python $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.py \
	--skip-identifiers \
	--output-pattern="data.dir/cluster_%s.dir/cluster_%s.tree" \
	< input.trees >> $@
	$(CMD_LOG) "adding Makefiles to directories."
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		prefix=cluster_$${cluster_id}; \
		ln -s ../../Makefile $${d}/Makefile; \
	done
	$(CMD_LOG) "adding control files to directories."
	cut -f 2 input.map | sort | uniq |\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
		--filename-output=../cluster_%s.output \
		--filename-sequences=../cluster_%s.mapped_mali \
		--filename-tree=../cluster_%s.mapped_tree \
		--filename-pattern-control=data.dir/cluster_%s.dir/cluster_%s.ctl \
		--write-control-file \
		--analysis=branch-specific-kaks \
		--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
		--verbose=0 >> $@
	$(EPILOG)

data.update:
	cut -f 2 input.map | sort | uniq |\
	python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
		--filename-output=../cluster_%s.output \
		--filename-sequences=../cluster_%s.mapped_mali \
		--filename-tree=../cluster_%s.mapped_tree \
		--filename-pattern-control=data.dir/cluster_%s.dir/cluster_%s.ctl \
		--write-control-file \
		--analysis=branch-specific-kaks \
		--set-codon-frequencies=$(PARAM_MODEL_CODON_FREQUENCIES) \
		--verbose=1

#######################################################################################
#######################################################################################
#######################################################################################
## run
#######################################################################################
DATA=$(wildcard cluster_*.dir)

data.run: data.prepare
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	$(EPILOG)

$(DATA):
	$(PRELOG)
	@$(MAKE) -C $@ data.run-subhook 
	$(EPILOG)

data.run-hook: $(DATA)

data.run-subhook: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) fit-tree < /dev/null
	@touch $@
	$(EPILOG)

.PHONY: $(DATA)

data.show-progress:
	@echo "# prediction status at `date`" >> data.progress
	@find data.dir -name "cluster*.output" -exec tail -n 1  {} \; |\
	grep "Time used" |\
	awk -v ntotal=`find data.dir -name "*.fasta" | wc -l` \
	'{ nfinished+=1; } \
	END {   printf("# NFIN\tNSTART\tNLEFT\tPLEFT\n"); \
		ntotal*=3; \
		printf("%i\t%i\t%i\t%5.2f\n", nfinished,ntotal,ntotal-nfinished,((ntotal-nfinished)*100)/ntotal); }' \
	>> data.progress
	@tail data.progress

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Targets to execute in subdirectory
#######################################################################################
QUERY_SUBDIR=$(wildcard cluster_*.fasta)
TARGET_SUBDIR=$(QUERY_SUBDIR:%.fasta=%.ml_tree)

fit-tree: $(TARGET_SUBDIR)

################################################
## building multiple alignment from cdna sequences
%.raw_mali: %.fasta
	$(PRELOG)
	@numseq=`grep -c ">" $*.fasta`; \
	if [[ $${numseq} -le $(PARAM_MALI_SIZE1) ]]; then \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: started"; \
		dialign $(PARAM_DIALIGN_OPTIONS) -fn $* -fa -stdo $*.fasta < /dev/null; \
		rm -f $*; \
		if [ $$? != 0 ]; then exit 1; fi; \
		python $(DIR_SCRIPTS_GENEPREDICTION)correlate_fasta_identifier.py $*.fasta < $*.fa |\
		perl -p -e "s/^\s+$$//" > $@; \
		rm -f $*.fa; \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: finished"; \
	else \
	if [[ $${numseq} -le $(PARAM_MALI_SIZE2) ]]; then \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: started"; \
		muscle -stable -loga $*.log -in $*.fasta -out $@ -quiet; \
		if [ $$? != 0 ]; then exit 1; fi; \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: finished"; \
	else \
		$(CMD_MSG2) "alignment on $*.fasta with $${numseq} sequences: declined."; \
		touch $*.mali $*.bs $*.qc; \
	fi; \
	fi
	$(EPILOG)

################################################
## pruning multiple alignment to make sure that there are codons
%.na_mali: %.raw_mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/prune_multiple_alignment.py \
	--translate=$*.aa_mali \
	--master-pattern="$(PARAM_INPUT_GENOME_MASTER)" \
	--mark-codons \
	--remove-stops \
	< $*.raw_mali > $@
	$(EPILOG)

#######################################################################################
## create input data
%.mapped_mali: %.na_mali
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
		--method=build-map \
		--parameters=$*.map_old2new \
	< $< |\
	python $(DIR_SCRIPTS_TOOLS)mali2mali.py \
		--input-format=fasta \
		--output-format=phylip \
		--verbose=0 \
	> $@
	@python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename,unroot \
		--parameters=$*.map_old2new \
		--verbose=0 \
	< $*.tree > $*.mapped_tree
	$(EPILOG)

#######################################################################################
## run paml
%.paml: %.ctl %.mapped_mali
	$(PRELOG)
	@mkdir -p $@.dir;
	@cd $@.dir; codeml ../$< < /dev/null > ../$@
	$(EPILOG)

#######################################################################################
## extract ks tree
%.ml_tree: %.paml 
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codeml2tsv.py \
		--prefix=$* \
		--method=write-ks-tree,write-ka-tree,write-kaks-tree \
		$*.output |\
	python $(DIR_SCRIPTS_TOOLS)tree2tree.py \
		--method=rename\
		--parameters=$*.map_old2new \
		--invert \
		--verbose=0 > $@
	$(EPILOG)



.PRECIOUS: %.raw_mali %.na_mali %.mapped_mali %.paml %_ml.tree

#######################################################################################
clean:
	rm -rf *.output *.ctl *.dir *.log *.map *.phylip *.tree

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

