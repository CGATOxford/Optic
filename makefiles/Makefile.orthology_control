################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_control 1831 2008-05-08 11:59:26Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
SHELL=/bin/bash --login

LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/
DIR_HISTOGRAMS=$(CURDIR)/histograms/

################################################
## Cluster parameters
## queue to submit to
PARAM_QUEUE?=bc1.q,bc2.q
## command to use to copy between shared and remote directory
PARAM_CMD_COPY?=ln -f -s $(CURDIR)/

PARAM_PRIORITY?=-5

#########################################################################
## pattern for genome and peptide files. If there is a single file, set to filename
PARAM_INPUT_GENOME?=genome_%s.fasta
PARAM_INPUT_PEPTIDES?=peptides.fasta
PARAM_INPUT_GENOME?=$(wildcard genome*.fasta)
PARAM_INPUT_EXONS?=reference.exons

################################################
## Database connection parameters
## database
PARAM_PSQL_DATABASE?=andreas
## host
PARAM_PSQL_HOST?=db
## user
PARAM_PSQL_USER?=andreas
## schema
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

## table with pairwise ortholog assignments
PARAM_TABLE_NAME_ORTHOLOGLINKS?=$(PARAM_PSQL_SCHEMA).orthologlinks
## table with raw multiple alignment information (nucleotide level)
PARAM_TABLE_NAME_MALIS_RAW?=$(PARAM_PSQL_SCHEMA).malis_raw
## table with multiple alignment information for amino acid level
PARAM_TABLE_NAME_MALIS_AA?=$(PARAM_PSQL_SCHEMA).malis_aa
## table with multiple alignment information on nucleotide level
PARAM_TABLE_NAME_MALIS_NA?=$(PARAM_PSQL_SCHEMA).malis_na
## table with multiple alignment information: which prediction in which mali
PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER?=$(PARAM_PSQL_SCHEMA).map_prediction2cluster
## table with cluster attributes
PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES?=$(PARAM_PSQL_SCHEMA).cluster_attributes
################################################
## genome parameters
## genomes to use 
PARAM_GENOMES?=

## number of genomes to use
PARAM_NUM_GENOMES?=

## pattern to identify master genome
PARAM_INPUT_GENOME_MASTER?=

## species tree
PARAM_SPECIES_TREE?=

PARAM_INPUT_GENOME?=^([^$(PARAM_SEPARATOR)]+)[^$(PARAM_SEPARATOR)]
################################################
## directories and database schemas
PARAM_SRC_DIRS?=

PARAM_SRC_SCHEMAS?=

PARAM_SRC_DIR?=/net/cpp-group/andreas/projects/flies/orthology/data/
PARAM_SRC_CDS?=$(PARAM_SRC_DIR)cds.fasta
PARAM_SRC_EXON_BOUNDARIES?=$(PARAM_SRC_DIR)exon_boundaries

PARAM_DATA_DIR?=/net/cpp-group/andreas/projects/flies/data/
PARAM_SRC_INTERPRO?=$(PARAM_DATA_DIR)interpro.list

############################################################################
# PARAM_MAX_DISTANCE?=0.7
# PARAM_MIN_MIN_COVERAGE?=0
# PARAM_MIN_MAX_COVERAGE?=0.75
################################################
# PARAM_BLASTP_MIN_MIN_COVERAGE=0
# PARAM_BLASTP_MIN_MAX_COVERAGE=0.75

# PARAM_DIR_SRC?=/net/cpp-group/andreas/projects/flies/clustering/blastp5/
# PARAM_SRC?=$(PARAM_DIR_SRC)blast_asymmetric.links
# PARAM_SRC_INPUT?=$(PARAM_DIR_SRC)orthology/input.links
# PARAM_SRC_BITSCORES?=$(PARAM_DIR_SRC)blast_normalized.links
# PARAM_SRC_BESTHITS?=$(PARAM_DIR_SRC)blast_evalue_pid_besthits.links

PARAM_SEPARATOR?=|

################################################
## Step1: building alignments between representatives
PARAM_STEP1_NUMJOBS?=100
PARAM_STEP1_CHUNKSIZE?=100
PARAM_STEP1_REDUNDANCY_LEVEL?=0.9
PARAM_STEP1_NUMJOBS?=100
PARAM_STEP1_BLASTP_OPTIONS?=-e 1e-5 -v 5000 -b 5000 -F F
PARAM_STEP1_BLASTP_PARSING?=--ends --table --len --noheader --log --bits
PARAM_STEP1_BLASTP_NUMFIELDS?=14

################################################
## Step2: building alignments between representatives and members
PARAM_STEP2_NUMJOBS?=100
PARAM_STEP2_CHUNKSIZE?=10000

################################################
## Step3: building alignments between all sequences
PARAM_STEP3_NUMJOBS?=100
PARAM_STEP3_CHUNKSIZE?=1000000

PARAM_STEP3_MIN_MIN_COVERAGE?=0
PARAM_STEP3_MIN_MAX_COVERAGE?=0.75
PARAM_STEP3_MIN_SCORE?=0

################################################
PARAM_STEP4_NUMJOBS?=100
PARAM_STEP4_MAX_DISTANCE?=0.7

## minimum consistency for consistency filtering: edge
PARAM_STEP4_ORTHOLOGS_MIN_CONSISTENCY_EDGE?=30

## minimum consistency for consistency filtering: vertex
PARAM_STEP4_ORTHOLOGS_MIN_CONSISTENCY_VERTEX?=50

## minimum overlap between two clusters for joining
## 0.5: at least 50% of one cluster need to overlap with
## other cluster.
PARAM_STEP4_ORTHOLOGS_MIN_PERCENT_OVERLAP?=0.5

## minimum number of best hits in each direction in order
## to join a cluster.
PARAM_STEP4_ORTHOLOGS_MIN_BESTHITS?=2

## minimum number of best hits in each direction in order
## to join a cluster with an orphan.
PARAM_STEP4_ORTHOLOGS_MIN_ORPHANS?=1

## minimum minimum and maximum coverage for adding orphans from
## besthits graph
PARAM_STEP4_ORTHOLOGS_MIN_MIN_COVERAGE?=0
PARAM_STEP4_ORTHOLOGS_MIN_MAX_COVERAGE?=0.75

## maximum mumber of iterations for adding besthit orphans
PARAM_STEP4_ORTHOLOGS_ORPHANS_MAX_ITERATIONS?=20


################################################
PARAM_STEP5_NUMJOBS?=100
PARAM_STEP5_CHUNKSIZE?=1000000

## maximum size of cluster to use kitsch for tree building
PARAM_STEP5_TREE_SIZE?=50

################################################
PARAM_STEP6_NUMJOBS?=100
PARAM_STEP6_DIALIGN_OPTIONS?=-nt -o
PARAM_STEP6_CLUSTAL_OPTIONS?=

## maximum number of sequences to multiply align with dialign
PARAM_STEP6_MALI_SIZE?=50

## maximum number of sequences to multiply align with muscle
PARAM_STEP6_MALI_SIZE2?=500

## maximum size of cluster to use kitsch for tree building
PARAM_STEP6_TREE_SIZE?=50

## Parameters for selection of good multiple alignments

## percentage of perfectly conserved exon structure between all pairs
PARAM_STEP6_SELECTION_MIN_PERCENT_PERFECTLY_CONSERVED?=0.00
## percentage of partially conserved exon structure between all pairs
PARAM_STEP6_SELECTION_MIN_PERCENT_PARTIALLY_CONSERVED?=0.00
## percentage of conserved exons in multiple alignment
PARAM_STEP6_SELECTION_MIN_PERCENT_IDENTICAL_EXONS?=0.50
## percentage of sequences below minimum coverage
PARAM_STEP6_SELECTION_MAX_MISSED_COVERAGES?=0
## percentage of pairs with minimum coverage
PARAM_STEP6_SELECTION_MAX_MISSED_PAIRS?=0
## minimum number of genomes
PARAM_STEP6_SELECTION_MIN_NUM_GENOMES?=$(PARAM_NUM_GENOMES)
## minimum number of genomes
PARAM_STEP6_SELECTION_MIN_BOOTSTRAP_PTEST?=0.5

################################################
PARAM_STEP7_NUMJOBS?=1

################################################
## Export parameters for the genome browser gbrowse
PARAM_EXPORT_GBROWSER_USERNAME?=andreas
PARAM_EXPORT_GBROWSER_PASSWORD?=HeinBloed
PARAM_EXPORT_GBROWSER_DATABASE?=gbrowser_$(PARAM_PROJECT_NAME)

PARAM_EXPORT_GBROWSER_PREFIX?=gbrowser_devel_
PARAM_EXPORT_GBROWSER_SEPARATOR?=_

################################################
## options for viewing methods

## prefix to select links: [|strict_]
PARAM_VIEW_PREFIX?=strict_
## option to select graph: [orthologs.|
##  orthologs_consistent.|
##  orthologs_consistent_genes.|
##  orthologs_consistent_genes_orphans.]
PARAM_VIEW?=orthologs.

## option to select tree [|ka_|ks_]
PARAM_VIEW_TREE?=ka_

## fields to include in database queries
PARAM_VIEW_FIELDS?=*

## table to query (by prediction_id)
PARAM_VIEW_TABLE?=overview

################################################
## Parameters for building graphs
PARAM_GDL_REPULSION?=600
PARAM_GDL_ATTRACTION?=60

################################################
## Number of bootstraps
PARAM_NUM_BOOTSTRAPS?=100

PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT?=90
PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT?=70

PARAM_BOOTSTRAP_METHOD?=dnadist

PARAM_RANDOM_SEED?=413121

# use lower triangular matrix
PARAM_OPTIONS_TREE?=L\n
PARAM_CMD_TREE?=neighbor

OPTIONS_BOOTSTRAP=R\n$(PARAM_NUM_BOOTSTRAPS)\nB\n3\n
OPTIONS_BOOTSTRAP_RANDOM_SEED=$(PARAM_RANDOM_SEED)\n
CMD_TREE_BOOTSTRAP=seqboot

################################################
# Section parameters: end
################################################

GENOMES_COMMA=`echo $(PARAM_GENOMES) | perl -p -e "s/ +/,/g"`

#################################################
## Options and commands for bootstrapping trees
OPTIONS_TREE_BOOTSTRAP=L\nM\n$(PARAM_NUM_BOOTSTRAPS)\n$(PARAM_RANDOM_SEED)\n

## commands for building distance matrix
OPTIONS_MATRIX_BOOTSTRAP=D\nD\nL\nM\nD\n$(PARAM_NUM_BOOTSTRAPS)\n
OPTIONS_MATRIX=L\n
CMD_TREE_MATRIX=dnadist

## commands for building consensus tree
OPTIONS_TREE_CONSENSUS=L\n
CMD_TREE_CONSENSUS=consense

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_prepare
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step1
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step2
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step3
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step4
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step5
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step6
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_step7
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_export_gbrowser
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.orthology_export_load

################################################
## some commands for dealing with psql

## extracting prefix for table name
CMD_TABLE_PREFIX=`echo $* | perl -p -e "s/\./_/g"`

## connection to psql
CMD_PSQL_CONNECTION=psql -h $(PARAM_PSQL_HOST) -d $(PARAM_PSQL_DATABASE) $(PARAM_PSQL_USER) -c

## tab separated dump
CMD_PSQL_DUMP_OPTIONS=-t -A -F"	" 

## Mysql to Gbrowser
GBROWSER_CMD_MYSQL=mysql -u$(PARAM_EXPORT_GBROWSER_USERNAME) -p$(PARAM_EXPORT_GBROWSER_PASSWORD)

################################################
## colour code for colouring graphs.
## I try to make the colour code similar to belvu's colouring.
## (sort names alphabetically and then assign colours).
colours:
	awk -v genomes="`echo $(PARAM_GENOMES) | perl -p -e 's/ /\n/g' | sort | perl -p -e 's/\n/ /'`" \
	    -v colours="blue red green orange pink gold magenta cyan lightgrey" \
	'BEGIN { split(genomes, g, " "); split(colours, c, " "); \
	      	for ( x in g ) { printf("%s\t%s\n", g[x], c[x]); } \
	       } ' > $@

########################################################################
## patterns of organisms that correspond to a single deletion event.
patterns:
	python $(DIR_SCRIPTS_GENEPREDICTION)tree2patterns.py \
	--reference-tree="$(PARAM_SPECIES_TREE)" \
	--sort-order="$(GENOMES_COMMA)" \
	> $@

#######################################################################
## write summary of cluster
cluster_%.summary: 
	members=`grep "\b$*$$" $(PARAM_VIEW)components.map | sort -k1,1 | cut -f 1`; \
	for mem in $${members}; do \
		printf "%-50s |" $$mem; \
		command=`echo $$mem | awk '{ split($$0, a, "$(PARAM_SEPARATOR)"); } \
		END { \
		printf("SELECT $(PARAM_VIEW_FIELDS) FROM %s.$(PARAM_VIEW_TABLE) WHERE prediction_id = %i\n", substr(a[1],2), a[2]); }'`; \
		psql -h $(PARAM_PSQL_HOST) $(PARAM_PSQL_DATABASE) -c "$$command" -t |\
		grep -v "^$$" ; \
	done

#######################################################################
## Visualization of tree
cluster_%.view_tree: %.colours
	@grep -v ">" step6.dir/cluster_`echo $* | perl -p -e "s/_[^_]+$$//"`.dir/cluster_$*.$(PARAM_VIEW_TREE)tree > $@.tmp; \
	java -classpath . -jar ~/downloads/HyperTree.jar $@.tmp; \
	rm -f $@.tmp

#######################################################################
## Visualization of multiple alignments
%.view_aa_mali: 
	@cat step6.dir/`echo $* | perl -p -e 's/(cluster_\d+).*$$/$$1/'`.dir/$*.aa_mali | org2belvu | belvu - 2> /dev/null

%.view_na_mali: 
	@cat step6.dir/`echo $* | perl -p -e "s/_[^_]+$$//"`.dir/$*.na_mali | org2belvu | belvu - 2> /dev/null

%.view_raw_mali: 
	@cat step6.dir/$*.dir/$*.raw_mali | org2belvu | belvu - 2> /dev/null

%.view_mali:
	@cluster=`echo $* | perl -p -e 's/(cluster_\d+).*$$/$$1/'`; \
	subset=`egrep "$*\b" step6.dir/$${cluster}.dir/$${cluster}.benchmali |\
	grep "\bcluster\b" | perl -p -e "s/(\S+\t){4}//; s/\t/,/g"`; \
	python $(DIR_SCRIPTS_TOOLS)mali_extract.py --subset="$${subset}" < step6.dir/$${cluster}.dir/$${cluster}.$(PARAM_MALI_PREFIX)_mali |\
	org2belvu | belvu - 2>/dev/null

%.view_gene_structure:
	@cluster=`echo $* | perl -p -e 's/(cluster_\d+).*$$/$$1/'`; \
	subset=`egrep "$*\b" step6.dir/$${cluster}.dir/$${cluster}.benchmali |\
	grep "\bcluster\b" | perl -p -e "s/(\S+\t){4}//; s/\t/,/g"`; \
	python $(DIR_SCRIPTS_TOOLS)mali_extract.py --subset="$${subset}" < step6.dir/$${cluster}.dir/$${cluster}.$(PARAM_MALI_PREFIX)_mali |\
	perl -p -e "if (!/^>/) { s/[A-Z]/A/g; s/[a-z]/c/g; } " |\
	org2belvu | belvu - 2>/dev/null

%.all_view_gene_structure:
	cluster=`echo $* | perl -p -e 's/(cluster_\d+).*$$/$$1/'`; \
	cat step6.dir/$${cluster}.dir/$${cluster}.$(PARAM_MALI_PREFIX)_mali |\
	perl -p -e "if (!/^>/) { s/[A-Z]/A/g; s/[a-z]/c/g; } " |\
	org2belvu | belvu - 2>/dev/null

#######################################################################
## setup 
family_%.setup-family:
	$(PRELOG)
	-mkdir family_$*.dir
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/setup.py \
	-f -p $* \
	-d family_$*.dir \
	-m orthology_family \
	PARAM_NUM_GENOMES="$(PARAM_NUM_GENOMES)" \
	PARAM_GENOMES="$(PARAM_GENOMES)" > family_$*.dir/setup.log
	$(EPILOG)

#######################################################################
## Interpro classes of cluster
cluster_%.interpro: 
	$(CMD_MSG) "interpro matches in cluster $*:"
	@grep ">" step6.dir/cluster_$*.dir/cluster_$*.fasta |\
	  perl -p -e "s/>//; s/ .*//" |\
	awk -v cluster=`echo $* | perl -p -e "s/_[^_]+$$//"` \
	'{if (match($$1,"$(PARAM_INPUT_GENOME_MASTER)")) { split($$1,a,"$(PARAM_SEPARATOR)"); printf("%s\n",a[2]);} }' \
	> $@_tmp;
	@python $(DIR_SCRIPTS_TOOLS)filter_tokens.py --columns=2 -f $@_tmp < $(PARAM_SRC_INTERPRO) | grep -v -e "NULL" -e "#" |\
	cut -f 2,4,5,6 | sort -k2,2
	@rm -f $@_tmp;

#######################################################################
## Queries of cluster
cluster_%.queries: all_predictions2queries
	@awk -v cluster=`echo $* | perl -p -e "s/_[^_]+$$//"` \
	'$$2 == cluster { printf("%s\t%s\n", $$1, $$1); }' \
	< $(PARAM_VIEW)components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=all_predictions2queries --columns=2 |\
	sort -k2,2

#######################################################################
## Visualization of all
cluster_%.view_all: all_predictions2queries
	@$(MAKE) -s cluster_$*.interpro 
	$(CMD_MSG) "Queries in cluster $*"
	@grep ">" step6.dir/cluster_$*.dir/cluster_$*.fasta |\
	  perl -p -e "s/>//; s/ .*//" |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=all_predictions2queries --columns=1 --echo |\
	sort -k2,2
	#@$(MAKE) -s cluster_$*.view_tree &
	@$(MAKE) -s cluster_$*.view_aa_mali &

#######################################################################
## Visualization of subcluster
cluster_%.view_sub_mali:
	@cluster_id=`echo $* | perl -p -e "s/_.*//;"`; \
	subcluster_id1=`echo $* | perl -p -e "s/^[^_]+_//; s/_.*//";`; \
	subcluster_id2=`echo $* | perl -p -e "s/^.*_//;"`; \
	$(CMD_PSQL_CONNECTION) \
	"SELECT '>' || \
	m.schema || '$(PARAM_SEPARATOR)' || \
	m.prediction_id || '$(PARAM_SEPARATOR)' || \
	m.gene_id || '$(PARAM_SEPARATOR)' || \
	m.class \
	|| '\n' || \
	a.alignment \
	FROM $(PARAM_TABLE_NAME_MALIS_AA) AS a, \
	$(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER) AS m \
	WHERE a.cluster_id = m.cluster_id AND \
	a.schema = m.schema AND \
	a.prediction_id = m.prediction_id AND \
	a.cluster_id   = $${cluster_id} AND \
	subcluster_id1 = $${subcluster_id1} AND \
	subcluster_id2 = $${subcluster_id2}" \
	$(CMD_PSQL_DUMP_OPTIONS) |\
	org2belvu | belvu -t cluster_$* -Q 100 - 

#######################################################################
## colours from components
cluster_%.colours: 
	@awk -v cluster=`echo $* | perl -p -e "s/_[^_]+$$//"` \
	'$$2 == cluster { split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\n", $$1, a[1]); }' \
	< $(PARAM_VIEW)components.map |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=colours --columns-token=2 > $@

#######################################################################
%.tokens: %.links
	perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < $*.links > $@

## colours from graph
%.colours: %.tokens
	awk '{ split( $$1, a, "$(PARAM_SEPARATOR)"); printf("%s\t%s\n", $$1, a[1]); }' < $*.tokens |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=colours --columns-token=2 > $@

#######################################################################
## Graph visualization of cluster
cluster_%.gdl:  cluster_%.colours
	perl $(DIR_SCRIPTS_TOOLS)regtail.pl "cluster# $* " 1 < $(PARAM_VIEW_PREFIX)$(PARAM_VIEW)pairs |\
	perl $(DIR_SCRIPTS_TOOLS)reghead.pl "^>" 1 |\
	awk '{printf("%s\t%s\t%i\n", $$1, $$2, $$3 * 100);}' |\
	python $(DIR_SCRIPTS_TOOLS)graph_links2gdl.py --colours=cluster_$*.colours --weights |\
	perl -p -e "\
		s/repulsion\s.*/repulsion : $(PARAM_GDL_REPULSION)/; \
		s/attraction\s.*/attraction : $(PARAM_GDL_ATTRACTION)/; \
	" > gdl/$@
	aisee gdl/$@


## convert phylip tree to nhx format
## Note: nhx format does not like underscores in species names!
trees.nhx: trees
	perl -p -e 's/([^:\(\),$(PARAM_SEPARATOR)1-9_]+)_vs_dmel@([^:]+):([\d.]+)/$$1$(PARAM_SEPARATOR)$$2:$$3\[&&NHX:S=$$1\]/g' < trees > $@

#######################################################################
#######################################################################
#######################################################################
## some statistics:
%.link_stats: 
	@echo -e "# summary of graph $*\nqueries\tsbjcts\tvertices\tlinks" $(TOLOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $*.links | grep -v "#" $(TOLOG) 
	@echo -e "# histogram of tokens" $(TOLOG)
	@perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < $*.links |\
	perl -p -e "s/[$(PARAM_SEPARATOR)]\S*[$(PARAM_SEPARATOR)]\S+[$(PARAM_SEPARATOR)]/\t/" |\
	sort | uniq -c $(TOLOG)

stats:
	$(CMD_LOG2) "Summary of graphs"
	for f in *.links; do \
		$(CMD_LOG2) "$$f: `perl $(DIR_SCRIPTS_TOOLS)graph_howmany.pl < $$f | grep -v '^#'`"; \
	done

##########################################################################
## map of predictions to queries, only best predictions
EXPORT_PREDICTION_ID='p$$x' || '|' || prediction_id || '|' || gene_id || '|' || class
best_predictions2queries:
	$(PRELOG)
	@rm -f $@
	@for x in $(PARAM_SRC_SCHEMAS); do \
		psql -h db andreas -c "SELECT $(EXPORT_PREDICTION_ID), 'pdmel_vs_dmel' || '|' || query_token \
		FROM $$x.overview WHERE is_best_prediction = True" -t -A -F"	">> $@; \
	done
	$(EPILOG)

## map of predictions to queries, all predictions
all_predictions2queries:
	$(PRELOG)
	@rm -f $@
	@-for x in $(PARAM_SRC_SCHEMAS); do \
		psql -h db andreas -c \
		"SELECT $(EXPORT_PREDICTION_ID), 'pdmel_vs_dmel' || '|' || query_token \
		FROM $$x.predictions" -t -A -F"	">> $@; \
	done
	$(EPILOG)
##########################################################################

##########################################################################
## distribution of ka and ks values for closest pairs within each cluster
## 1. get all clusters (remove RHxxxx, etc assignment by matching to ^pd
## 2. for each cluster get between organism distances
## 3. for each pair of organisms get closest pair between them
## 4. compile histograms of distances from org1 to all other orgs
## 5. compile summary information.
define run_pairs_hists
	echo "`date`: $@ : started"; \
	rm -rf $@; mkdir $@; rm -f $@/all; \
	echo "`date`: $@ : collecting data from kaks output in column $${column}"; \
	for file in `find step3.dir -regex "$${pattern}" -maxdepth 2 `; do\
		awk -v c=$$column '!/error/ && $$1 ~ /^pd/ && $$2 ~/^pd/ { \
			split($$1, a, "$(PARAM_SEPARATOR)"); g1=a[1]; \
			split($$2, a, "$(PARAM_SEPARATOR)"); g2=a[1]; \
			if (g1 == g2) { next; } \
			{ printf("%s-%s\t%s\n", g1, g2, $$c); \
			  printf("%s-%s\t%s\n", g2, g1, $$c); } \
		}' < $${file} |\
		sort -k1,1 -k2,2 -k3,3n |\
		awk -v aggregate=$${aggregate} -v f=`echo $$file | perl -p -e 's/step3.dir\///;s/.kaks//'` \
		'{ if (!aggregate) { printf("%s\t%s\n",$$0,f); next; } \
		   if ($$1 != a) { printf("%s\t%s\n",$$0,f); a=$$1; }\
		}' >> $@/all; \
	done; \
	echo "`date`: $@ : calculating histograms"; \
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=1 --pattern-output="$@/%s.ks" < $@/all > /dev/null; \
	for file in $@/*.ks; do \
		cut -f 2 < $$file |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=$${scale} > $${file}_tmp; \
	done; \
	echo "`date`: $@ : combining histograms"; \
	for org in $(PARAM_GENOMES); do \
		python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--headers=`echo $@/$${org}*.ks_tmp | perl -pe "s/\S+\///g; s/.ks_tmp//g; s/ +/,/g" ` \
		--normalize \
		$@/$${org}*.ks_tmp > $@/$$org.hist; \
	done; \
	rm -f $@/*_tmp; \
	echo "`date`: $@ : building cluster summaries"; \
	awk '{split($$1, a, "-"); if (a[1] > a[2]) { next; } print; }' < $@/all |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2 --aggregate-column=3 > $@/summary; \
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=$${scale} --column=3 < $@/summary > $@/cluster_min.hist; \
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=$${scale} --column=4 < $@/summary > $@/cluster_max.hist; \
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=$${scale} --column=5 < $@/summary > $@/cluster_avg.hist; \
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py --scale=$${scale} --column=7 < $@/summary > $@/cluster_sum.hist; \
	echo "`date`: $@ : finished"
endef

ks_pairs_subclusters_best.hists:
	@column=4; pattern=".*cluster_*_[1-9]*.kaks"; scale=5.0; aggregate=1; $(run_pairs_hists)

ks_pairs_subclusters_all.hists:
	@column=4; pattern=".*cluster_*_[1-9]*.kaks"; scale=5.0; aggregate=0; $(run_pairs_hists)

ks_pairs_clusters_best.hists:
	@column=4; pattern=".*cluster_[^_]*.kaks"; scale=5.0; aggregate=1; $(run_pairs_hists)

ks_pairs_clusters_all.hists:
	@column=4; pattern=".*cluster_[^_]*.kaks"; scale=5.0; aggregate=0; $(run_pairs_hists)


ka_pairs_subclusters_best.hists:
	@column=3; pattern=".*cluster_*_[1-9]*.kaks"; scale=20.0; aggregate=1; $(run_pairs_hists)

ka_pairs_clusters_best.hists:
	@column=3; pattern=".*cluster_[^_]*.kaks"; scale=20.0; aggregate=1; $(run_pairs_hists)

##########################################################################
##########################################################################
##########################################################################
##########################################################################
##########################################################################
##########################################################################
##########################################################################
## a list of all sequences, that are designated orphan in at least one of the
## pairwise comparisons.
orphans:
	find . -name "orthology_orphan*" -maxdepth 2 -exec grep -v -e ">" -e "^$$" {} \; |\
	awk '{ for (x = 1; x <= NF ; ++x) { printf("%s\n", $$x); } }' |\
	sort | uniq -c | perl -p -e "s/^ +//g; s/\s+/\t/" | awk '{printf("%s\t%s\n", $$2, $$1);}' > $@

##########################################################################
## a list of orthologs in the orthologs graph
orthologs: orthologs.links
	perl $(DIR_SCRIPTS_TOOLS)graph_links2tokens.pl < orthologs.links > $@

##########################################################################
## a list of orthologs which are never orphans
non_orphans: orphans orthologs
	perl $(DIR_SCRIPTS_TOOLS)set_rest.pl orphans orthologs > $@

#######################################################################
## Methods to modify the orthologs graph
##
## filtering by gene structure
orthologs_filtered.links: orthologs.blast
	$(CMD_REMOTE_SUBMIT) \
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/filter_paralogous_links.py \
	--cds=$(PARAM_SRC_EXON_BOUNDARIES) \
	--verbose=3 \
	< orthologs.blast > $@

## a subgraph of orthologs.links, which only contains sequences not orphaned
orthologs_non_orphans.links: orthologs.links non_orphans
	perl $(DIR_SCRIPTS_TOOLS)graph_filter_links_vertices.pl non_orphans < orthologs.links > $@

similarity_orthologs_consistent.links: orthologs.links orthologs.components
	cat step3.scaled.links |\
	perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl -n orthologs.components.map |\
	grep -v "#" |\
	cut -f 1-3 > $@_tmp
	ga_graph -e $(PARAM_ORTHOLOGS_MIN_CONSISTENCY) $@_tmp > $@


orthologs_weighted.links: orthologs.links
	cut -f 1,2,4 orthologs.links > $@_tmp;
	ga_graph -w $@_tmp > $@
	rm -f $@_tmp

#######################################################################
## 
## build a map of orphans to clusters and add them to clusters
##
## Step 1
## substitute clustered vertices with cluster number and remove
## all links between two clustered vertices and two nonclustered 
## vertices
%_orphans2clusters.links: %.components step3.scaled.links
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=$*.components.map \
	--columns=1,2 \
	< step3.scaled.links |\
	awk '!( ($$1 ~ /^[0-9]/ && $$2 ~ /^[0-9]/) ||\
		(!($$1 ~ /^[0-9]/) && !($$2 ~ /^[0-9]/))) \
		{ if ($$1 ~ /^[0-9]/) \
		  { \
		      printf("%s\t%s\t%s\n", $$2, $$1, $$3); \
		  } else \
		  { \
		      printf("%s\t%s\t%s\n", $$1, $$2, $$3); \
		  } }' |\
	sort -k1,1 -k2,2n > $@

## Step 2
## build aggregrate scores for orphans matching to the same cluster (average)
## and then select best matching cluster for each orphan
%_orphans2clusters.map: %_orphans2clusters.links
	python $(DIR_SCRIPTS_TOOLS)graph_combine_links_redundant.py < $*_orphans2clusters.links |\
	grep -v "#" | cut -f 1,2,7 |\
	awk 'BEGIN { last_id=0; best_cluster=0; best_value=0; } \
	     { if (last_id != $$1) { \
		 	if (last_id != 0) {printf( "%s\t%s\t%s\n",last_id,best_cluster,best_value);} \
			last_id=$$1; best_cluster=$$2; best_value=$$3; \
		} \
		if ($$3<best_value) { best_value=$$3; best_cluster=$$2;} \
		}\
	      END { printf( "%s\t%s\t%s\n",last_id,best_cluster,best_value); } \
	' > $@

## Step 3
## combine clusters of orphans and of non-orphans
%_addorphans.components: %_orphans2clusters.map %.components
	cat $*_orphans2clusters.map $*.components.map | cut -f1,2 > $@.map
	cut -f2 $@.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.sizes
	touch $@


#########################################################################
## sort orthologous links by compoent
only_orthologs_%.pairs: orthologs.links orthologs_%.components
	perl $(DIR_SCRIPTS_TOOLS)graph_sort_links_components.pl -f fasta -s size orthologs_$*.components.map \
	< orthologs.links >$@

## sort orthologous links by compoent
only_orthologs.pairs: orthologs.links orthologs.components
	perl $(DIR_SCRIPTS_TOOLS)graph_sort_links_components.pl -f fasta -s size orthologs.components.map \
	< orthologs.links >$@

orthologs.blast: orthologs.links orthologs.components
	cat $(PARAM_SRC) |\
	perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl -n orthologs.components.map |\
	perl $(DIR_SCRIPTS_TOOLS)graph_sort_links_components.pl -f fasta -s size orthologs.components.map |\
	grep -v "^#" > $@


#########################################################################
clean:
	rm -f cds.fasta transcripts.list peptides.fasta exon_boundaries

#########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common
