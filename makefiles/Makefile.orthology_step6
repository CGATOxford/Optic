################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.orthology_step6 698 2006-07-19 15:53:22Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## For each cluster
## 1. build multiple alignment
## 2. do the bootstrap
## 3. evaluate multiple alignment quality
## 4. split multiple alignment in sub-components
###################################################################################
## targets for multiple alignment calculation
STEP6_TARGETS=$(wildcard cluster_*.dir)
STEP6_INPUT=orthologs.components.map

###################################################################################
## calculating multiple alignments in each group
step6: step6.prepare step6.run step6.finish

step6.prepare: $(PARAM_SRC_CDS) $(STEP6_INPUT)
	$(PRELOG)
	@$(MAKE) step6.dir
	@if [ -e step6.dir ]; then \
		$(MAKE) -C step6.dir mali.bash; \
		$(MAKE) -C step6.dir bootstrap.bash; \
		$(MAKE) -C step6.dir kaks.bash; \
		echo "$(PARAM_REFERENCE_TREE)" > step6.dir/reference_tree
	fi
	@python $(DIR_SCRIPTS_TOOLS)split_file.py \
	--map=$(STEP6_INPUT) \
	--pattern-output="step6.dir/cluster_%s.dir/cluster_%s.exons" \
	--column=1 \
	< $(PARAM_SRC_EXON_BOUNDARIES) >> $@
	@perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl \
	-m $(STEP6_INPUT) \
	-a "step6.dir/cluster_%s.dir/cluster_%s.fasta" \
	< $(PARAM_SRC_CDS) > $@
	@for dir in step6.dir/cluster_*.dir; do \
		ln -s ../Makefile $${dir}/Makefile; \
	done
	$(EPILOG)

step6.run:
	$(PRELOG)
	@$(MAKE) -C step6.dir -k -j $(PARAM_STEP6_NUMJOBS) $@-hook
	$(EPILOG)

$(STEP6_TARGETS):
	$(PRELOG)
	@$(MAKE) -C $@ step6.run-subhook < /dev/null
	$(EPILOG)

step6.run-hook: $(STEP6_TARGETS)

step6.finish: step6.run step6.qc step6.bs

.PHONY: step6.run-hook step6.run-subhook $(STEP6_TARGETS)

###########################################################################
STEP6_SUB_QUERIES=$(wildcard cluster_*[0-9].fasta)
STEP6_SUB_TARGETS=$(STEP6_SUB_QUERIES:%.fasta=%.mali) \
		$(STEP6_SUB_QUERIES:%.fasta=%.bs) \
		$(STEP6_SUB_QUERIES:%.fasta=%.qc) \
		$(STEP6_SUB_QUERIES:%.fasta=%.kaks) 

step6.run-subhook: $(STEP6_SUB_TARGETS)

%.mali: %.fasta
	$(CMD_MSG) "analysis of cluster $* started." > $*.log
	$(CMD_MSG) "waiting for assignment to cluster node" >> $*.log
	@$(CMD_REMOTE_SUBMIT) ../mali.bash $* < /dev/null >> $*.log
	$(CMD_MSG) "analysis of cluster $* finished." >> $*.log
	@touch $@

step6.show_unfinished:
	for file in `find step6.dir -name "cluster_*[0-9].log"`; do \
		prefix=`echo $${file} | perl -p -e s/.log//;`; \
		mali=`grep -c "building multiple alignment of cluster cluster.* finished" $${file}`; \
		bs=`grep -c "bootstrapping of cluster cluster.* finished" $${file}`; \
		qc=`grep -c "quality controlling of cluster cluster.* finished" $${file}`; \
		qc=1; \
		nseqs=`grep -c ">" $${prefix}.fasta`; \
		if [[ $${mali} -gt 0 && $${bs} -gt 0 && $${qc} -gt 0 ]]; then \
			status="ok"; \
		else \
			status="failed"; \
			printf "%-50s: %-7s %-4i %i%i%i\n" $${file} $${status} $${nseqs} $${mali} $${bs} $${qc}; \
		fi; \
	done

step6.remove_unfinished:
	for file in `find step6.dir -name "cluster_*.log"`; do \
		nfinished=`grep -c "finished" $${file}`; \
		if [[ $${nfinished} == 12 ]]; then \
			status="ok"; \
		else \
			status="failed"; \
			printf "%-50s: %-7s %i\n" $${file} $${status} $${nfinished}; \
		fi; \
	done

step6.show_progress:
	@echo "# step6 status at `date`" >> step6.progress
	@total=`find step6.dir -name '*.fasta' | wc -l`; \
	printf "%6i/%6i malis\t%6i/%6i bootstraps\t%6i/%6i qc\t%6i/%6i\tkaks\n" \
		`find step6.dir -name '*.mali' | wc -l` $${total} \
		`find step6.dir -name '*.bs' | wc -l` $${total} \
		`find step6.dir -name '*.qc' | wc -l` $${total} \
		`find step6.dir -name '*.kaks' | wc -l` $${total} >> step6.progress
	@tail step6.progress

################################################
## Methods for step6

################################################
## building multiple alignment from cdna sequences
%.raw_mali: %.fasta
	$(CMD_MSG) "building multiple alignment of cluster $* started."
	@numseq=`grep -c ">" $*.fasta`; \
	if [[ $${numseq} -le $(PARAM_STEP6_MALI_SIZE) ]]; then \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: started"; \
		dialign $(PARAM_STEP6_DIALIGN_OPTIONS) -fn $* -fa -stdo $*.fasta < /dev/null; \
		if [ $$? != 0 ]; then exit 1; fi; \
		python $(DIR_SCRIPTS_GENEPREDICTION)correlate_fasta_identifier.py $*.fasta < $*.fa |\
		perl -p -e "s/^\s+$$//" > $@; \
		rm -f $*.fa; \
		$(CMD_MSG2) "dialign on $*.fasta with $${numseq} sequences: finished"; \
	else \
	if [[ $${numseq} -le $(PARAM_STEP6_MALI_SIZE2) ]]; then \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: started"; \
		muscle -stable -loga $*.log -in $*.fasta -out $@ -quiet; \
		if [ $$? != 0 ]; then exit 1; fi; \
		$(CMD_MSG2) "muscle on $*.fasta with $${numseq} sequences: finished"; \
	else \
		$(CMD_MSG2) "alignment on $*.fasta with $${numseq} sequences: declined."; \
		touch $*.mali $*.bs $*.qc; \
	fi; \
	fi
	$(CMD_MSG) "building multiple alignment of cluster $* finished."

################################################
## pruning multiple alignment to make sure that there are codons
%.na_mali: %.raw_mali
	$(CMD_MSG) "pruning of cluster $* started."
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/prune_multiple_alignment.py \
	--translate=$*.aa_mali \
	--master-pattern="$(PARAM_INPUT_GENOME_MASTER)" \
	--exons=$*.exons \
	--mark-codons \
	--remove-stops \
	< $*.raw_mali > $@
	$(CMD_MSG) "pruning of cluster $* finished."

#######################################################################
## Commands for bootstrapping
%.bs: %.mali 
	$(CMD_MSG) "bootstrapping of cluster $* started." >> $*.log
	@num_sequences=`grep -c ">" $*.fasta`; \
	if [[ $${num_sequences} -gt 3 ]]; then \
		$(CMD_MSG2) "waiting for assignment to cluster node" >> $*.log; \
		$(CMD_REMOTE_SUBMIT) ../bootstrap.bash $* < /dev/null >> $*.log; \
	else \
		$(CMD_MSG2) "$*: no bootstrapping, because only $${num_sequences} sequences." >> $*.log; \
		echo ">cluster# $*_1" > bootstrap_$*.evaluate.components; \
		for s in `grep ">" $*.fasta | perl -p -e "s/>//"`; do \
			printf "%s\t%s_1\n" $${s} $* >> $*.bs_evaluate.components; \
		done; \
	fi
	$(CMD_MSG) "bootstrapping of cluster $* finished." >> $*.log;
	@touch $@

#################################################
## bootstrapping using dnadist
%.bs_input: %.na_mali
	@grep -v "#" < $*.na_mali |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--create=bootstrap_$*.index \
	--regex-token=">(\S+)" \
	--pattern-sub="id%s" |\
	perl -p -e "s/ //g" > $@_tmp;
	@seq_extract --sequences $@_tmp > $@
	@rm -f $@_tmp;

%.bs_samples: %.bs_input
	@rm -f outfile outtree
	@echo -e "$*.bs_input\n$(OPTIONS_BOOTSTRAP)Y\n$(OPTIONS_BOOTSTRAP_RANDOM_SEED)" |\
	$(CMD_TREE_BOOTSTRAP) > $@.log
	@mv outfile $@

%.bs_dist: %.bs_samples
	@rm -f outfile outtree
	@echo -e "$*.bs_samples\n$(OPTIONS_MATRIX_BOOTSTRAP)Y" |\
	$(CMD_TREE_MATRIX) > $@.log
	@mv outfile $@

%.bs_dnd: %.bs_dist
	@rm -f outfile outtree
	@echo -e "$*.bs_dist\n$(OPTIONS_TREE_BOOTSTRAP)Y" |\
	$(PARAM_CMD_TREE) > $@.log
	@mv outtree $@

%.bs_partitions: %.bs_dnd
	@rm -f outfile outtree
	@echo -e "$*.bs_dnd\n$(OPTIONS_TREE_CONSENSUS)Y" |\
	$(CMD_TREE_CONSENSUS) > $@.log
	@python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=bootstrap_$*.index \
	--regex-token="(id\d+)" \
	--invert < outfile >  $@
	@python $(DIR_SCRIPTS_TOOLS)tree_map_leaves.py \
	--apply=bootstrap_$*.index \
	--invert < outtree |\
	grep -v "#" > $@.dnd
	@rm -f outtree outfile

%.bs_evaluate: %.bs_partitions
	@rm -f $@.*
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_bootstrap.py \
		--prefix=$* \
		--reference-tree="$(PARAM_SPECIES_TREE)" \
		--file-clusters=$@.components \
		--file-inconsistencies=$@.inconsistencies \
		--file-subtrees=$@.subtrees \
		--verbose=2 \
		--min-report-support=$(PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT) \
		--min-cluster-support=$(PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT) \
		< $*.bs_partitions > $@ 

####################################################################
## evalulate multiple alignment to create good subsets.
## use the bootstrap split as an initial partition
%.qc: %.mali %.bs 
	$(CMD_MSG) "quality controlling of cluster $* started." >> $*.log
	@$(CMD_REMOTE_SUBMIT) \
		python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_mali.py \
		--components=$*.bs_evaluate.components \
		--prefix= \
		--cluster \
		--exons=$*.exons \
		--master-pattern='$(PARAM_INPUT_GENOME_MASTER)' \
		--remove-fragments \
		--verbose=2 \
		--file-bootstrap=$*.bs_partitions \
		--file-tree=../reference_tree \
		--min-report-support=$(PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT) \
		--min-cluster-support=$(PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT) \
	< $*.raw_mali > $@
	$(CMD_MSG) "quality controlling of cluster $* finished." >> $*.log

################################################
## calculating kaks
%.kaks: %.mali
	$(CMD_MSG) "kaks of cluster $* started." >> $*.log
	$(CMD_MSG) "waiting for assignment to cluster node" >> $*.log
	@$(CMD_REMOTE_SUBMIT) ../kaks.bash $* < /dev/null >> $*.log
	$(CMD_MSG) "kaks of cluster $* finished." >> $*.log

###################################################################################
## Statistics on subclusters from orthologous transcript analysis
## and aggregate all information from the benchmark
## files are created in step6.stats
## - joined:	join over several tables
## - selected:  list of selected ortholog transcripts malis. They are selected if:
##		a. have full species complement
##		b. have conserved gene structure (percentage of identical exons > 80%)
##		c. no fragments and non-overlapping pairs
step6.qc: step6.run
	$(PRELOG)
	@if [ ! -e $@ ]; then \
		mkdir $@; \
		$(CMD_LOG2) "collecting data";\
		find step6.dir -name "*.qc" -exec cat {} \; |\
		grep -v -e "#" -e "genepair" > $@/data; \
	fi
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_mali.py --only-headers | grep -v "#" > $@/headers
	$(CMD_LOG) "splitting data into sections."
	@rm -f $@/*.data
	@cat $@/headers $@/data |\
	python $(DIR_SCRIPTS_TOOLS)split_file.py --column=2 --pattern-output=$@/%s.data >/dev/null
	@perl -p -i -e "s/\t/,/g; s/,/\t/; s/,/\t/; s/,/\t/; s/,/\t/; s/,/\t/; s/,/\t/; " $@/summary.data
	@perl -p -i -e "s/\t/,/g; s/,/\t/; s/,/\t/; s/,/\t/; " $@/fragments.data
	@perl -p -i -e "s/\t/,/g; s/,/\t/; s/,/\t/; s/,/\t/; s/,/\t/; " $@/cluster.data	
	$(CMD_LOG) "joining data."
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--missing="" \
		$@/*.data |\
		awk '/^#/ || $$1 ~ /^PREFIX/ || $$1 ~ /^cluster_[0-9]+_[0-9]$$/' \
	> $@/joined.masters
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--missing="" \
		$@/*.data |\
		awk '/^#/ || $$1 ~ /^PREFIX/ || $$1 ~ /^cluster_[0-9]+_[0-9]_all$$/' \
	> $@/joined.all
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py \
		--missing="" \
		$@/*.data |\
		awk '/^#/ || $$1 ~ /^PREFIX/ || $$1 ~ /^cluster_[0-9]+_[0-9]+_[0-9]+/' \
	> $@/joined.subclusters
	$(CMD_LOG) "analysed multiple alignments:  `wc -l < $@/summary.data`" $(TOLOG)
	$(CMD_LOG) "resultant multiple alignments: `wc -l < $@/codons.data`"  $(TOLOG)
	$(CMD_LOG) "number of input sequences per cluster" 
	@echo -e "nsequences\tnclusters" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=3 < $@/summary.data $(TOLOG)
	$(CMD_LOG) "number of assigned sequences per clusters."
	@echo -e "nsequences\tnclusters" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=4 < $@/summary.data $(TOLOG)
	$(CMD_LOG) "number of unassigned sequences per clusters."
	@echo -e "nsequences\tnclusters" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=6 < $@/summary.data $(TOLOG)
	$(CMD_LOG) "number of clusters per cluster"
	@echo -e "nsequences\tnclusters" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=5 < $@/summary.data $(TOLOG)
	$(CMD_LOG) "number of sequences within/without clusters."
	@nunassigned=`cut -f 6 $@/summary.data | awk '{n+=$$1;} END { printf("%s\n", n)}'`; \
	ninput=`cut -f 3 $@/summary.data | awk '{n+=$$1;} END { printf("%s\n", n)}'`; \
	nassigned=`cut -f 4 $@/summary.data | awk '{n+=$$1;} END { printf("%s\n", n)}'`; \
	nclusters=`cut -f 5 $@/summary.data | awk '{n+=$$1;} END { printf("%s\n", n)}'`; \
	$(CMD_LOG2) "unassigned sequences: unassigned=$${nunassigned} assigned=$${nassigned} input=$${ninput} clusters=$${nclusters}"
	$(CMD_LOG) "species distribution (over all split clusters)."
	@echo -e "nspecies\tcounts" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=3 < $@/species.data $(TOLOG)
	@awk 'BEGIN { l="";m=0;} \
		{ split($$1,a,"_"); if (l != a[2]) { \
					if (l) { printf("%s\t%s\t%i\n", ll, l, m); } \
					m = $$3; ll=$$1; } \
				    else { \
					if (m < $$3) { ll=$$1; m = $$3; } } \
				    l = a[2] } \
	      END { printf("%s\t%s\t%i\n", ll, l, m); }' \
	< $@/species.data > $@/species_full.data
	$(CMD_LOG) "species distribution (max per split cluster)." 
	@echo -e "nspecies\tcounts" $(TOLOG)
	@python $(DIR_SCRIPTS_TOOLS)data2histogram.py -v 0 --column=3 < $@/species_full.data $(TOLOG)
	$(CMD_LOG) "computing perfect clusters."
	@awk '$$3 == $(PARAM_NUM_GENOMES)' \
	< $@/species.data > $@/species_perfect.data
	$(CMD_LOG) "there are `wc -l < $@/species_perfect.data` clusters with full species complement."
	$(CMD_LOG) "extracting components."
	@grep -v "#" $@/joined.subclusters |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	PREFIX MEMBERS |\
	awk '!/^#/ && !/^PREFIX/ { split( $$2, a, ","); for (x in a) { printf("%s\t%s\n", a[x], $$1); }}' \
	> $@/clusters.components.map
	@grep -v "#" $@/joined.subclusters |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	PREFIX FRAGMENTS |\
	awk '!/^#/ && !/^PREFIX/ { split( $$2, a, ","); for (x in a) { printf("%s\t%s\n", a[x], $$1); }}' \
	> $@/fragments.components.map
	@grep -v "#" $@/joined.masters  |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py \
	PREFIX UNASSIGNED |\
	awk '!/^#/ && !/^PREFIX/ { split( $$2, a, ","); for (x in a) { printf("%s\t%s\n", a[x], $$1); }}' \
	> $@/unassigned.components.map
	$(EPILOG)

########################################################################################
## Statistitics for bootstrapping part
## 1. histogram over splits
## 2. histogram over sizes
step6.bs: 
	$(PRELOG)
	@if [ ! -e $@ ]; then \
		mkdir $@; \
		$(CMD_LOG2) "collecting data";\
		find step6.dir -name "*.bs_evaluate" -exec cat {} \; |\
		grep -v -e "#" > $@/data; \
		$(CMD_LOG2) "finding inconsistencies"; \
		find step6.dir/ -name "cluster_*.bs_evaluate.inconsistencies" -exec cat {} \; > $@/inconsistencies; \
	fi
	$(CMD_LOG) "evaluation of cluster topologies"
	@awk 'BEGIN { \
		printf("# norgs\tnotus\tindex1\tindex2\tindex3\tstatus\n"); \
		 } \
		/^#/ || /^summary/ { next; } \
		{ status = "unknown"; } \
		($$4 == 1.0 && $$6 == 1.0) \
			{status="perfect"; } \
		($$4 == 1.0 && ($$6 >= 0.8 && $$6 < 1.0)) \
			{status="ok"; } \
		($$4 < 1.0) || ($$6 < 0.8) \
			{ status="failed"; } \
		{ total +=1 ; a[status] += 1; printf("%s\t%s\n", $$0, status);} \
		END { for (x in a) { printf("# %s\t%i\t%5.2f%%\n", x, a[x], a[x]/total); } } ' \
	< $@/data > $@/evaluated
	$(CMD_LOG) "selecting bad topology clusters"
	$(CMD_LOG) "building histogram of splits (number of times a cluster is split)"
	@echo -e "# ncluster\tsize" > $@/splits.hist;
	@for (( x = 0; x <= 30; ++x)) do \
		echo -n -e "$$x\t" >> $@/splits.hist; \
		awk "!/^#/ && /cluster_.*_$$x\y/" \
		< $@/data |\
		wc -l >> $@/splits.hist ; \
	done
	$(CMD_LOG) "building histogram of taxa per cluster"
	@grep -v "#" $@/data | cut -f 2 | python $(DIR_SCRIPTS_TOOLS)data2histogram.py > $@/taxa_per_cluster.hist
	$(CMD_LOG) "building histograms of coefficient >ptotal< per taxa per cluster"
	@for (( x = 2; x <= $(PARAM_NUM_GENOMES); ++x)); do \
		awk -v ng=$$x '!/^#/ && !/cluster_.*_0\y/ && $$2==ng {printf("%f\n", $$5);}' \
		< $@/data |\
		sort | uniq -c | awk '{printf("%s\t%s\n", $$2, $$1);}' |\
		python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py > $@/coefficients_$$x.hist; \
	done
	@rm -f $@/coefficients_cumul.hist
	@for file in $@/coefficients_*.hist; do \
		cut -f 1,5 $$file > $${file}_tmp; \
	done
	$(CMD_LOG) "building cumulative histogram of coefficient ptotals per taxa per cluster"
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--headers=`echo $@/coefficients*_tmp | perl -pe "s/\S+\///g; s/_tmp//g; s/ +/,/g" ` \
		--missing='-' \
		$@/coefficients*_tmp > $@/coefficients_cumul.hist
	@rm -f $@/coefficients*_tmp
	$(CMD_LOG) "building histogram of coefficients"
	@for ((x = 4; x <= 6; ++x)); do \
		grep -v "#" $@/data | cut -f $${x} | sort | uniq -c | awk '{printf("%s\t%s\n", $$2, $$1);}' > $@/index_$${x}_tmp; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
		--headers=`echo $@/index_*_tmp | perl -pe "s/\S+\///g; s/_tmp//g; s/ +/,/g" ` \
		--missing='-' \
		$@/index_*_tmp > $@/index_cumul.hist
	@rm -f $@/index_*_tmp

#########################################################################
## Collect and analyse kaks results
STEP6_KAKS_ANALYSIS_OPTIONS=--methods=hists,stats --add-total --best-per-component
STEP6_CMD_TO_IDENTIFIER=m.schema || '$(PARAM_SEPARATOR)' || m.prediction_id || '$(PARAM_SEPARATOR)' || m.gene_id || '$(PARAM_SEPARATOR)' || m.class
step6.kaks:
	$(PROLOG)
	@if [ ! -e $@ ]; then \
		$(CMD_LOG2) "collecting data"; \
		mkdir $@; \
		find step6.dir -name "*.kaks" -maxdepth 2 -exec cat {} \; |\
		awk 'BEGIN { printf("# PRED1\tPRED2\tKA\tKS\tW\n"); } \
		   /error/ { nerrors+=1; next} \
		     { ntotal+=1; \
			printf("%s\t%s\t%s\t%s\t%s\n", $$1, $$2, $$3, $$4, $$5); \
		    } \
		    END { printf("# ntotal=%i, nerrors=%i\n", ntotal, nerrors); }' > $@/data; \
	fi
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(STEP6_CMD_TO_IDENTIFIER), m.cluster_id \
	FROM $(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER) AS m" \
	$(CMD_PSQL_DUMP_OPTIONS) > $@/map_prediction2cluster
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(STEP6_CMD_TO_IDENTIFIER), m.cluster_id || '_' || m.subcluster_id1 || '_' || m.subcluster_id2 \
	FROM $(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER) AS m\
	WHERE m.subcluster_id1 > 0 and m.subcluster_id2 > 0" \
	$(CMD_PSQL_DUMP_OPTIONS) > $@/map_prediction2subcluster
	@$(CMD_PSQL_CONNECTION) \
	"SELECT $(STEP6_CMD_TO_IDENTIFIER), \
		m.cluster_id || '_' || m.subcluster_id1 || '_' || m.subcluster_id2 \
	FROM $(PARAM_TABLE_NAME_MAP_PREDICTION2CLUSTER) AS m, \
	     $(PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES) AS a \
	WHERE m.subcluster_id1 > 0 and m.subcluster_id2 > 0 AND \
	a.prefix = m.prefix AND \
	a.nspecies             >= $(PARAM_STEP6_SELECTION_MIN_NUM_GENOMES) AND \
	a.nfailed_seqs         <= $(PARAM_STEP6_SELECTION_MAX_MISSED_COVERAGES) AND \
	a.nfailed_pairs        <= $(PARAM_STEP6_SELECTION_MAX_MISSED_PAIRS) AND \
	a.all_pperfect         >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_PERFECTLY_CONSERVED) AND \
	a.all_pok              >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_PARTIALLY_CONSERVED) AND \
	a.all_pidentical_exons >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_IDENTICAL_EXONS) AND \
	a.ptest                >= $(PARAM_STEP6_SELECTION_MIN_BOOTSTRAP_PTEST)" \
	$(CMD_PSQL_DUMP_OPTIONS) > $@/map_prediction2subcluster_selected
	$(CMD_LOG) "calculating histograms for best ka per cluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ka_cluster_%s.%s \
		--columns=3 \
		--map=$@/map_prediction2cluster \
	< $@/data > $@/analysis_ka_cluster.out
	$(CMD_LOG) "calculating histograms for best ka per subcluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ka_subcluster_%s.%s \
		--columns=3 \
		--map=$@/map_prediction2subcluster \
	< $@/data > $@/analysis_ka_subcluster.out
	$(CMD_LOG) "calculating histograms for best ks per cluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ks_cluster_%s.%s \
		--columns=4 \
		--map=$@/map_prediction2cluster \
	< $@/data > $@/analysis_ks_cluster.out
	$(CMD_LOG) "calculating histograms for best ks per subcluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ks_subcluster_%s.%s \
		--columns=4 \
		--map=$@/map_prediction2subcluster \
	< $@/data > $@/analysis_ks_subcluster.out
	$(CMD_LOG) "calculating histograms for best ka per selected subcluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ka_selected_subcluster_%s.%s \
		--columns=3 \
		--map=$@/map_prediction2subcluster_selected \
	< $@/data > $@/analysis_ka_selected_subcluster.out
	$(CMD_LOG) "calculating histograms for best ks per selected subcluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		$(STEP6_KAKS_ANALYSIS_OPTIONS) \
		--pattern=$@/analysis_ks_selected_subcluster_%s.%s \
		--columns=4 \
		--map=$@/map_prediction2subcluster_selected \
	< $@/data > $@/analysis_ks_selected_subcluster.out
	$(EPILOG)

#########################################################################
## Benchmarking
#########################################################################
## Benchmarking plot using pide
##################################################################################
## Cluster radii
links_between_clusters:
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --columns=1,2 --apply=components.map < $(PARAM_SRC_BITSCORES) |\
	awk '$$1 ~ /^[0-9]/ && $$2 ~ /^[0-9]/ {printf("%s\t%s\t%i\t%s\t%s\n", $$1, $$2, (1.0-$$3) * 100 , $$10, $$11);}' \
	> $@ 

define run_cluster_radius
	echo "`date`: $@ : started"; \
	awk -v c=$$column '$$1 == $$2 {printf("%s\t%s\n", $$1, $$c) }' < links_between_clusters |\
	sort -k1,1n -k2,2n |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2 --aggregate-column=1 > $@_within; \
	awk -v c=$$column '$$1 != $$2 { printf("%s\t%s\n", $$1, $$c); printf("%s\t%s\n", $$2, $$c);  }' < links_between_clusters |\
	sort -k1,1n -k2,2n |\
	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2 --aggregate-column=1 > $@_between; 
	join -a 1 $@_within $@_between |\
	grep -v "#" | perl -pe "s/ /\t/g" |\
	awk ' NF == 7 { printf("%s\t0\t0\t0\t0\t0\t0\n", $$0); next;} {print;}' > $@; \
	echo "`date`: $@ : finished"
endef

cluster_radius_pide:
	@column=5; $(run_cluster_radius)

cluster_radius_bitscore:
	column=3; $(run_cluster_radius)

step6.pide:
	@if [ ! -e $@ ]; then \
		$(CMD_LOG2) "collecting data"; \
		mkdir $@; \
		find step6.dir -name "*.kaks" -maxdepth 2 -exec cat {} \; |\
		awk 'BEGIN { printf("# PRED1\tPRED2\tKA\tKS\tW\n"); } \
		   /error/ { nerrors+=1; next} \
		     { ntotal+=1; \
			printf("%s\t%s\t%s\t%s\t%s\n", $$1, $$2, $$3, $$4, $$5); \
		    } \
		    END { printf("# ntotal=%i, nerrors=%i", ntotal, nerrors); }' > $@/data; \
	fi
	$(CMD_LOG) "calculating histograms for all ka"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_ka_all_%s.%s \
		--methods=hist,stats \
		--columns=3 \
	< $@/data > $@/analysis_ka_all.out
	$(CMD_LOG) "calculating histograms for best ka per cluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_ka_best_%s.%s \
		--methods=hist,stats \
		--map=x \
		--best-per-component \
		--columns=3 \
	< $@/data > $@/analysis_ka_best.out
	$(CMD_LOG) "calculating histograms for all ks"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_ka_all_%s.%s \
		--methods=hist,stats \
		--columns=4 \
	< $@/data > $@/analysis_ks_all.out
	$(CMD_LOG) "calculating histograms for best ks per cluster"
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_clustering.py \
		--pattern=$@/analysis_ka_best_%s.%s \
		--methods=hist,stats \
		--map=x \
		--best-per-component \
		--columns=4 \
	< $@/data > $@/analysis_ks_best.out

#########################################################################
## Create directory with sets
step6.sets:
	@if [ ! -e $@ ]; then \
		mkdir $@; \
	fi
	$(CMD_LOG) "creating set of perfect 1:1 clusters"
	@echo "# minimum number of genomes                   : $(PARAM_STEP6_SELECTION_MIN_NUM_GENOMES)" > $@/selected
	@echo "# maximum number of fragments                 : $(PARAM_STEP6_SELECTION_MAX_MISSED_COVERAGES)" >> $@/selected
	@echo "# maximum number of non-overlapping pairs     : $(PARAM_STEP6_SELECTION_MAX_MISSED_PAIRS)" >> $@/selected
	@echo "# minimum percent of perfectly conserved genes: $(PARAM_STEP6_SELECTION_MIN_PERCENT_PERFECTLY_CONSERVED)" >> $@/selected
	@echo "# minimum percent of partially conserved genes: $(PARAM_STEP6_SELECTION_MIN_PERCENT_PARTIALLY_CONSERVED)" >> $@/selected
	@echo "# minimum percent of identical exons          : $(PARAM_STEP6_SELECTION_MIN_PERCENT_IDENTICAL_EXONS)" >> $@/selected
	@$(CMD_PSQL_CONNECTION) \
	"SELECT prefix FROM $(PARAM_TABLE_NAME_CLUSTER_ATTRIBUTES) \
	WHERE \
	nspecies             >= $(PARAM_STEP6_SELECTION_MIN_NUM_GENOMES) AND \
	nfailed_seqs         <= $(PARAM_STEP6_SELECTION_MAX_MISSED_COVERAGES) AND \
	nfailed_pairs        <= $(PARAM_STEP6_SELECTION_MAX_MISSED_PAIRS) AND \
	all_pperfect         >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_PERFECTLY_CONSERVED) AND \
	all_pok              >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_PARTIALLY_CONSERVED) AND \
	all_pidentical_exons >= $(PARAM_STEP6_SELECTION_MIN_PERCENT_IDENTICAL_EXONS) AND \
	ptest                >= $(PARAM_STEP6_SELECTION_MIN_BOOTSTRAP_PTEST)" \
	$(CMD_PSQL_DUMP_OPTIONS) \
	>> $@/selected
	$(CMD_LOG) "building non-redundant selected set."
	@awk '/^#/ { print; } \
	     !/^#/ { split($$1,a,"_"); if (l == a[2]) { next; } print; l = a[2]; };' \
	< $@/selected >$@/selected_nonredundant
	@python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
	--filename-tokens=<(grep -v "#" $@/selected) \
	--columns=2 \
	< step6.qc/clusters.components.map > $@/selected.components.map
	@python $(DIR_SCRIPTS_TOOLS)filter_tokens.py \
	--filename-tokens=<(grep -v "#" $@/selected_nonredundant) \
	--columns=2 \
	< step6.qc/clusters.components.map > $@/selected_nonredundant.components.map
	$(CMD_LOG) "sets after quality control"
	@printf "good clusters:\n%i\tall\n%i\tnon-redundant\n" \
		`grep -c -v "#" < $@/selected` \
		`grep -c -v "#" < $@/selected_nonredundant` \
	$(TOLOG)

.PHONY: step6.qc step6.bs step6.sets step6.kaks

#########################################################################
#########################################################################
#########################################################################

#########################################################################
## Scripts for cluster runs
#########################################################################
## script for analysing a cluster: multiple alignment
## removes everything after first space in description line of fasta
## file, because clustal can die with a segmentation fault.
define MALI_SCRIPT
#!/bin/bash\n\
dir_tmp=$(DIR_TMP)\$$1_mali_\$$$$/\n\
dir_src=`pwd`/\$$1.dir/\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
echo \"# working directory: \$${dir_tmp}\" \n\
echo \"# source directory : \$${dir_src}\" \n\
rm -rf \$${dir_tmp}\n\
mkdir \$${dir_tmp}\n\
perl -p -e \"if (/>/) {s/ .*//}\" \$${dir_src}\$$1.fasta > \$${dir_tmp}\$$1.fasta\n\
if [ \$$? != 0 ]; then exit 3; fi\n\
cp \$${dir_src}\$$1.exons \$${dir_tmp}\n\
cp \$${dir_src}Makefile \$${dir_tmp}\n\
cd \$${dir_tmp}\n\
$(MAKE) -k \$$1.raw_mali \$$1.na_mali \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in make \"; \n\
	exit 2; \n\
fi\n\
echo \"# moving files to \$${dir_src}:\" \n\
rm -f \$${dir_tmp}Makefile \n\
mv \$${dir_tmp}* \$${dir_src} \n\
if [ \$$? != 0 ]; then exit 1; fi\n\
rmdir \$${dir_tmp}\n\
echo \"# \$$0 finished at \`date\`\" \n\
exit 0
endef

mali.bash:
	@echo -e "${MALI_SCRIPT}" > $@
	@chmod 770 $@

#########################################################################
## script for calculating kaks within a cluster
define KAKS_SCRIPT
#!/bin/bash\n\
dir_tmp=$(DIR_TMP)\$$1_kaks_\$$$$/\n\
dir_src=`pwd`/\$$1.dir/\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
echo \"# working directory: \$${dir_tmp}\" \n\
echo \"# source directory : \$${dir_src}\" \n\
rm -rf \$${dir_tmp}\n\
mkdir \$${dir_tmp}\n\
grep -v \"#\" \$${dir_src}\$$1.na_mali > \$${dir_tmp}in.fasta; \n\
seq_pairs_kaks --cdna_sequences \$${dir_tmp}in.fasta --err_log \$${dir_src}/\$$1.kaks.err --allvsall --aligned --temp_directory \$${dir_tmp}tmp > \$${dir_src}/\$$1.kaks; \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in seq_pairs_kaks \"; \n\
	exit 2; \n\
fi\n\
rm -rf \$${dir_tmp}\n\
echo \"# \$$0 finished at \`date\`\" \n\
exit 0
endef

kaks.bash:
	@echo -e "${KAKS_SCRIPT}" > $@
	@chmod 770 $@

########################################################################
## script for bootstrapping a cluster given a multiple alignment 
define BOOTSTRAP_SCRIPT
#!/bin/bash\n\
dir_tmp=$(DIR_TMP)\$$1_boot_\$$$$/\n\
dir_src=`pwd`/\$$1.dir/\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
echo \"# working directory: \$${dir_tmp}\" \n\
echo \"# source directory : \$${dir_src}\" \n\
rm -rf \$${dir_tmp}\n\
mkdir \$${dir_tmp}\n\
# cp \$${dir_src}\$$1.kaks \$${dir_tmp}\n\
cp \$${dir_src}\$$1.na_mali \$${dir_tmp}\n\
cp \$${dir_src}\$$1.aa_mali \$${dir_tmp}\n\
cp \$${dir_src}Makefile \$${dir_tmp}\n\
cd \$${dir_tmp}\n\
echo \"# calculating the bootstrap:\" \n\
$(MAKE) -k \$$1.bs_partitions \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in make during bootstrapping \"; \n\
	exit 2; \n\
fi\n\
echo \"# evaluating to the bootstrap:\" \n\
$(MAKE) -k \$$1.bs_evaluate \n\
if [ \$$? != 0 ]; then \n\
	echo \"# ERROR in make during evaluation\"; \n\
	exit 2; \n\
fi\n\
# echo \"# splitting according to the bootstrap:\" \n\
# $(MAKE) -k bootstrap_\$$1.split \n\
# if [ \$$? != 0 ]; then \n\
# 	echo \"# ERROR in make during splitting\"; \n\
# 	exit 2; \n\
# fi\n\
# echo \"# building trees according to bootstrap:\" \n\
# $(MAKE) -k bootstrap_\$$1.trees \n\
# if [ \$$? != 0 ]; then \n\
# 	echo \"# ERROR in make during tree construction\"; \n\
# 	exit 2; \n\
# fi\n\
echo \"# removing input files\" \n\
# \$${dir_tmp}\$$1.kaks \n\
rm -f \$${dir_tmp}Makefile \$${dir_tmp}\$$1.na_mali \$${dir_tmp}\$$1.aa_mali\n\
echo \"# moving output to \$${dir_src}\" \n\
mv \$${dir_tmp}* \$${dir_src} \n\
if [ \$$? != 0 ]; then exit 1; fi\n\
rmdir \$${dir_tmp}\n\
echo \"# \$$0 finished at \`date\`\" \n\
exit 0
endef

bootstrap.bash:
	@echo -e "${BOOTSTRAP_SCRIPT}" > $@
	@chmod 770 $@


###########################################################################
###########################################################################
###########################################################################
## obsolete stuff

## making of trees for subclusters
STEP6_SUB_QUERIES_BOOTSTRAP_TREES=$(wildcard cluster_*_*.kaks)
STEP6_SUB_TARGETS_BOOTSTRAP_TREES=$(STEP6_SUB_QUERIES_BOOTSTRAP_TREES:%.kaks=%.kstree) $(STEP6_SUB_QUERIES_BOOTSTRAP_TREES:%.kaks=%.katree) 

.PRECIOUS: $(STEP6_SUB_TARGETS_BOOTSTRAP_TREES)

bootstrap_%.trees: bootstrap_%.split $(STEP6_SUB_TARGETS_BOOTSTRAP_TREES)
	touch $@

################################################
## building tree from ks values
%.kstree: %.kaks
	$(CMD_MSG) "ks tree calculation for $* started"
	@numseq=`grep -c ">" $*.na_mali`; \
	if [[ $${numseq} -le $(PARAM_STEP6_TREE_SIZE) ]] ; then \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $*.kaks |\
		grep -i -v "error" |\
		cut -f 1,2,4 |\
		tree_kitsch \
			--input_format p \
			--iterations 30 \
			--weighting 3.0 \
			--header \
			--err_log $@.errors |\
		perl -p -e "s/>.*/>cluster# $* size= 0/" \
                        > $@; \
	else \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $*.kaks |\
		grep -i -v "error" |\
		cut -f 1,2,4 |\
		tree_upgma \
			--input_format p \
			--header \
			--err_log $@.errors |\
		perl -p -e "s/>.*/>cluster# $* size= 0/" \
                        > $@; \
	fi
	$(CMD_MSG) "ks tree calculation for $* finished."

################################################
## building tree from ka values
%.katree: %.kaks
	$(CMD_MSG) "ka tree calculation for $* started"
	@numseq=`grep -c ">" $*.na_mali`; \
	if [[ $${numseq} -le $(PARAM_STEP6_TREE_SIZE) ]] ; then \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $*.kaks |\
		grep -i -v "error" |\
		cut -f 1,2,3 |\
		tree_kitsch \
			--input_format p \
			--iterations 30 \
			--weighting 3.0 \
			--header \
			--err_log $@.errors |\
		perl -p -e "s/>.*/>cluster# $* size= 0/" \
                        > $@; \
	else \
		seq_pairs_filter_kaks_results -r 0 -f 0 < $*.kaks |\
		grep -i -v "error" |\
		cut -f 1,2,3 |\
		tree_upgma \
			--input_format p \
			--header \
			--err_log $@.errors |\
		perl -p -e "s/>.*/>cluster# $* size= 0/" \
                        > $@; \
	fi
	$(CMD_MSG) "ka tree calculation for $* finished."

## evaluate multiple alignments
## split cluster into subcluster. First split malis, because kaks depend on them.
bootstrap_%.split: bootstrap_%.evaluate
	@rm -f $*_*.{aa_mali,na_mali,raw_mali,kaks}
	@rm -f $*.evaluate_submalis
	@if ! `grep -q "no patterns, analysis skipped" bootstrap_$*.evaluate` ; then \
		perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -a "%s.aa_mali" -m bootstrap_$*.evaluate.components < $*.aa_mali > $@; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -a "%s.na_mali" -m bootstrap_$*.evaluate.components < $*.na_mali >> $@; \
		perl $(DIR_SCRIPTS_GENEPREDICTION)split_fasta.pl -a "%s.raw_mali" -m bootstrap_$*.evaluate.components < $*.raw_mali >> $@; \
		perl $(DIR_SCRIPTS_TOOLS)graph_split_links_components.pl -a "%s.kaks" bootstrap_$*.evaluate.components < $*.kaks >> $@; \
	else \
		$(CMD_MSG2) "no pattern found, taking clusters as is."; \
		cp $*.aa_mali $*_1.aa_mali; \
		cp $*.na_mali $*_1.na_mali; \
		cp $*.raw_mali $*_1.raw_mali; \
		cp $*.kaks $*_1.kaks; \
	fi

###########################################################################
%.evaluate_mali: %.aa_mali
	$(CMD_MSG) "evaluation of mali $* started."
	@python $(DIR_SCRIPTS_TOOLS)mali_evaluate.py < $*.na_mali |\
	awk -v cluster=$* '!/^#/ {printf("%s\t%s\n", cluster, $$0);}' > $@;
	$(CMD_MSG) "evaluation of mali $* finished."


###########################################################################
## summary targets for files in the main directory
ks_trees:
	find step6.dir -name "*.kstree" -exec cat {} \; > $@

ka_trees:
	find step6.dir -name "*.katree" -exec cat {} \; > $@



# #######################################################################
# else
# #################################################
# ## bootstrapping using kaks
# bootstrap_%.prepare: bootstrap_%.samples bootstrap_%.split
# 	touch $@

# bootstrap_%.samples: %.na_mali
# 	python $(DIR_SCRIPTS_TOOLS)mali2bootstrap.py \
# 	--samples=$(PARAM_NUM_BOOTSTRAPS) \
# 	--block-size=3 \
# 	--separator="#####" \
# 	< $*.na_mali > $@

# bootstrap_%.split: bootstrap_%.samples
# 	python $(DIR_SCRIPTS_TOOLS)split_file.py \
# 	--split-regex="#####" --skip \
# 	--pattern-output="bootstrap_$*/sample_%s.na_mali" \
# 	< bootstrap_$*.samples > $@
# 	ln -s ../Makefile bootstrap_$*/Makefile

# bootstrap_%.run: bootstrap_%.prepare
# 	$(MAKE) -C bootstrap_$* bootstrap-hook

# bootstrap_%.finish: bootstrap_%_bootstrap.dnd bootstrap_%_consensus.dnd

# #################################################
# ## steps run in subdirectories
# BOOTSTRAP_QUERIES=$(wildcard *.na_mali)

# BOOTSTRAP_TARGETS_KAKS=$(BOOTSTRAP_QUERIES:%.na_mali=%.kaks)
# BOOTSTRAP_TARGETS_TREE=$(BOOTSTRAP_QUERIES:%.na_mali=%.dnd)

# bootstrap-hook: $(BOOTSTRAP_TARGETS_KAKS) $(BOOTSTRAP_TARGETS_TREE)

# %.dist: %.kaks
# 	cut -f 1,2,4 $*.kaks |\
# 	$(DIR_BIN)matrix_extract -i p -o l |\
# 	awk '{$$1 = sprintf("%-10s", substr($$1,1,10)); print}' > $@

# %.dnd: %.dist
# 	rm -f outfile outtree
# 	echo -e "$*.dist\n$(PARAM_OPTIONS_TREE)Y" |\
# 	$(CMD_REMOTE_SUBMIT) $(PARAM_CMD_TREE) > $@.log
# 	mv outfile $@.tree
# 	mv outtree $@

# bootstrap_%_bootstrap.dnd: bootstrap_%.run
# 	find bootstrap_$* -name "chunk.dnd" -exec cat {} \; > $@

# bootstrap_%_consensus.dnd: bootstrap_%_bootstrap.dnd
# 	rm -f outfile outtree
# 	echo -e "bootstrap.dnd\n$(OPTIONS_TREE_CONSENSUS)Y" |\
# 	$(CMD_TREE_CONSENSUS) > $@.log
# 	mv outfile $@.tree
# 	python $(DIR_SCRIPTS)substitute_tokens.py \
# 	--apply=index \
# 	--regex-token="(id\d+)\b" --multiple \
# 	--invert \
# 	< outtree > $@
# 	rm -f outtree
# endif

mali_subclusters_summary: 
	find step6.dir -name "*.mali_evaluate" -exec cat {} \; > $@


##################################################################################
# cluster_radius_pide: links_between_clusters
# 	awk '$$1 == $$2 {printf("%s\t%s\n", $$1, $$5) }' < links_between_clusters |\
# 	sort -k1,1n -k2,2n |\
# 	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2 --aggregate-column=1 > $@_within; 
# 	awk '$$1 != $$2 { printf("%s\t%s\n", $$1, $$5); printf("%s\t%s\n", $$2, $$5);  }' < links_between_clusters |\
# 	sort -k1,1n -k2,2n |\
# 	python $(DIR_SCRIPTS_TOOLS)data2stats.py --column=2 --aggregate-column=1 > $@_between; 
# 	join -a 1 $@_within $@_between |\
# 	grep -v "#" | perl -pe "s/ /\t/g" |\
# 	awk ' NF == 7 { printf("%s\t0\t0\t0\t0\t0\t0\n", $$0); next;} {print;}' > $@
##################################################################################
bootstrap_files:
	rm -f $@
	for file in `find step6.dir -name "*.partitions"`; do \
		echo ">cluster# `echo $$file | perl -p -e 's/step6.dir\///; s/.dir.*//'`" >> $@; \
		cat $$file >> $@; \
	done


bootstrap: bootstrap_files
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/evaluate_bootstrap.py \
		--reference-tree="$(PARAM_SPECIES_TREE)" \
		--file-clusters=$@.components \
		--file-inconsistencies=$@.inconsistencies \
		--file-subtrees=$@.subtrees \
		--verbose=2 \
		--min-report-support=$(PARAM_BOOTSTRAP_MIN_REPORT_SUPPORT) \
		--min-cluster-support=$(PARAM_BOOTSTRAP_MIN_CLUSTER_SUPPORT) \
		< bootstrap_files > $@ 
	grep -v ">" $@.components | python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --column=2 --create=$@.map_id2components > $@.components.map
	cut -f2 $@.components.map | python $(DIR_SCRIPTS_TOOLS)data2histogram.py | grep -v "#" > $@.components.sizes



.PHONY: stats.bootrap
