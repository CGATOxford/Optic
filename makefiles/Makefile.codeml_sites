################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codeml_sites 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## Calculating site-specific ka/ks values.
## 
## This pipeline follows the recipe of Leo's
##
## 1. Build pairwise ka/ks
## 2. Build tree with fitch
## 3. Run site-specific mode with PAML using three initial values for omega:
##    0.03, 0.3, 1.3
## 4  Parse results
##
## The input is obtained from a directory of multiple alignments and a file
## of components/sequences to take.
##
#################################################################################
SHELL=/bin/bash --login

LOG=log

## priority on the cluster
PARAM_PRIORITY?=-10

## queue to use
PARAM_QUEUE?=medium_jobs.q

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=codeml_sites
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

DIR_TMP=/tmp/

## Filename with src information using ks
PARAM_DIR_SRC_MALIS?=../../orthology_malis/

## Number of samples
PARAM_NUM_SAMPLES?=20

## Pattern to find multiple alignments
PARAM_PATTERN_MALIS?=$(PARAM_DIR_SRC_MALIS)step1.dir/cluster_%s.dir/cluster_%s.bl_mali

################################################
## Omega values
PARAM_OMEGA_VALUES?=0.03 0.3 1.3

################################################
## species tree
PARAM_SPECIES_TREE?=

################################################
## directories and database schemas
PARAM_SRC_SCHEMAS?=

## Number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## Pattern for translation
PARAM_PATTERN_TRANSLATION?=s/_vs_dmel\d+//g

PARAM_SRC_NAMES=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "$(PARAM_PATTERN_TRANSLATION)"`

################################################
## Restrict positive sites to those with an omega 
## larger than this
PARAM_FILTER_SITES_OMEGA?=1.0

################################################
## Restrict positive sites to those with a probability
## larger than this:
PARAM_FILTER_SITES_PROBABILITY?=0.90

################################################
## Use the following models:
## 2: nested models 1 and 2
## 3: nested models 0 and 3
## 8: nested models 7 and 8
PARAM_FILTER_MODELS?=2 8

################################################
## Use the following methods:
## beb: bayesian empirical bayes
## neb: naive empirical bayes
PARAM_FILTER_METHOD?=beb

################################################
## Significance threshold for log-likelihood test
PARAM_SIGNIFICANCE_THRESHOLD?=0.05

################################################
# Section parameters: end
################################################
REQUISITES=input.species input.tree input.map

#####################################################################################
#####################################################################################
#####################################################################################
## Translate branch designations into terminal codes
CMD_MY_TRANSLATE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=my_translation --column=1

GENOMES_COMMA=`echo $(PARAM_SRC_SCHEMAS) | perl -p -e "s/ +/,/g"`

#######################################################################################
## preparation of run
##
##
#######################################################################################
data.prepare: 
	$(PRELOG)
	$(MAKE) data.dir
	$(CMD_LOG) "creating directories and writing malis."
	@python $(DIR_SCRIPTS_TOOLS)malis2malis.py \
		--filename-components=input.map \
		--pattern-mali=$(PARAM_PATTERN_MALIS) \
	       	--pattern-component="^(\S+)_" \
		--pattern-output="data.dir/cluster_%s.dir/cluster_%s.fasta" \
		--pattern-filter="^([^|]+)[|]" \
		--filename-filter=input.species \
		--output-format=fasta > $@
	$(CMD_LOG) "adding Makefiles to directories."
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		ln -s ../../Makefile $${d}/Makefile; \
	done
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
## run
#######################################################################################
DATA=$(wildcard cluster_*.dir)

data.run: data.prepare
	$(PRELOG)
	@$(MAKE) -C data.dir -k -j $(PARAM_NUM_JOBS) $@-hook
	$(EPILOG)

$(DATA):
	$(PRELOG)
	@$(MAKE) -C $@ data.run-subhook 
	$(EPILOG)

data.run-hook: $(DATA)

data.run-subhook: 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) $(MAKE) sites.run-hook < /dev/null
	@touch $@
	$(EPILOG)

.PHONY: $(DATA)

data.show-progress:
	@echo "# prediction status at `date`" >> data.progress
	@find data.dir -name "cluster*.output" -exec tail -n 1  {} \; |\
	grep "Time used" |\
	awk -v ntotal=`find data.dir -name "*.fasta" | wc -l` \
	'{ nfinished+=1; } \
	END {   printf("# NFIN\tNSTART\tNLEFT\tPLEFT\n"); \
		ntotal*=3; \
		printf("%i\t%i\t%i\t%5.2f\n", nfinished,ntotal,ntotal-nfinished,((ntotal-nfinished)*100)/ntotal); }' \
	>> data.progress
	@tail data.progress

data.remove-unfinished:
	$(PRELOG)
	$(CMD_MSG) "starting removal" > $@.log
	@printf "cluster\tfile\n" > $@.log
	@for d in data.dir/cluster_*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}.counts; \
		if test -e $${file} && ! grep -q "# job finished in" $${file}; then \
			rm -f $${file}; \
			let "ncounts=ncounts+1"; \
			printf "%s\t%s\n" $${cluster_id} $${file} >> $@.log; \
		fi; \
		for omega in $(PARAM_OMEGA_VALUES); do \
			file=$${d}/cluster_$${cluster_id}_$${omega}.log; \
			if [[ -e $${file} && `grep -c "Time used" $${file}` -lt "7" ]]; then \
				let "nsites=nsites+1"; \
				printf "%s\t%s\n" $${cluster_id} $${file} >> $@.log; \
				rm -f $${file}; \
			fi; \
		done; \
	done; \
	$(CMD_LOG2) "removed $${ncounts} files: *.counts"; \
	$(CMD_LOG2) "removed $${nsites} files: *.log"
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Targets to execute in subdirectory
#######################################################################################
QUERY_SUBDIR=$(wildcard cluster_*.fasta)
TARGET_SUBDIR=$(QUERY_SUBDIR:%.fasta=%.sites)

sites.run-hook: $(TARGET_SUBDIR)

## include rules for pre-processing sequence for site
## specific analysis
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.sites_preparation

#################################################################################
%.sites: %.sites.prepare %.sites.run %.sites.finish
	$(EPILOG)

## Create codeml control file
## 1. Use full codon table
## 2. Set omega to several values
%.sites.prepare: %.phylip %.kaks %.tree %.ptree 
	$(PRELOG)
	@for omega in $(PARAM_OMEGA_VALUES); do \
		mkdir $*_$${omega}.dir; \
		python $(DIR_SCRIPTS_GENEPREDICTION)WrapperCodeML.py \
		--filename-output=../$*_$${omega}.output \
		--filename-sequences=../$*.phylip \
		--filename-tree=../$*.ptree \
		--write-control-file \
		--analysis=site-specific-kaks \
		--set-omega=$${omega} \
		--set-codon-frequencies=3 \
		--verbose=0 \
		> $*_$${omega}.ctl ; \
	done
	@touch $@
	@$(EPILOG)

QUERIES_CODEML=$(wildcard *.ctl)
TARGETS_CODEML=$(QUERIES_CODEML:%.ctl=%.log)

%.sites.run: %.sites.prepare
	$(PRELOG)
	$(MAKE) subdir.run-hook
	$(EPILOG)

%.sites.finish: %.counts
	$(PRELOG)
	$(EPILOG)

sites-clean:
	rm -f *.phylip *.tree *.ptree *.cleaned_fasta *.output *.log *.sites* *.err *.map

subdir.run-hook: $(TARGETS_CODEML)

%.log: %.ctl
	$(PRELOG)
	@cd $*.dir; codeml ../$*.ctl < /dev/null > ../$@
	$(EPILOG)

#######################################################################################
#######################################################################################
#######################################################################################
#######################################################################################
## Primary targets for statistics

TARGET_STATS=$(QUERY_SUBDIR:%.fasta=%.stats)
OUTPUT_FILES=$(PARAM_OMEGA_VALUES:%=$*_%.output)

stats: $(TARGET_STATS)

%.stats: %.counts
	$(EPILOG)

%.counts:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)codemls2tsv.py \
		--filter-probability=$(PARAM_FILTER_SITES_PROBABILITY) \
		--filter-omega=$(PARAM_FILTER_SITES_OMEGA) \
		--models=`echo $(PARAM_FILTER_MODELS) | perl -p -e "chop; s/\s+/,/g"` \
		--analysis=`echo $(PARAM_FILTER_METHOD) | perl -p -e "chop; s/\s+/,/g"` \
		--method=summary-numbers \
		--significance-threshold=$(PARAM_SIGNIFICANCE_THRESHOLD) \
		--prefix=$* \
		$(OUTPUT_FILES) > $@
	$(EPILOG)

.PRECIOUS: %.counts

#######################################################################################

counts.summary:
	$(PRELOG)
	@rm -f $@
	@for d in data.dir/cluster*.dir; do \
		cluster_id=$${d#data.dir/cluster_}; \
		cluster_id=$${cluster_id%.dir}; \
		file=$${d}/cluster_$${cluster_id}.counts; \
		if test ! -e $${file}; then \
			rm -f $${file}; \
			$(CMD_MSG2) "remaking $${file}"; \
			$(MAKE) -C $${d} cluster_$${cluster_id}.counts; \
		fi; \
		if test ! -e $@; then \
			grep -v -e "#" $${file} > $@; \
		else \
			grep -v -e "#" $${file} -e "prefix" >> $@; \
		fi; \
	done
	$(EPILOG)

#######################################################################################
clean:
	rm -rf *.output *.ctl *.dir *.log *.map *.phylip *.tree

#######################################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

