################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.codonbias_prepare 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
## Makefile to create cleaned multiple alignments for codon bias analysis

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=geneprediction
################################################
## directories
## directory where gene prediction scripts can be found
DIR_SCRIPTS_GENEPREDICTION?=/home/andreas/gpipe/
## directory where various helper scripts can be found
DIR_SCRIPTS_TOOLS?=/net/cpp-group/scripts/tools/
## shared directory, path for submit host
DIR_TMP_SHARED_LOCAL?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/
## shared directory, path for cluster node
DIR_TMP_SHARED_REMOTE?=/net/cpp-group/gpipe/tmp/$(PARAM_PROJECT_NAME)/

PARAM_PATTERN_COMPONENT?=(^\S+)_

PARAM_PATTERN_MALIS?=../../orthology_malis/data.dir/cluster_%s.dir/cluster_%s.na_mali

## Options for Gblocks
PARAM_GBLOCKS_OPTIONS?=

################################################
## number of species
PARAM_NUM_SPECIES?=12

################################################
## Predictions to use for codon bias calculation.
PARAM_QUALITIES?=CG,PG,SG

################################################
# Section parameters: end
################################################

nop:

prepare:
	$(PRELOG)	
	@python $(DIR_SCRIPTS_TOOLS)malis2malis.py \
		--filename-components=input.map \
		--pattern-mali=$(PARAM_PATTERN_MALIS) \
		--pattern-component="$(PARAM_PATTERN_COMPONENT)" \
	> $@	
	$(EPILOG)

run: prepare
	$(MAKE) -j $(PARAM_NUM_JOBS) $@-hook

QUERIES=$(wildcard *.mali)
TARGETS=$(QUERIES:%.mali=%.bl)

run-hook: $(TARGETS)
	@touch $@

finish: run cds peptides representatives

## removes all multiple alignments with empty sequences
cds:
	$(PRELOG)
	@rm -f export_clustering_*_cds.fasta
	@rm -f $@.log
	@for file in *.bl; do \
		$(CMD_MSG2) "processing $${file}"; \
		nempty=`grep "^$$" < $${file} | wc -l`; \
		if [[ $${nempty} -gt 0 ]]; then \
			printf "empty alignment: %s\n" $${file} >> $@.log; \
		else \
		    python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
			    --verbose=0  < $${file} |\
		    awk -v qq="$(PARAM_QUALITIES)" -v file=$${file} -v nspecies=$(PARAM_NUM_SPECIES) \
			    'BEGIN { keep=1; split( qq, q, ","); for (x in q) { qualities[q[x]] = 1; } } \
			    /^>/ { split( $$0, a, "$(PARAM_SEPARATOR)"); \
				    if (!a[4] in qualities) { keep=0;}; id=$$0; next} \
			    { sub( "-", "", $$0); if (length($$0) == 0){ keep=0;} \
			      output[id] = $$0; n+=1; } \
			    END { if (keep && n == nspecies) { for (x in output) { printf("%s\n%s\n", x, output[x])} } \
			    else { printf("skipped alignment: %s", file) >> "$@.log" } }' |\
		    awk '/>/ {split( substr($$1,2),a,"|"); outfile=sprintf("export_clustering_%s_cds.fasta", a[1])} \
			    {print >> outfile;}'; \
		fi; \
	done
	@touch $@
	$(EPILOG)

peptides: cds
	$(PRELOG)
	@rm -f export_clustering_*_peptides.fasta
	@for file in export_clustering_*_cds.fasta; do \
		rest=$${file#export_clustering_}; \
		schema=$${rest%_cds.fasta}; \
		python $(DIR_SCRIPTS_TOOLS)fasta2fasta.py \
			--verbose=0  --method=translate \
		< $${file} > export_clustering_$${schema}_peptides.fasta; \
	done
	@touch $@
	$(EPILOG)

sets: cds
	$(PRELOG)
	@rm -f export_clustering_*_peptides.fasta
	@for file in export_clustering_*_cds.fasta; do \
		rest=$${file#export_clustering_}; \
		schema=$${rest%_cds.fasta}; \
		grep ">" $${file} | perl -p -e "s/>//" \
		> export_clustering_$${schema}_representatives; \
	done
	@touch $@
	$(EPILOG)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
## Filter positions by GBlocks
#######################################################################
## Note: Gblocks always ends on error code 1, thus ignore it.
%.bl: %.mali
	$(PRELOG)
	@rm -f $@.log
	@-Gblocks $< -t=c $(PARAM_GBLOCKS_OPTIONS) > $@.log
	@mv $<-gb $@
	@rm -f $<-*
	@nkept=`grep "Gblocks alignment" $@.log | tail -n 1 | perl -p -e "s/.*positions \(//; s/ %\).*//;"`; \
	$(CMD_LOG2) "mali $<: $${nkept}"
	$(EPILOG)

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common