################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.prepare 1760 2008-03-18 10:32:58Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

#########################################################################
## Preparation steps:
#########################################################################

#########################################################################
create-log-hook:
	@echo "# input file(s) with peptide sequences:" $(TOLOG)
	@ls -l $(PARAM_INPUT_PEPTIDES) $(TOLOG)
	@echo "# input file and index with genomic sequences: " $(TOLOG)
	@ls -l $(PARAM_INPUT_GENOME).{fasta,idx} $(TOLOG)
	@echo "#################`date`#############################" $(TOLOG)
	@echo "# program versions:" $(TOLOG)
	@echo "exonerate : `which exonerate | head -n 1`     `exonerate --version | head -n 1`" $(TOLOG)
	@echo "python    : `which python | head -n 1`	`python -V 2>&1`" $(TOLOG) 
	@echo "perl      : `which perl | head -n 1`		`perl -v | grep 'This is'` " $(TOLOG)
	@echo "seg       : `which seg | head -n 1`" $(TOLOG)
	@echo "#################`date`#############################" $(TOLOG)

#########################################################################
## create all the tables for the pipeline. 
## WARNING: this command will overwrite existing tables.
create-tables: $(PARAM_TABLE_NAME_PREDICTIONS).create-table-predictions \
	$(PARAM_TABLE_NAME_EXONS).create-table-exons \
	$(PARAM_TABLE_NAME_EXONS_SUMMARY).create-table-exons_summary \
	$(PARAM_TABLE_NAME_REGIONS).create-table-predictions \
	$(PARAM_TABLE_NAME_QUERIES).create-table-queries \
	$(PARAM_TABLE_NAME_KAKS).create-table-kaks \
	$(PARAM_TABLE_NAME_QUALITY).create-table-quality \
	$(PARAM_TABLE_NAME_GENES).create-table-genes \
	$(PARAM_TABLE_NAME_GENEINFO).create-table-geneinfo \
	$(PARAM_TABLE_NAME_CONTIGS).create-table-contigs \
	$(PARAM_TABLE_NAME_CDS).create-table-cds \
	$(PARAM_TABLE_NAME_REDUNDANT).create-table-map \
	$(PARAM_TABLE_NAME_TRANSCRIPTS).create-table-transcripts \
	$(PARAM_TABLE_NAME_OVERVIEW).create-table-overview \
	$(PARAM_TABLE_NAME_PREDICTION2GENOME).create-table-prediction2genome \
	$(PARAM_TABLE_NAME_DISRUPTIONS).create-table-disruptions \
	$(PARAM_TABLE_NAME_INTRONS).create-table-introns

#########################################################################
## convert cdnas to coding sequences.
cds.fasta: $(PARAM_INPUT_CDNAS)
	map_cdna_onto_aa -p $(PARAM_INPUT_PEPTIDES) -c $(PARAM_INPUT_CDNAS) -o temp$@.fasta -f $@
	rm -f temp$@.fasta

#########################################################################
## Scripts for cluster runs
#########################################################################
## exonerate 
define EXONERATE_SCRIPT
#!/bin/bash\n\
detect_pipe_error_helper()\n\
{\n\
    while [ "\$$#" != 0 ] ; do \n\
        # there was an error in at least one program of the pipe \n\
        if [ "\$$1" != 0 ] ; then return 1 ; fi \n\
        shift 1 \n\
    done \n\
    return 0 \n\
} \n\
\n\
detect_pipe_error() \n\
{ \n\
    detect_pipe_error_helper "\$${PIPESTATUS[@]}" \n\
    return \$$? \n\
} \n\
\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
echo \"# query  : $$1" \n\
echo \"# target : $$2" \n\
exonerate $(EXONERATE_OPTIONS) --query \$$1 --target \$$2 |\
python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/exonerate2regions.py \
	--force-contiguous \
	--peptides=\$$1 \
	--genome=\$$2 \
	--max-intron=$(PARAM_EXONERATE_MAX_INTRON) \
	--correct-offset \
	--dump ;\
detect_pipe_error\n\
if [ \$$? != 0 ]; then \n\
exit 1\n\
fi \n\
exit 0
endef

exonerate.bash:
	$(CMD_LOG) "creating script $@"
	@echo -e "$(EXONERATE_SCRIPT)" > $@
	@chmod 770 $@
	@$(PARAM_CMD_COPY)$@ $(DIR_TMP_SHARED_LOCAL)

#############################################################################
## prediction
define PREDICTION_SCRIPT
#! /bin/bash\n\
echo \"# \$$0 started at \`date\`\" \n\
echo \"# execution host   : \`hostname\`\" \n\
python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py $(PARAM_PREDICTION_OPTIONS) -\n\
exit \$$?
endef

prediction.bash:
	$(CMD_LOG) "creating script $@"
	@echo -e "$(PREDICTION_SCRIPT)" > $@
	@chmod 770 $@
	@$(PARAM_CMD_COPY)$@ $(DIR_TMP_SHARED_LOCAL)

#############################################################################
## prediction
define MEMBERS_SCRIPT
#! /bin/bash\n\
python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/predict_genes.py $(PARAM_MEMBERS_OPTIONS) -\n\
exit \$$?
endef

members.bash:
	$(CMD_LOG) "creating script $@"
	@echo -e "$(MEMBERS_SCRIPT)" > $@
	@chmod 770 $@
	@$(PARAM_CMD_COPY)$@ $(DIR_TMP_SHARED_LOCAL)


#############################################################################
## tblastn
tblastn.bash:
	$(CMD_LOG) "creating script $@"
	@cat $(DIR_SCRIPTS_GENEPREDICTION)tblastn.bash |\
		perl -pe "s/param_blast=\".*\"/param_blast=\"$(PARAM_TBLASTN_OPTIONS)\"/" > $@
	@chmod 770 $@
	@$(PARAM_CMD_COPY)$@ $(DIR_TMP_SHARED_LOCAL)
