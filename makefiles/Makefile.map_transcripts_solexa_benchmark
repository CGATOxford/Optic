################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.map_transcripts_solexa_benchmark 2902 2010-04-13 14:39:05Z andreas $
#
#   Copyright (C) 2005 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################
#################################################################################
#################################################################################
##
## Map and assemble solexa reads from a cDNA library using maq
## This script was written for the benchmarking study.
## 
#################################################################################

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=mapSolexa
################################################

PARAM_GENOME?=pa_ponAbe2

## mapping method. Currently implemented are
PARAM_MAPPING_METHOD?=maq

## maximum number of mismatches to tolerate (maq=7)
PARAM_MAX_MISMATCHES_NUMBER?=7

## sum of quality score of mismatches to discard (maq=60)
PARAM_MAX_MISMATCHES_QUALITY?=60

## options for assembly of transcripts into reads
PARAM_INTRON_TRANSCRIPTS_OPTIONS?=--staggered=all \
		--method=region \
		--method=transcript \
		--method=coverage \
		--threshold-merge-distance=0 \
		--threshold-merge-overlap=3 \
		--start-at=800000

## options for assembly of transcripts into reads
PARAM_TRANSCRIPTS_OPTIONS?=--staggered=all \
		--method=region \
		--method=transcript \
		--method=coverage \
		--threshold-merge-distance=0 \
		--threshold-merge-overlap=3

################################################
# Section parameters: end
################################################

INPUT_QUALITY=$(wildcard *_sequence.txt.qual)
INPUT_FASTA=$(wildcard *_sequence.txt.fasta)

OUTPUT_MAP=$(INPUT_FASTA:%.fasta=%.map)

merge: merged.map

OUTPUT_CHECK=$(INPUT_FASTA:%fasta=%.check)
OUTPUT_CONS=$(INPUT_FASTA:%.fasta=%.cons)
OUTPUT_FQ=$(INPUT_FASTA:%.fasta=%.fq)

map: $(OUTPUT_MAP)

check: merged.check

cons: merged.cons

fq: merged.fq

all: map check cons fq

stats: merged.stats

plots: merged_length_vs_coverage.png

#targets
# %.stage1.map
# %.stage1.transcripts
# %.stage1.missed


####################################################################
####################################################################
####################################################################
## convert solexa quality scores to sanger quality scores
%.fastq: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
		python $(DIR_SCRIPTS_GENEPREDICTION)quality2fasta.py \
			--alphabet=fastq \
			--output-format=fastq \
			--filename-sequences=$*.fasta \
			--encoding=solexa \
			--set-to-default=40 \
			--log=$@.log \
	< $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## convert fasta to binary fasta format
%.bfa: %.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq fasta2bfa $< $@ < /dev/null > $@.log
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## convert the reads to the binary fastq format
%.bfq: %.fastq
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq fastq2bfq $< $@ < /dev/null > $@.log
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## align the reads to the reference
####################################################################
%.stage1.map: genome.bfa %.bfq 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq map $@ $^ >& $@.log
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build the consensus mapping assembly
## -q 1: minimum mapping quality. 0 means read does not map
## unambiguously.
####################################################################
%.cons: genome.bfa %.map 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq assemble -q 1 $@ $^ < /dev/null 2> $@.log
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## positional information on reference sequence
####################################################################
%.pos: %.cons
	$(PRELOG)
	@printf "contig\tpos\tqual\tnreads\tcov\tbestqual\n" > $@
	@maq cns2view $< | awk '$$6 > 0 { printf("%s\t%s\t%s\t%s\t%s\t%s\n", $$1, $$2, $$5, $$6, $$7, $$8);}' >> $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build fasta file with putative introns
####################################################################
%.introns.fasta: %.stage1.transcripts
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)fasta2spliced.py \
		--filename-regions=$<.gff \
		--joined \
		--output-filename-pattern="introns.%s" \
		--log=$@.log \
	> $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build fasta file with sequences from a subset of ids
####################################################################
%.stage2.fasta: %.missed
	$(PRELOG)
	@cat $(INPUT_FASTA) |\
	perl  $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build fasta file with qualities from a subset of ids
####################################################################
%.stage2.qual: %.missed
	$(PRELOG)
	@cat $(INPUT_QUALITY) |\
	perl  $(DIR_SCRIPTS_GENEPREDICTION)extract_fasta.pl -e $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build fasta file with missed queries
####################################################################
%.stage2.fasta: %.missed


####################################################################
####################################################################
####################################################################
## align the reads to the introns file
####################################################################
%.stage2.map: %.introns.bfa %.stage2.bfq 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq map $@ $^ < /dev/null >& $@.log
	$(EPILOG)

##################################################################
##################################################################
##################################################################
## Convert to gtf output
##################################################################
%.gtf: %.transcripts
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)blat2gff.py \
		--as-gtf -v 0 \
	< $<.transcripts |\
	$(DIR_SCRIPTS_GENEPREDICTION)gff_sort genes > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## compute statistics from the alignment
####################################################################
%.check: genome.bfa %.map 
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) maq mapcheck $^ < /dev/null > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## extract consensus and qualities
%.fq: %.cons
	$(PRELOG)
	@maq cns2fq $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## plain text alignment - without sequence
####################################################################
%.aln: %.map
	$(PRELOG)
	@printf "read\tcontig\tstart\tstrand\tpair_insert\tpair_flag\tqual\tqual_single\tqual_alt\tnmismatch\tnmisqual\tnmis0\tnmis1\tlength\n" > $@
	@maq mapview -b $< >> $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## plain text alignment - with sequence 
####################################################################
%.view: %.map
	$(PRELOG)
	@printf "read\tcontig\tstart\tstrand\tpair_insert\tpair_flag\tqual\tqual_single\tqual_alt\tnmismatch\tnmisqual\tnmis0\tnmis1\tlength\tseq\tqual\n" > $@
	@maq mapview $< >> $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## compute mapping statistics
####################################################################
%.summary: %.aln input.ids %.missed.ids %.found.ids
	$(PRELOG)
	@awk -v ninput=`wc -l < input.ids` -v nmissed=`wc -l < $*.missed.ids` \
		'NR == 1 { next; }\
			$$7 > 0 { nunique += 1} \
			$$10 <= $(PARAM_MAX_MISMATCHES_NUMBER) { npassed_counts += 1;} \
			$$11 <= $(PARAM_MAX_MISMATCHES_QUALITY) { npassed_quality += 1;} \
			{ n+=1 } \
			$$7 > 0 && \
			$$10 <= $(PARAM_MAX_MISMATCHES_NUMBER) && \
			$$11 <= $(PARAM_MAX_MISMATCHES_QUALITY) { npassed += 1;} \
		END { \
			printf("data\tcounts\tpercent\n"); \
			printf("reads input\t%i\t%5.2f\n", ninput, ninput / ninput * 100.0);\
			printf("reads mapped\t%i\t%5.2f\n", n, n / ninput * 100.0);\
			printf("reads missed\t%i\t%5.2f\n", nmissed, nmissed / ninput * 100.0); \
			printf("reads unique\t%i\t%5.2f\n", nunique, nunique / ninput * 100.0); \
			printf("reads nmismatches filter\t%i\t%5.2f\n", npassed_counts, npassed_counts / ninput * 100.0); \
			printf("reads quality filter\t%i\t%5.2f\n", npassed_quality, npassed_quality / ninput * 100.0); \
			printf("reads accepted\t%i\t%5.2f\n", npassed, npassed / ninput * 100.0); \
		} \
	' < $< > $@
	@printf "## histogram of mismatches\n" >> $@
	@csv_cut nmismatch < $< | d2h -v 0 --on-the-fly --bin-size=1 --min-value=0 --max-value=10 |\
	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py --is-int -v 0 >> $@
	@printf "## histogram of mismatch qualities\n" >> $@
	@csv_cut nmisqual < $< | d2h -v 0 --on-the-fly --bin-size=1 --min-value=0 --max-value=100 |\
	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py --is-int -v 0 >> $@
	@printf "## histogram of map qualities\n" >> $@
	@csv_cut qual < $< | d2h -v 0 --on-the-fly --bin-size=1 --min-value=0 --max-value=100 |\
	python $(DIR_SCRIPTS_TOOLS)histogram2histogram.py --is-int -v 0 >> $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## identifiers input
%.input: %.fasta
	grep -h "^>" $< | pe "s/^>//" > $@

####################################################################
####################################################################
####################################################################
## identifiers found in stage 1
%.found: %.aln
	$(PRELOG)
	@cut -f 1 $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## identifiers not found in stage 1
####################################################################
%.missed: %.found %.input
	$(PRELOG)
	@perl $(DIR_SCRIPTS_TOOLS)set_rest.pl $^ > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build transcripts from maq output
####################################################################
%.transcripts: %.pos
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)maq2assembly.py \
		--method=gff \
		--method=coverage \
		--method=region \
		--method=quality \
		--output-filename-pattern=$@.%s \
		--log=$@.log < $< > $@
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## build transcripts for intron spanning reads
##
## Note: the sort order of both inputs is critical.
####################################################################
%.stage2.psl: %.stage2.aln introns.fasta
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"cat $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)maq2blat.py \
		--log=$@.log \
		--genome-file=genome \
		--filename-coordinates=introns.coords >$@" \
	< /dev/null
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## combine intron-containing reads into intron-containing transcripts
####################################################################
merged.missed.introns.transcripts: merged.missed.introns.psl 
	$(PRELOG)
	$(CMD_REMOTE_SUBMIT) \
	"sort -k14,14 -k16,16n < $< |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2assembly.py \
		$(PARAM_INTRON_TRANSCRIPTS_OPTIONS) \
		--genome=genome \
		--log=$@.log \
		--output-filename-pattern=$@.%s \
	> $@" < /dev/null
	$(EPILOG)

####################################################################
####################################################################
####################################################################
## merge intron-contaninig with previous results of intron-less transcripts
####################################################################
merged.transcripts.psl: merged.transcripts
	$(PRELOG)
	@$(CMD_REMOTE_SUBMIT) \
	"cat $<.gff |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gff2blat.py \
		--log=$@.log \
		--genome-file=genome \
		--is-gtf >$@" \
	< /dev/null
	$(EPILOG)


####################################################################
####################################################################
####################################################################
## merge intron-contaninig with previous results of intron-less transcripts
####################################################################
all.transcripts: merged.missed.introns.transcripts merged.transcripts.psl
	$(PRELOG)
	$(CMD_REMOTE_SUBMIT) \
	"pslCat merged.missed.introns.transcripts.transcripts merged.transcripts.psl |\
	hsort 5 -k14,14 -k16,16n |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2assembly.py \
		$(PARAM_TRANSCRIPTS_OPTIONS) \
		--genome=genome \
		--log=$@.log \
		--output-filename-pattern=$@.%s \
	> $@" < /dev/null
	$(EPILOG)

####################################################################
####################################################################
####################################################################
%.stats: %.transcripts
	$(PRELOG)
	@ct -v 0 \
	<(awk 'BEGIN{printf("size\n")} {printf("%i\n", $$5-$$4)}' < $<.gff | d2s) \
	<(awk 'BEGIN{printf("distance\n")} {if(l && a==$$1) {printf("%i\n", $$4-l)}; a=$$1; l=$$5}' < $<.gff | d2s ) \
	> $@
	@ct -v 0 --sort-keys=numeric \
	<(awk 'BEGIN{printf("size\n")} {printf("%i\n", $$5-$$4)}' < $<.gff | d2h --min-value=0 --bin-size=1 ) \
	<(awk 'BEGIN{printf("distance\n")} {if(l && a==$$1) {printf("%i\n", $$4-l)}; a=$$1; l=$$5}' < $<.gff | d2h --min-value=0 --bin-size=1) > $@.hist
	@h2p --logscale=x --normalize --cumulate --hardcopy=$@.png < $@.hist
	$(EPILOG)

####################################################################
####################################################################
####################################################################
%_length_vs_coverage.png: %.transcripts
	$(PRELOG)
	@awk 'BEGIN {printf("length\tcoverage\n"); } {printf("%i\t%f\n", $$5-$$4, $$6);}' < $<.gff |\
	python $(DIR_SCRIPTS_TOOLS)calculate_histogram_2D.py --bin-size1=25 --bin-size2=1  |\
	python $(DIR_SCRIPTS_TOOLS)sparse2full.py --asymmetric --numeric --log=$@.log |\
	m2m --method=log --log=$@.log | m2p --labels=length,coverage --hardcopy=$@ >> $@.log
	$(EPILOG)

view-all_%:
	pslCat merged.missed.introns.transcripts.transcripts merged.transcripts.psl |\
	ft --column=10 --apply=<(grep "^$*\b" all.transcripts | cut -f 2) |\
	sort  -k14,14 -k16,16n | grep -v "psLayout" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2assembly.py \
		$(PARAM_TRANSCRIPTS_OPTIONS) \
		--method=pileup \
		--genome=genome \
		--threshold-merge-overlap=10 \
		--input-filename-queries=merged_missed \
		--log=$@.log \
		--output-filename-pattern=$@.%s \
	> $@

view-introns_%:
	pslCat merged.missed.introns.psl |\
	ft --column=10 --apply=<(grep "^$*\b" merged.missed.introns.transcripts | cut -f 2) |\
	sort  -k14,14 -k16,16n | grep -v "psLayout" |\
	python $(DIR_SCRIPTS_GENEPREDICTION)blat2assembly.py \
		$(PARAM_TRANSCRIPTS_OPTIONS) \
		--method=pileup \
		--genome=genome \
		--threshold-merge-overlap=10 \
		--input-filename-queries=missed \
		--log=$@.log \
		--output-filename-pattern=$@.%s \
	> $@

###########################################################################
###########################################################################
###########################################################################
## compute transcripts
## On setting the kmer length:
##
## The kmer-coverage should be larger than 10
## kmC = C * (L - k + 1) / L
##   C: statistical residue coverage
##   L: read length
##   k: kmer length
###########################################################################
PARAM_VELVET_BUILD_OPTIONS?=-read_trkg yes
PARAM_VELVET_INDEX_OPTIONS?=23

%.velvet: %.fasta
	$(PRELOG)
	-@$(CMD_BENCHMARK) \
	/net/cpp-group/src/velvet/b64/velvet_0.7.04/velveth $@.dir $(PARAM_VELVET_INDEX_OPTIONS) $< >& $@
	-@$(CMD_BENCHMARK) \
	/net/cpp-group/src/velvet/b64/velvet_0.7.04/velvetg $@.dir $(PARAM_VELVET_BUILD_OPTIONS) >> $@
	@mv $@.dir/contigs.fa $@.fasta
	@mv $@.dir/stats.txt $@.stats
	@perl $(DIR_SCRIPTS_TOOLS)regtail.pl "^NR" < $@.dir/LastGraph |\
		awk '/^NR/ {next;} {printf("%s\n",$$1); }' | sort | uniq > $@.reads
	@rm -rf $@.dir
	$(EPILOG)

###########################################################################
include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

