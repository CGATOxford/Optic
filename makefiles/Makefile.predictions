################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.predictions 698 2006-07-19 15:53:22Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

##############################################################################
## Step 6: run predictions
##############################################################################
step%: step%.0 step%.1 step%.2 step%.3
	echo "`date`: $@ completed." >> $(LOG); 
	touch $@

step%.rollback:
	$(MAKE) step$(*).clean
	rm -f $(*).{prepare,matches,predictions,load}
	rm -f step$(*)*

##############################################################################
## Step 6.0: prepare representatives alignemnts
##	-> massage boundaries as transcripts do not match completely, add something to the beginning
##		and end $(PARAM_PREDICTION_MARGIN)
##	-> split the peptides files into individual files.
##############################################################################
step%.0: step5 $*.prepare
	echo "`date`: $@ completed." >> $(LOG); 
	touch $@

## for efficient processing, exonerate.predictions should be sorted by genomic region.
## which the output from exonerate.predictions not necessarily is.
%.prepare: 
	grep -v "#" regions.predictions |\
	sort -k2,2 -t'	' |\
	python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/assignments2pairs.py \
	--min-margin=$(PARAM_PREDICTION_MIN_MARGIN) \
	--default-margin=$(PARAM_PREDICTION_MARGIN) \
	--genome-file=$(PARAM_INPUT_GENOME) \
	--prefix=representatives_ \
	--suffix=.chunk \
	--format=chunks \
	--peptides=$(INPUT_PEPTIDES) \
	--chunk=$(PARAM_PREDICTION_CHUNKSIZE) > $@; \
	detect_pipe_error;

##############################################################################
## Step 6.1: run prediction
##############################################################################
step6.1: step6.0 representatives.matches
	echo "`date`: $@ completed." >> $(LOG); 
	touch $@

representatives.matches: step6.0
	echo "`date`: started prediction of representatives" >> $(LOG);
	cp reference.exons $(DIR_TMP_SHARED_REMOTE)
	$(MAKE) -k -j $(PARAM_PREDICTION_NUMJOBS) $@_parallel_hook 
	find . -name "representatives_*.matches" -exec cat {} \; > $@
	rm -f $(DIR_TMP_SHARED_REMOTE)reference.exons

representatives.matches_parallel_hook : $(REPRESENTATIVES_TARGETS)
	sleep 5

representatives_%.matches: representatives_%.chunk
	$(CMD_REMOTE_SUBMIT) $(DIR_TMP_SHARED_REMOTE)prediction.bash < representatives_$*.chunk > $@

step6.purify:
	for file in representatives_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "deleting $$file"; \
			rm -f $$file; \
		fi \
	done

step6.show_unfinished:
	for file in representatives_*.matches; do \
		tail -n 1 $$file | grep -q "# job finished"; \
		if [[ $$? == 1 ]] ; then \
			echo "$$file is incomplete."; \
		fi \
	done

step6.clean: 
	find . -name "representatives_*.matches" -exec rm {} \;
	find . -name "representatives_*.chunk" -exec rm {} \;
	find . -name "peptide_*.fasta" -exec rm {} \;

step6.add_progress:
	echo "# prediction status at `date`" >> step6.progress
	find . -name "representatives_*.matches" -exec grep "RESULT:" {} \; |\
	perl -p -e "s/.*time=//; s/[^0-9\n]//g" |\
	awk -v total=`grep "# written" representatives.prepare | perl -p -e "s/\D+//g"` '{a+=$$1; n+= 1} \
	END {   printf("# TCUM\tNFIN\tTAVG\tNTOT\tCTTOT\tNLEFT\tCTLEFT\tTLEFT\n"); \
		printf("# [s]\t\t[s]\t\t[h]\t\t[h]\t[\h]\n"); \
		tpe=a/n; \
		t = total*tpe/60/60; \
		printf("%i\t%i\t%5.2f\t%i\t%5.2f\t%i\t%5.2f\t%5.2f\n",a,n,tpe,total,t,total-n,t-(a/60/60),(t-(a/60/60))/28 );}' \
	>> step6.progress

##############################################################################
## Step 6.2: parse prediction.
##############################################################################
step6.2: step6.1 representatives.predictions
	echo "`date`: $@ completed." >> $(LOG); 
	touch $@

representatives.predictions: step6.1
	cat representatives.matches |\
	awk ' BEGIN { keep=0; } \
	/^# RESULT:/ { keep=1; } \
	/^# START: / { keep=0}; \
	/^#/ { next; }  \
	/^"/ { next; }  \
	/^\\/ { next; }  \
	{ if (keep) {print;} } ' > $@
	grep -v "#" representatives.predictions | cut -f 2 | sort | uniq > representatives_predictions_transcripts; \
	diff representatives_predictions_transcripts exonerate_predictions_transcripts |\
	 grep ">" | perl -pe "s/> //" > representatives_missed_transcripts; \
	echo "## Prediction:" >> $(LOG) ;\
	grep -e '# pairs' -e '# trans' representatives.predictions >> $(LOG); \
	echo "number of aligned pairs: `grep -v '#' representatives.predictions | wc -l`" >> $(LOG); \
	echo "number of aligned transcripts: `wc -l representatives_predictions_transcripts`" >> $(LOG); \
	echo "number of missed transcripts: `wc -l representatives_missed_transcripts`" >> $(LOG); \

##############################################################################
## Step 6.3: quality control
##############################################################################
step6.3: step6.2 representatives.matches
	echo "## Step6 - prediction of representatives:" >> $(LOG) ;
	awk ' BEGIN { nsuccess=0; nfailed=0; } \
		/no prediction possible/ {++nfailed; next;} \
		/RESULT:/ { ++nsuccess; next;} \
	      END { ntotal=nsuccess+nfailed; \
		printf("number of tests total:      %8i\n", ntotal); \
		printf("number of tests successful: %8i (%4.1f%%)\n", nsuccess, nsuccess*100/ntotal); \
		printf("number of tests failed:     %8i (%4.1f%%)\n", nfailed, nfailed*100/ntotal); } \
	    ' \
	< representatives.matches >> $(LOG)
	echo "`date`: $@ completed." >> $(LOG); 
	touch $@
