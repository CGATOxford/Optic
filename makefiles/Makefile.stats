################################################################################
#   Gene prediction pipeline 
#
#   $Id: Makefile.stats 2781 2009-09-10 11:33:14Z andreas $
#
#   Copyright (C) 2004 Andreas Heger
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#################################################################################

SHELL=/bin/bash --login
LOG=log

################################################
## Section parameters: start
################################################
## project name
PARAM_PROJECT_NAME?=stats

PARAM_DIR_UPLOAD?=/home/andreas/uploads/

## src schemas
PARAM_SRC_SCHEMAS?=

## directory of prediction runs
PARAM_SRC_DIRS?=$(PARAM_SRC_SCHEMAS)

## number of genomes
PARAM_NUM_GENOMES?=`echo $(PARAM_SRC_SCHEMAS) | wc -w`

## names of genomes (for export)
PARAM_SRC_NAMES?=$(PARAM_SRC_SCHEMAS)

################################################
PARAM_PSQL_SCHEMA?=$(PARAM_PROJECT_NAME)

################################################
PARAM_SRC_PEPTIDES?=../data_1v2/peptides.fasta

################################################
# Section parameters: end
################################################

QUALITY_NUM_CLASSES=15
QUALITY_CLASSES=CG SG PG RG UG CP SP PP RP UP SF CF PF UF BF
QUALITY_CLASSES_COMMA=CG,SG,PG,RG,UG,CP,SP,PP,RP,UP,SF,CF,PF,UF,BF
QUALITY_GOODGENES_COMMA=CG,SG,PG
QUALITY_FRAGMENTS_COMMA=CF,SF,PF,UF,BF
QUALITY_PSEUDOGENES_COMMA=CP,SP,PP,RP,UP,PF
QUALITY_EXPORTGENES_COMMA=CG,SG,PG,RG,CP,SP,PP

QUALITY_PRIORITY_COMMA="CG,PG,SG,RG,CP,PP,SP,RP,CF,PF,SF,UG,UP,UF,BF,UK"

QUALITY_CONSERVEDGENES_QUOTED_COMMA='CG','SG','PG','CP','SP','PP','CF','SF','PF'
QUALITY_UNCONSERVEDGENES_QUOTED_COMMA='UG','UP','BF','UK','RG','RP','UF'
QUALITY_GOODGENES_QUOTED_COMMA='CG','SG','PG'
QUALITY_PSEUDOGENES_QUOTED_COMMA='CP','SP','PP','RP','UP','PF'
QUALITY_FRAGMENTS_QUOTED_COMMA='CF','SF','PF','UF','BF'
QUALITY_EXPORTGENES_QUOTED_COMMA='CG','SG','PG','RG','CP','SP','PP'

CMD_FIELDS_QUALITY=`for ((x=1; x <= $(QUALITY_NUM_CLASSES); ++x)) do echo -n ",predictions_per_class[$$x]"; done``for ((x =1; x <= $(QUALITY_NUM_CLASSES); ++x)) do echo -n ",nr_predictions_per_class[$$x]"; done`

################################################
## Comma-separated lists for schemas, names and directories.
SCHEMAS_COMMA=`echo "$(PARAM_SRC_SCHEMAS)" | perl -p -e "s/^ +//; s/ +$$//; s/ +/,/g"`
NAMES_COMMA=`echo "$(PARAM_SRC_NAMES)" | perl -p -e "s/^ +//; s/ +$$//; s/ +/,/g"`
DIRS_COMMA=`echo "$(PARAM_SRC_DIRS)" | perl -p -e "s/^ +//; s/ +$$//;s/ +/,/g"`

################################################
## Summary calculations
INDIVIDUAL_TARGETS=input.summary output.summary redundant.summary steps.summary \
	classes_genes.summary good_genes.summary pseudo_genes.summary \
	fragments_genes.summary \
	export_genes.summary \
	missed_queries.summary \
	missed_exons.summary found.summary 

IMAGE_TARGETS= classes_genes.png good_genes.png pseudo_genes.png fragments_genes.png export_genes.png \
		queries_coverage_fu.png queries_coverage_fn.png \
		queries_identity_fu.png queries_identity_fn.png 

##############################################################################
##############################################################################
##############################################################################
## build all reports
##############################################################################
all: translation \
	$(INDIVIDUAL_TARGETS) \
	queries.summary queries.report 


##############################################################################
## The translation table
CMD_TRANSLATE=python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py --apply=translation --multiple --columns=all

##############################################################################
## setting variables for filter. If filter exists, some results are filtered
## by it.
FILTER_PREDICTIONS=$(wildcard filter)

ifneq ($(FILTER_PREDICTIONS), )
CMD_FILTER=--filter=$(FILTER_PREDICTIONS)
endif

################################################
## write colour schema
colours:
	$(PRELOG)
	@rm -f $@
	@printf "%s\t%s\n" class colour >> $@
	@printf "%s\t%s\t%s\n" CG orange1 >> $@
	@printf "%s\t%s\n" PG orange4 >> $@
	@printf "%s\t%s\n" SG green2 >> $@
	@printf "%s\t%s\n" RG green4 >> $@
	@printf "%s\t%s\n" CP aquamarine1 >> $@
	@printf "%s\t%s\n" PP aquamarine4 >> $@
	@printf "%s\t%s\n" SP blue1 >> $@
	@printf "%s\t%s\n" RP blue4 >> $@
	@printf "%s\t%s\n" CF grey20 >> $@
	@printf "%s\t%s\n" PF grey40 >> $@
	@printf "%s\t%s\n" SF grey30 >> $@
	@printf "%s\t%s\n" UG grey70 >> $@
	@printf "%s\t%s\n" UP grey80 >> $@
	@printf "%s\t%s\n" UF grey90 >> $@
	@printf "%s\t%s\n" BF grey95 >> $@
	@printf "%s\t%s\n" UK white >> $@
	$(EPILOG)

################################################
## Summary on input
input.summary:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'contigs', COUNT(*) FROM $${x}.contigs" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'nucleotides', SUM(size) FROM $${x}.contigs" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'peptides', COUNT(*) FROM $${x}.queries" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'genes', COUNT(distinct rep_token) FROM $${x}.queries" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

###############################################
## Summary on masks
masks.summary:
	$(PRELOG)
	@rm -f $@
	@printf "genome\ttotal\tnhard\tphard\tnsoft\tpsoft\n" >> $@
	@for x in $(PARAM_SRC_DIRS); do \
		nmasked="`grep -h -v '>' $$x/genome*.fasta | perl -p -e 's/[^NXxn]//g' | wc -c`"; \
		nlower="`grep -h -v '>' $$x/genome*.fasta| perl -p -e 's/[^a-z]//g; s/[xn]//g' | wc -c`"; \
		ntotal="`grep -h -v '>' $$x/genome*.fasta| perl -p -e 's/\s//g' | wc -c`"; \
		awk -v genome="$${x}" -v nmasked="$${nmasked}" -v nlower="$${nlower}" -v ntotal="$${ntotal}" \
		'END { printf("%s\t%i\t%i\t%5.2f\t%i\t%5.2f\n", \
			genome, ntotal, \
			nmasked, 100 * nmasked / ntotal, \
			nlower, 100 * nlower / ntotal ); }' \
		< /dev/null >> $@; \
	done
	$(EPILOG)

###############################################
## Summary on output: number of rows in tables
output.summary:
	$(PRELOG)
	@-for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'predictions', COUNT(*) FROM $${x}.predictions" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'genes', COUNT(*) FROM $${x}.genes" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'geneids', COUNT(DISTINCT gene_id) FROM $${x}.genes" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'overlapids', COUNT(DISTINCT overlap_id) FROM $${x}.genes" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'transcripts', COUNT(*) FROM $${x}.transcripts" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'overview', COUNT(*) FROM $${x}.overview" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'redundant', COUNT(*) FROM $${x}.redundant" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'representatives', COUNT(DISTINCT rep_prediction_id) FROM $${x}.redundant" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'members', COUNT(DISTINCT mem_prediction_id) FROM $${x}.redundant" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'kaks', COUNT(DISTINCT prediction_id) FROM $${x}.kaks" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

#################################################################
## number of predictions/nr_predictions per query in each schema.
found.summary:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.queries WHERE npredictions > 0" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'nr',  COUNT(*) FROM $${x}.queries WHERE nr_npredictions > 0 " $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

################################################
## Summary on redundancy removal
redundant.summary:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'reps', COUNT(*) FROM $${x}.redundant WHERE rep_prediction_id = mem_prediction_id;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'members', COUNT(*) FROM $${x}.redundant WHERE rep_prediction_id != mem_prediction_id;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

################################################
## Summary on number of predictions
steps.summary:
	$(PRELOG)
	@for dir in $(PARAM_SRC_DIRS); do \
		echo -e "step\t$${dir}" > $@_$${dir}.tmp; \
		for step in step3 step5 step6 step7 step8; do \
			if [[ -e $${dir}/$${step}.predictions ]]; then \
				printf "%s\t%s\n" $${step} `grep -c -v "#" $${dir}/$${step}.predictions` >> $@_$${dir}.tmp; \
			elif [[ -e $${dir}/$${step}.predictions.gz ]]; then \
				printf "%s\t%s\n" $${step} `gunzip < $${dir}/$${step}.predictions.gz | grep -c -v "#" ` >> $@_$${dir}.tmp; \
			else \
				printf "%s\t%s\n" $${step} 0 >> $@_$${dir}.tmp; \
			fi; \
		done; \
	done ; 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(DIRS_COMMA)" $@_*.tmp | $(CMD_TRANSLATE) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

################################################
## summary for all genes
classes_genes.summary:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/analyze_genes.py \
	--genomes="$(SCHEMAS_COMMA)" \
	$(CMD_FILTER) | $(CMD_TRANSLATE) > $@
	$(EPILOG)

good_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_GOODGENES_COMMA)
export_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_EXPORTGENES_COMMA)
fragments_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_FRAGMENTS_COMMA)
pseudo_genes.summary: QUALITY_GENES_COMMA=$(QUALITY_PSEUDOGENES_COMMA)

%_genes.summary: classes_genes.summary
	$(PRELOG)
	@awk -v ngenomes=$(PARAM_NUM_GENOMES) -v c="class,$(QUALITY_GENES_COMMA)" \
		'BEGIN { split(c,a,","); for (x in a) { cc[a[x]] = 1; } } \
		!/^#/ && ($$1 in cc) \
		{ print; split($$0, a); \
		  for (x = 2; x <= ngenomes+2; ++x ) \
			{ totals[x]+=a[x]; } } \
		END { \
		  printf("all"); \
		  for (x = 2; x <= ngenomes+2; ++x ) \
		  { printf("\t%i", totals[x]); } printf("\n") }' \
	< $< > $@
	$(EPILOG)

################################################
## Exons
missed_exons.summary:
	$(PRELOG)
	@printf "# Exons statistics for CG, PG and SG predictions. Numbers are normalized by prediction.\n" > $@
	@printf "species\tcorrect\t\tdubious\tinserted_introns\t\tdeleted_introns\t\tdeleted_cexons\t\tdeleted_nexons\t\tdeleted_exons\t\n" >> $@
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT  '$${x}',\
			COUNT(*), \
			SUM(CASE WHEN e.dubious_exons = 0 AND e.inserted_introns = 0 AND \
					e.deleted_introns = 0 AND e.deleted_exons = 0 AND \
					e.deleted_cexons = 0 AND e.deleted_nexons = 0 \
				THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.dubious_exons = 0 AND e.inserted_introns = 0 AND \
					e.deleted_introns = 0 AND e.deleted_exons = 0 AND \
					e.deleted_cexons = 0 AND e.deleted_nexons = 0 \
				THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.dubious_exons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.dubious_exons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.inserted_introns > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.inserted_introns > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_introns > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_introns > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_cexons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_cexons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_nexons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_nexons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*), \
			SUM(CASE WHEN e.deleted_exons > 0 THEN 1 ELSE 0 END), \
			SUM(CASE WHEN e.deleted_exons > 0 THEN 1 ELSE 0 END) * 100 / COUNT(*) \
			FROM $${x}.exons_summary AS e, \
			$${x}.quality AS q,  \
			$${x}.redundant AS r \
			WHERE e.prediction_id = q.prediction_id AND \
			e.prediction_id = r.mem_prediction_id AND \
			r.mem_prediction_id = r.rep_prediction_id AND \
			q.class IN ('CG', 'PG', 'SG')" \
			$(PSQL_CONNECTION_OPTIONS) >> $@; \
	done
	$(EPILOG)

dubious_exons.distn:
	@for x in dsim_vs_dmel3; do \
		echo $${x}; \
		$(PSQL_CONNECTION) "SELECT p.prediction_id, e.exon_id, p.nintrons + 1, e.pidentity, p.pidentity, q.class \
			FROM 	$${x}.exons AS e, \
				$${x}.predictions AS p, \
				$${x}.quality AS q \
			WHERE e.prediction_id = p.prediction_id AND \
			e.exon_id > 0 AND \
			e.prediction_id = q.prediction_id AND \
			q.class IN ('CG','PG') AND \
			is_ok = 'F'" \
			$(PSQL_CONNECTION_OPTIONS) > tmp_$${x}; \
	done

################################################
## build map of peptides to clusters
map_peptides2clusters:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
		--peptides=$(PARAM_SRC_PEPTIDES) \
		--method= \
		--outfile-clusters=map_peptides2clusters \
	> $@.log
	$(EPILOG)

################################################
## get list of missed queries
missed_queries.summary: map_peptides2clusters
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=missed \
	--infile-clusters=map_peptides2clusters \
	--pattern-output=missed_queries_%s.list \
	--pattern-stats=missed_queries_%s.stats \
	--genomes="$(SCHEMAS_COMMA)" \
	$(CMD_FILTER) > $@
	$(EPILOG)

################################################
## get list of missed queries
missed_queries_nr.summary: map_peptides2clusters
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=missed \
	--infile-clusters=map_peptides2clusters \
	--pattern-output=missed_queries_%s_nr.list \
	--non-redundant \
	--genomes="$(SCHEMAS_COMMA)" \
	$(CMD_FILTER) > $@
	$(EPILOG)

################################################
## Summary on queries
## number of queries that have no predictions in the database.
queries_stats.summary: map_peptides2clusters
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=stats \
	--infile-clusters=map_peptides2clusters \
	--genomes="$(SCHEMAS_COMMA)" \
	$(CMD_FILTER) > $@
	$(EPILOG)

queries_stats_good_genes.summary: map_peptides2clusters
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=stats \
	--infile-clusters=map_peptides2clusters \
	--genomes="$(SCHEMAS_COMMA)" \
	--filter-quality=$(QUALITY_GOODGENES_COMMA) \
	$(CMD_FILTER) > $@
	$(EPILOG)

queries_stats_export_genes.summary: map_peptides2clusters
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)gpipe/analyze_queries.py \
	--peptides=$(PARAM_SRC_PEPTIDES) \
	--methods=stats \
	--infile-clusters=map_peptides2clusters \
	--genomes="$(SCHEMAS_COMMA)" \
	--filter-quality=$(QUALITY_EXPORTGENES_COMMA) \
	$(CMD_FILTER) > $@
	$(EPILOG)

queries.summary:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

queries.report:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	--summary=min,max,count,mean \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

## get number of predictions/nr_predictions per query in each of 
## the schemas.
queries_counts.data:
	$(PRELOG)
	@python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--connection=$(PARAM_PSQL_HOST):$(PARAM_PSQL_DATABASE) \
	--report=queries \
	--fields=npredictions,nr_npredictions$(CMD_FIELDS_QUALITY) \
	--summary=count \
	$(PARAM_SRC_SCHEMAS) > $@
	$(EPILOG)

queries_counts.png: queries_counts.data
	$(PRELOG)
	@cut -f 3-`echo "3 + $(QUALITY_NUM_CLASSES)" | bc` queries_counts.data | grep "^[0-9]" |\
	python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
	--column=all |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--legend=counts,$(QUALITY_CLASSES_COMMA) --hardcopy=$@ 
	$(EPILOG)

##########################################################################################
##########################################################################################
##########################################################################################
## Select properties for best predictions in each genome
CMD_SUBSELECT_BEST_PREDICTION=	(SELECT b.prediction_id \
				FROM $${x}.predictions AS b \
				WHERE p.query_token = b.query_token \
				ORDER BY b.score DESC LIMIT 1 )

##########################################################################################
## Coverage plots and statistics

##########################################################################################
## statistics of best coverage per query
queries_coverage.stats:
	$(PRELOG)
	@printf "genome\t" > $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@_tmp
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "%s\t" $${x} >> $@_tmp; \
		$(PSQL_CONNECTION) "SELECT p.query_coverage \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py --flat |\
		grep -v "#" >> $@_tmp; \
	done;
	@$(CMD_TRANSLATE) < $@_tmp > $@
	@rm -f $@_tmp
	$(EPILOG)

##########################################################################################
## histogram of best coverage per query
queries_coverage.hist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT p.query_coverage \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--min-value=0 --bin-size=1 --no-titles --headers=$${x} |\
		grep -v "#" > $@_$${x}.tmp; \
	done;
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--missing=0 $@_*.tmp |\
	$(CMD_TRANSLATE) |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py "bin" $(PARAM_SRC_NAMES) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

PLOT_OPTIONS_QUERIES=\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py "bin" $(PARAM_SRC_SCHEMAS) |\
	python $(DIR_SCRIPTS_TOOLS)plot_histogram.py \
	--ytitle="Frequency" \
	--legend-location="upper left" \
	--xrange=0,105 \
	--hardcopy=$@ > /dev/null

images.dir/queries_coverage_cu.png: queries_coverage.hist
	@grep -v "#" < queries_coverage.hist |\
	$(PLOT_OPTIONS_QUERIES) \
		--cumulate \
		--logscale=y \
		--xtitle="Coverage"

images.dir/queries_coverage_fu.png: queries_coverage.hist
	@grep -v "#" < queries_coverage.hist |\
	$(PLOT_OPTIONS_QUERIES) \
		--xtitle="Coverage"

images.dir/queries_coverage_fn.png: queries_coverage.hist
	grep -v "#" < queries_coverage.hist |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Coverage" \
		--normalize

##########################################################################################
## Percent identity plots and statistics

##########################################################################################
## statistics of identity of best query
queries_identity.stats:
	$(PRELOG)
	@printf "genome\t" > $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)data2stats.py --write-header >> $@_tmp
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "%s\t" $${x} >> $@_tmp; \
		$(PSQL_CONNECTION) "SELECT p.pidentity \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2stats.py --flat |\
		grep -v "#" >> $@_tmp; \
	done;
	@$(CMD_TRANSLATE) < $@_tmp > $@
	@rm -f $@_tmp
	$(EPILOG)

queries_identity.hist:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT p.pidentity \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION) " \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
		--min-value=0 --bin-size=1 --no-titles --headers=$${x} |\
		grep -v "#" > $@_$${x}.tmp; \
	done;
	@python $(DIR_SCRIPTS_TOOLS)combine_histograms.py \
	--missing=0 $@_*.tmp |\
	$(CMD_TRANSLATE) |\
	python $(DIR_SCRIPTS_TOOLS)csv_cut.py "bin" $(PARAM_SRC_NAMES) > $@
	@rm -f $@_*.tmp
	$(EPILOG)

images.dir/queries_identity_fu.png: queries_identity.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--xtitle="Percent identity"

images.dir/queries_identity_fn.png: queries_identity.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--logscale=y \
		--normalize \
		--xtitle="Percent identity"

images.dir/queries_identity_c.png: queries_identity.hist
	grep -v "#" < $< |\
	$(PLOT_OPTIONS_QUERIES) \
		--xtitle="Percent identity" 

##########################################################################
queries_correlation.data: queries_correlation.dir
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT p.prediction_id, \
				      q.class, \
				      CAST(p.query_coverage AS INTEGER), \
				      CAST(p.pidentity AS INTEGER) \
	                        FROM $${x}.predictions AS p, \
				     $${x}.quality AS q \
	                        WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION) AND \
			     q.prediction_id = p.prediction_id" \
               $(PSQL_CONNECTION_OPTIONS) > queries_correlation.dir/$@_$${x}; \
	done
	$(EPILOG)

##########################################################################
queries_correlation.2dhist: queries_correlation.dir
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT CAST(p.query_coverage AS INTEGER), \
				      CAST(p.pidentity AS INTEGER) \
				FROM $${x}.predictions AS p \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION)" \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)calculate_histogram_2D.py \
		--bin-size1=2 --bin-size2=2 |\
		sort -k1,1n -k2,2n |\
		grep -v "#" |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--asymmetric --format=int \
		--row-names="range(0,101,2)" --col-names="range(0,101,2)" \
		> queries_correlation.dir/$@_$${x}; \
	done
	$(EPILOG)


##########################################################################
queries_correlation_goodgenes.2dhist: QUALITY_GENES_QUOTED_COMMA=$(QUALITY_GOODGENES_QUOTED_COMMA)
queries_correlation_conservedgenes.2dhist: QUALITY_GENES_QUOTED_COMMA=$(QUALITY_CONSERVEDGENES_QUOTED_COMMA)
queries_correlation_unconservedgenes.2dhist: QUALITY_GENES_QUOTED_COMMA=$(QUALITY_UNCONSERVEDGENES_QUOTED_COMMA)

queries_correlation_%.2dhist: queries_correlation.dir
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT CAST(p.query_coverage AS INTEGER), \
				      CAST(p.pidentity AS INTEGER) \
				FROM $${x}.predictions AS p, $${x}.quality AS q \
				WHERE p.prediction_id = $(CMD_SUBSELECT_BEST_PREDICTION) AND \
				q.prediction_id = p.prediction_id AND \
				q.class IN ($(QUALITY_GENES_QUOTED_COMMA)) \
				" \
		$(PSQL_CONNECTION_OPTIONS) |\
		python $(DIR_SCRIPTS_TOOLS)calculate_histogram_2D.py \
		--bin-size1=2 --bin-size2=2 |\
		sort -k1,1n -k2,2n |\
		grep -v "#" |\
		python $(DIR_SCRIPTS_TOOLS)sparse2full.py \
		--asymmetric --format=int \
		--row-names="range(0,101,2)" --col-names="range(0,101,2)" \
		> queries_correlation.dir/$@_$${x}; \
	done;
	$(EPILOG)

######################################################################
## build wiki page of results
summary.wiki: images $(INDIVIDUAL_TARGETS)
	$(PRELOG)
	@rm -f $@
	python $(DIR_SCRIPTS_TOOLS)preppy.py \
	$(DIR_SCRIPTS_GENEPREDICTION)gpipe_stats.prep \
	> $@
	@mv -f summary.wiki $(PARAM_DIR_UPLOAD)
	@rm -f $(PARAM_DIR_UPLOAD)$@.zip
	@cd images.dir; zip $(PARAM_DIR_UPLOAD)$@.zip *.png 2>/dev/null 
	$(EPILOG)

%.csv: %
	grep -v "#" $* |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
		--apply=translation --multiple --columns=all |\
	perl -p -e "s/\t/,/g" > ~/out.csv

summary.csv: $(INDIVIDUAL_TARGETS) 
	rm -f $@
	for file in $?; do \
		echo "# $${file}" >> $@; \
		python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
		--apply=translation --multiple --columns=all \
		< $${file} |\
		grep -v "#" |\
		perl -p -e "s/\t/,/g" >> $@; \
	done

################################################## 
## various plots
images: images.dir $(IMAGE_TARGETS:%=images.dir/%)

images.dir/%.png: %.summary colours translation
	@grep -v "all" $*.summary |\
	awk '!/^#/ {printf("%s\t%s\n", $$0, $$1);}' |\
	python $(DIR_SCRIPTS_TOOLS)substitute_tokens.py \
	--apply=colours \
	--column=$$(($(PARAM_NUM_GENOMES)+3)) |\
	$(CMD_TRANSLATE) > $@_tmp
	@python $(DIR_SCRIPTS_TOOLS)r_table2scatter.py \
	--plot=bar \
	--file=$@_tmp \
	--columns=all \
	--legend=1 \
	--labels="genome,genes" \
	--options="cex.names=1.5" \
	--colours=$$(($(PARAM_NUM_GENOMES)+3)) \
	--hardcopy=$@
	@rm -f $@_tmp

################################################
## Optional: summary on gaps
gaps.summary:
	$(PRELOG)
	@printf "schema\tncontigs\tnresidues\tngaps\tnseqregions\tngapregions\tna\tnc\tng\tnt\tnn\tnx\tno\n" > $@
	@for genome in $(PARAM_SRC_SCHEMAS); do \
		$(PSQL_CONNECTION) "SELECT \
			'$${genome}', \
			COUNT(*), \
			SUM(nresidues), \
			SUM(ngaps), \
			SUM(nseqregions), \
			SUM(ngapregions), \
			SUM(na), \
			SUM(nc), \
			SUM(ng), \
			SUM(nt), \
			SUM(nn), \
			SUM(nx), \
			SUM(no) \
			FROM $${genome}.gaps_summary" \
		$(PSQL_CONNECTION_OPTIONS) >> $@; \
	done
	$(EPILOG)

################################################
## Optional: summary on domains
domains.report:
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--report=domains \
	--fields=ndomains,npredictions,nr_ndomains,nr_npredictions \
	$(PARAM_SRC_SCHEMAS) > $@

domains.report_summary:
	python $(DIR_SCRIPTS_GENEPREDICTION)optic/compare_projects.py \
	--report=domains \
	--fields=ndomains,npredictions,nr_ndomains,nr_npredictions \
	--summary=min,max,count,mean \
	$(PARAM_SRC_SCHEMAS) > $@

domains.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "category\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'predictions', COUNT(DISTINCT prediction_id) FROM $${x}.domains;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'domains', COUNT(*) FROM $${x}.domains;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'families', COUNT(DISTINCT domain_id) FROM $${x}.domains;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'nr_predictions', COUNT(DISTINCT d.prediction_id) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'nr_domains', COUNT(*) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'nr_families', COUNT(DISTINCT domain_id) \
			FROM $${x}.domains AS d, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = m.mem_prediction_id AND \
			m.rep_prediction_id = d.prediction_id;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp > $@
	rm -f $@_*.tmp

################################################
################################################
################################################
## clean up directory
################################################
clean:
	rm -f *.summary
	rm -f domains.*
	rm -f queries.*
	rm -rf images.dir
	rm -f summary.wiki
	rm -f *.tmp
	rm -f map*
	rm -f missed*

include $(DIR_SCRIPTS_GENEPREDICTION)/makefiles/Makefile.common

################################################
################################################
################################################

################################################
## Summary on classes
classes_predictions.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality;" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_classes_predictions.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' GROUP BY class ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm'" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_classes_genes.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(DISTINCT gene_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' GROUP BY class ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(DISTINCT gene_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm'" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## summary for pseudogenes
good_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ); " \
			$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_good_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_GOODGENES_QUOTED_COMMA) ); " \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## summary for pseudogenes
pseudogenes.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ); " \
			$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_pseudo_transcripts.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_PSEUDOGENES_QUOTED_COMMA) ); " \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp


################################################
## summary for fragments
fragments.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(*) FROM $${x}.quality \
			WHERE class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ); " \
			$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

nr_fragments.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "class\t$${x}" > $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT class, COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND \
			m.method = 'm' AND\
			class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ) \
			GROUP BY class \
			ORDER BY SUBSTRING(class,2,1),SUBSTRING(class,1,1);" \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
		$(PSQL_CONNECTION) "SELECT 'all', COUNT(DISTINCT o.prediction_id) \
			FROM $${x}.overview AS o, $${x}.redundant AS m \
			WHERE m.rep_prediction_id = o.prediction_id AND m.method = 'm' AND \
			class IN ( $(QUALITY_FRAGMENTS_QUOTED_COMMA) ); " \
		$(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" `ls -t $@_*.tmp` > $@
	rm -f $@_*.tmp

################################################
## Summary on CG
class_%.summary:
	for x in $(PARAM_SRC_SCHEMAS); do \
		echo -e "query\t$${x}" > $@_$${x}.tmp; \
		$(PSQL_CONNECTION) "SELECT query_token, COUNT(*) FROM $${x}.overview WHERE class='$*' GROUP BY query_token" $(PSQL_CONNECTION_OPTIONS) >> $@_$$x.tmp; \
	done ; 
	python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp > $@
	rm -f $@_*.tmp

#################################################################
## Summary of kaks calculations
## Overview of median ds per class
kaks.summary:
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		printf "class\t%s\n" $${x} > $@_$${x}.tmp; \
		for quality in $(QUALITY_CLASSES); do \
			printf "%s\t" $${quality} >> $@_$${x}.tmp; \
			$(PSQL_CONNECTION) \
			"SELECT ds FROM $${x}.kaks AS k, \
			$${x}.geneinfo AS g \
			WHERE g.best_class = '$${quality}' AND g.best_prediction_id = k.prediction_id " |\
			python $(DIR_SCRIPTS_TOOLS)data2stats.py --flat | grep -v "#" | cut -f 5 >> $@_$${x}.tmp; \
		done; \
	done ; 
	@python $(DIR_SCRIPTS_TOOLS)combine_tables.py --sort="$(SCHEMAS_COMMA)" $@_*.tmp > $@
	@rm -f $@_*.tmp
	$(EPILOG)

#################################################################
## Histograms of ks per class
kaks.dir/hists: kaks.dir
	$(PRELOG)
	@for x in $(PARAM_SRC_SCHEMAS); do \
		for quality in $(QUALITY_CLASSES); do \
			$(PSQL_CONNECTION) \
			"SELECT ds FROM $${x}.kaks AS k, \
			$${x}.geneinfo AS g \
			WHERE g.best_class = '$${quality}' AND g.best_prediction_id = k.prediction_id " |\
			python $(DIR_SCRIPTS_TOOLS)data2histogram.py \
				--no-titles --headers=$${x} \
				--min-value=0 \
				--bin-size=0.1 |\
			grep -v "#" > $@_$${x}_$${quality}.tmp; \
		done; \
		python $(DIR_SCRIPTS_TOOLS)combine_histograms.py $@_$${x}_*.tmp > $@_$${x}.hist; \
		rm -f $@_$${x}_*.tmp; \
	done ; 
	@touch $@
	$(EPILOG)

KAKS_IMAGES_QUERIES=$(wildcard kaks.dir/*.hist)
KAKS_IMAGES_TARGETS=$(KAKS_IMAGES_QUERIES:%.hist=%.png)
kaks-images-hook: $(KAKS_IMAGES_TARGETS)

kaks.dir/%.png: kaks.dir/%.hist
	$(PRELOG)
	@python	$(DIR_SCRIPTS_TOOLS)plot_histogram.py \
		--xrange=0,5 --cumulate --normalize --hardcopy=$@ \
		--xtitle=ds --ytitle="cumulative normalized counts" \
		< kaks.dir/$*.hist > /dev/null
	$(EPILOG)

#################################################################
#################################################################
#################################################################
## Load summary data into table
#################################################################
%.load: %.summary
	$(PRELOG)
	@python $(DIR_SCRIPTS_TOOLS)csv2psql.py \
		--lowercase \
		--table=$(PARAM_PSQL_SCHEMA).$* \
	< $< > $@
	@echo "loaded into $(PARAM_PSQL_SCHEMA).$*: `$(PSQL_CONNECTION) 'SELECT COUNT(*) FROM $(PARAM_PSQL_SCHEMA).$*;' -t `"  >> $(LOG)
	$(EPILOG)

